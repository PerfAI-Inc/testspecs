{
  "basePath": "/elements/api-v2",
  "paths": {
    "/banks": {
      "get": {
        "summary": "Search for banks",
        "operationId": "getBanks",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bank"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, bank_name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : account_currency, bank_address",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Banks"
        ]
      }
    },
    "/banks/{id}": {
      "get": {
        "summary": "Retrieve a Bank",
        "operationId": "getBankById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/bank"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The bank ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Banks"
        ]
      }
    },
    "/bulk/download": {
      "post": {
        "summary": "Create a new bulk download job (asynchronous)",
        "operationId": "createBulkDownload",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/bulkDownloadRequest"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/jobs": {
      "get": {
        "operationId": "getBulkJobs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkJobList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Fetch all the bulk jobs for an instance",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Cancel an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the errors of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "Bulk"
        ],
        "produces": [
          "text/csv",
          "application/json",
          "application/jsonl"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" :&lt;path for the sub resource&gt;, \"format\": &lt;json/csv&gt;, \"callback-payload\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/customers": {
      "post": {
        "summary": "Create a customer",
        "operationId": "createCustomer",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customerCreate"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Search for customers",
        "operationId": "getCustomers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : currency, country_code",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response \\n<br/> For instance : id, name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{id}": {
      "patch": {
        "summary": "Update a customer",
        "operationId": "updateCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customerUpdateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customerUpdateReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Retrieve a customer",
        "operationId": "getCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customer"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/invoices": {
      "post": {
        "summary": "Create an invoice",
        "operationId": "createInvoice",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoiceCreateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoiceCreate"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoice"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response \\n<br/> For instance : id, user_name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : customer",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "summary": "Retrieve an invoice",
        "operationId": "getInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The invoice ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/payments": {
      "post": {
        "summary": "Create a payment",
        "operationId": "createPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentCreateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentCreateReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Search for payments",
        "operationId": "getPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoice"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response \\n<br/> For instance : id, user_name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : currency, country_code",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments-receipts": {
      "post": {
        "summary": "Create a payment-receipts",
        "operationId": "createPaymentsReceipt",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoiceCreateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentReciptsCreate"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Payments Receipts"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "summary": "Retrieve a payment",
        "operationId": "getPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoice"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Payment ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "Ping"
        ]
      }
    },
    "/product-groups": {
      "get": {
        "summary": "Search for product-groups",
        "operationId": "getProductGroups",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/productGroup"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : currency, main_address",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Product Groups"
        ]
      }
    },
    "/product-groups/{id}": {
      "get": {
        "summary": "Retrieve a product-group",
        "operationId": "getProductGroupById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productGroup"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The product-group ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Product Groups"
        ]
      }
    },
    "/product-prices": {
      "get": {
        "summary": "Search for product-prices",
        "operationId": "getProductPrices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/productPrice"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : product_id, product_name\t",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : product_group",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Product Prices"
        ]
      }
    },
    "/product-prices/{id}": {
      "get": {
        "summary": "Retrieve a product-price",
        "operationId": "getProductPriceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/productPrice"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The product-price ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Product Prices"
        ]
      }
    },
    "/products": {
      "post": {
        "summary": "Create a product",
        "operationId": "createProduct",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/productCreate"
            },
            "in": "body",
            "name": "products",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "get": {
        "summary": "Search for products",
        "operationId": "getProducts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/product"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : product_group",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Retrieve a product",
        "operationId": "getProductById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/product"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The product ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "summary": "Delete a product",
        "operationId": "deleteProductById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The product ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/transactions": {
      "get": {
        "summary": "Search for transactions",
        "operationId": "getTransactions",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transaction"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, name",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : currency, country_code",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Retrieve a transaction",
        "operationId": "getTransactionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transaction"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The transaction ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/warehouse-holdings": {
      "post": {
        "summary": "Create a warehouse-holding",
        "operationId": "createWarehouseHolding",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouseHolding"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/warehouseHoldingCreate"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": false
          }
        ],
        "tags": [
          "Warehouse Holdings"
        ]
      },
      "get": {
        "summary": "Search for warehouse-holdings",
        "operationId": "getWarehouseHoldings",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/warehouseHolding"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : warehouse, product",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, product_id",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Warehouse Holdings"
        ]
      }
    },
    "/warehouse-holdings/{id}": {
      "patch": {
        "summary": "Update a warehouse-holding",
        "operationId": "updateWarehouseHoldingById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouseHoldingUpdateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse-holding ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/warehouseHoldingUpdateReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": false
          }
        ],
        "tags": [
          "Warehouse Holdings"
        ]
      },
      "get": {
        "summary": "Retrieve a warehouse-holding",
        "operationId": "getWarehouseHoldingById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouseHolding"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse-holding ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Warehouse Holdings"
        ]
      },
      "delete": {
        "summary": "Delete a warehouse-holding",
        "operationId": "deleteWarehouseHoldingById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse-holding ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Warehouse Holdings"
        ]
      }
    },
    "/warehouses": {
      "post": {
        "summary": "Create a warehouse",
        "operationId": "createWarehouse",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouseCreateRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/warehouseCreateReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": false
          }
        ],
        "tags": [
          "Warehouses"
        ]
      },
      "get": {
        "summary": "Search for warehouses",
        "operationId": "getWarehouses",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/warehouse"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. <br/> To filter by date_time_updated, you may pass: `date_time_updated >= '2019-01-15T19:40:32.187'`",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "expand",
            "description": "The expand, used to request additional objects (in csv format) to be sent on the response <br/> For instance : warehouse, product",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fields",
            "description": "The fields, used to request limited objects (in csv format) to be sent on the response <br/> For instance : id, product_id",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Warehouses"
        ]
      }
    },
    "/warehouses/{id}": {
      "patch": {
        "summary": "Update a warehouse",
        "operationId": "updateWarehouseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/warehouse"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": false
          }
        ],
        "tags": [
          "Warehouses"
        ]
      },
      "get": {
        "summary": "Retrieve a warehouse",
        "operationId": "getWarehouseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/warehouse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Warehouses"
        ]
      },
      "delete": {
        "summary": "Delete a warehouse",
        "operationId": "deleteWarehouseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The warehouse ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Warehouses"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      }
    }
  },
  "host": "hostname",
  "schemes": [
    "https"
  ],
  "definitions": {
    "bulkDownloadRequest": {
      "properties": {
        "apiLimit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "continueFromJobId": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "docsHubDetails": {
          "$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
        },
        "filterDateField": {
          "type": "string",
          "x-samplevalue": "lastModifiedDate"
        },
        "filterNulls": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "format": {
          "enum": [
            "application/json",
            "txt/csv",
            "application/jsonl"
          ],
          "type": "string",
          "x-samplevalue": "application/json"
        },
        "from": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-06T13:22:17-08:00"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 107
        },
        "notificationUrl": {
          "type": "string",
          "x-samplevalue": "https://myreceiver.com/whatever"
        },
        "objectName": {
          "type": "string",
          "x-samplevalue": "accounts"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "query": {
          "$ref": "#/definitions/bulkDownloadRequestQuery"
        },
        "selectFields": {
          "type": "string",
          "x-samplevalue": "a,b,c"
        },
        "to": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-10T13:22:17-08:00"
        },
        "where": {
          "type": "string",
          "x-samplevalue": "name='Alex' and gender='male'"
        }
      },
      "required": [
        "objectName",
        "format"
      ],
      "title": "bulkDownloadRequest",
      "type": "object"
    },
    "BulkUploadResponse": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance Id of the bulk job",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "productCreateWarehouse_holdings": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.787"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34738
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34737
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34629
        }
      },
      "required": [
        "warehouse_id"
      ],
      "title": "warehouse_holdings",
      "type": "object"
    },
    "productCreate": {
      "properties": {
        "allow_sales_order": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "barcode": {
          "type": "string",
          "x-samplevalue": "abc"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "abc"
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:09.563"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "abc"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34737
        },
        "name": {
          "type": "string",
          "x-samplevalue": "abc"
        },
        "product_group_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34633
        },
        "tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1731
        },
        "warehouse_holdings": {
          "items": {
            "$ref": "#/definitions/productCreateWarehouse_holdings"
          },
          "type": "array"
        }
      },
      "required": [
        "code",
        "name",
        "product_group_id"
      ],
      "title": "productCreate",
      "type": "object",
      "x-has-customfields": false,
      "x-vendor-objectname": "products"
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "warehouseHoldingUpdateRes": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 201298
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34791
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34626
        }
      },
      "title": "warehouseHoldingUpdateRes",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "warehouseHoldingUpdateReq": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "id": {
          "type": "string",
          "x-samplevalue": "34783"
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "type": "string",
          "x-samplevalue": "34791"
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "type": "string",
          "x-samplevalue": "34629"
        }
      },
      "title": "warehouseHoldingUpdateReq",
      "type": "object"
    },
    "bank": {
      "properties": {
        "account_currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "account_name": {
          "type": "string",
          "x-samplevalue": "Stationery & Computer Mart UK Ltd"
        },
        "account_no": {
          "type": "string",
          "x-samplevalue": "003234234"
        },
        "account_status_type": {
          "type": "string",
          "x-samplevalue": "AccountStatusActive"
        },
        "account_type": {
          "type": "string",
          "x-samplevalue": "BankAccountTypeCurrent"
        },
        "balance": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -10131.57
        },
        "balance_in_base": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -10131.57
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "Lloyds Bank PLC"
        },
        "bic": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "1200"
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2019-01-15T19:40:31.263"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Bank Current Account"
        },
        "iban": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 29401
        },
        "overdraft_limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "sort_code": {
          "type": "string",
          "x-samplevalue": "233434"
        },
        "statement_balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "bank",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "banks"
    },
    "invoiceCreate": {
      "properties": {
        "customer_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 27825
        },
        "discount_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "discount_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_goods_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 14.25
        },
        "document_tax_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_tax_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.43
        },
        "due_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-02-01T00:00:00"
        },
        "exchange_rate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "second_reference": {
          "type": "string",
          "x-samplevalue": "AT Mini Tower Case"
        },
        "settled_immediately": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "transaction_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-01-02T00:00:00"
        }
      },
      "required": [
        "customer_id"
      ],
      "title": "invoiceCreate",
      "type": "object",
      "x-has-customfields": false,
      "x-vendor-objectname": "sales_invoices"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "warehouseCreateRes": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 201308
        },
        "name": {
          "type": "string",
          "x-samplevalue": "cloudee"
        }
      },
      "title": "warehouseCreateRes",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "warehouseHolding": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 191078
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34809
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34627
        }
      },
      "title": "warehouseHolding",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "warehouse": {
      "properties": {
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2019-03-27T09:39:11.217"
        },
        "id": {
          "format": "int64",
          "type": "integer",
          "x-primary-key": [
            "id"
          ],
          "x-samplevalue": 34626
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Supplie34"
        }
      },
      "title": "warehouse",
      "type": "object"
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "bulkDownloadRequestQuery": {
      "properties": {
        "anyKey": {
          "type": "string",
          "x-samplevalue": "anyValue"
        }
      },
      "title": "query",
      "type": "object"
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "productPrice": {
      "properties": {
        "currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "currency_name": {
          "type": "string",
          "x-samplevalue": "Pound Sterling"
        },
        "currency_symbol": {
          "type": "string",
          "x-samplevalue": "£"
        },
        "price_band_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1064
        },
        "price_band_name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "product_code": {
          "type": "string",
          "x-samplevalue": "BOARD001"
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34751
        },
        "product_name": {
          "type": "string",
          "x-samplevalue": "Whiteboard - Drywipe (900 x 1200)"
        },
        "product_price_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34760
        },
        "product_price_price": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "product_price_use_standard": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "product_stock_unit_name": {
          "type": "string",
          "x-samplevalue": "Each"
        }
      },
      "title": "productPrice",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "product_id"
      ],
      "x-vendor-objectname": "product_price_views"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "customerCreate": {
      "properties": {
        "account_status_type": {
          "type": "string",
          "x-samplevalue": "AccountStatusActive"
        },
        "analysis_code_1": {
          "type": "string"
        },
        "analysis_code_2": {
          "type": "string"
        },
        "analysis_code_3": {
          "type": "string"
        },
        "analysis_code_4": {
          "type": "string"
        },
        "analysis_code_5": {
          "type": "string"
        },
        "balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "country_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 13
        },
        "credit_limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2019-01-15T19:40:32.187"
        },
        "default_tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1729
        },
        "duns_code": {
          "type": "string"
        },
        "exchange_rate_type": {
          "type": "string",
          "x-samplevalue": "ExchangeRateSingle"
        },
        "fax_area_code": {
          "type": "string"
        },
        "fax_country_code": {
          "type": "string"
        },
        "fax_subscriber_number": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 157994
        },
        "name": {
          "type": "string",
          "x-samplevalue": "CE Customer"
        },
        "on_hold": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "short_name": {
          "type": "string",
          "x-samplevalue": "CE Custo"
        },
        "telephone_area_code": {
          "type": "string"
        },
        "telephone_country_code": {
          "type": "string"
        },
        "telephone_subscriber_number": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "required": [
        "reference",
        "name"
      ],
      "title": "customerCreate",
      "type": "object",
      "x-has-customfields": false,
      "x-vendor-objectname": "customers"
    },
    "customerUpdateReq": {
      "properties": {
        "account_status_type": {
          "type": "string",
          "x-samplevalue": "AccountStatusActive"
        },
        "analysis_code_1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_2": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_3": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_4": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_5": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "country_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 13
        },
        "credit_limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "default_tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1729
        },
        "duns_code": {
          "type": "string"
        },
        "exchange_rate_type": {
          "type": "string",
          "x-samplevalue": "ExchangeRateSingle"
        },
        "fax_area_code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "fax_country_code": {
          "type": "string"
        },
        "fax_subscriber_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "CE Customer"
        },
        "on_hold": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "short_name": {
          "type": "string",
          "x-samplevalue": "CE Custo"
        },
        "telephone_area_code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "telephone_country_code": {
          "type": "string"
        },
        "telephone_subscriber_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "website": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "customerUpdateReq",
      "type": "object"
    },
    "warehouseHoldingCreate": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.787"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34738
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34737
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34629
        }
      },
      "required": [
        "warehouse_id",
        "product_id"
      ],
      "title": "warehouseHoldingCreate",
      "type": "object",
      "x-has-customfields": false,
      "x-vendor-objectname": "warehouse_holdings"
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "BulkQuery": {
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "instance_id": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "customerUpdateRes": {
      "properties": {
        "account_status_type": {
          "type": "string",
          "x-samplevalue": "AccountStatusActive"
        },
        "analysis_code_1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_2": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_3": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_4": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "analysis_code_5": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7210
        },
        "country_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 13
        },
        "credit_limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2019-04-15T05:15:21.263"
        },
        "default_tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1729
        },
        "duns_code": {
          "type": "string"
        },
        "exchange_rate_type": {
          "type": "string",
          "x-samplevalue": "ExchangeRateSingle"
        },
        "fax_area_code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "fax_country_code": {
          "type": "string"
        },
        "fax_subscriber_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 157994
        },
        "name": {
          "type": "string",
          "x-samplevalue": "CE Customer"
        },
        "on_hold": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "short_name": {
          "type": "string",
          "x-samplevalue": "CE Custo"
        },
        "telephone_area_code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "telephone_country_code": {
          "type": "string"
        },
        "telephone_subscriber_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "website": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "customerUpdateRes",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "paymentCreateReq": {
      "properties": {
        "bank_id": {
          "format": "int32",
          "type": "integer"
        },
        "cheque_currency_id": {
          "format": "int32",
          "type": "integer"
        },
        "cheque_value": {
          "format": "double",
          "type": "number"
        },
        "customer_cheque_value": {
          "format": "double",
          "type": "number"
        },
        "customer_id": {
          "format": "int32",
          "type": "integer"
        },
        "exchange_rate": {
          "format": "double",
          "type": "number"
        },
        "reference": {
          "type": "string"
        },
        "second_reference": {
          "type": "string"
        },
        "settlement_discount_value": {
          "format": "double",
          "type": "number"
        },
        "transaction_date": {
          "type": "string"
        }
      },
      "required": [
        "customer_id",
        "bank_id",
        "cheque_value"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "sales_payments",
      "type": "object"
    },
    "paymentCreateRes": {
      "properties": {
        "urn": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1636
        }
      },
      "title": "paymentCreateRes",
      "x-primary-key": [
        "urn"
      ],
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "invoiceCreateRes": {
      "properties": {
        "urn": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1598
        }
      },
      "title": "invoiceCreateRes",
      "x-primary-key": [
        "urn"
      ],
      "type": "object"
    },
    "warehouseCreateReq": {
      "properties": {
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.77"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34626
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Supplied Direct"
        }
      },
      "required": [
        "name"
      ],
      "title": "warehouseCreateReq",
      "type": "object",
      "x-has-customfields": false,
      "x-vendor-objectname": "warehouses"
    },
    "product": {
      "properties": {
        "allow_sales_order": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "barcode": {
          "type": "string"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "M"
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:09.563"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34737
        },
        "name": {
          "type": "string",
          "x-samplevalue": "M"
        },
        "product_group_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34633
        },
        "tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1731
        }
      },
      "title": "product",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "products"
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "productWarehouse_holdings": {
      "properties": {
        "confirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "maximum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "minimum_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "product_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 191038
        },
        "quantity_allocated": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_bom": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_sop": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_allocated_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "quantity_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "reorder_level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unconfirmed_qty_in_stock": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "warehouse_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34629
        }
      },
      "title": "warehouse_holdings",
      "x-primary-key": [
        "product_id"
      ],
      "type": "object"
    },
    "paymentReciptsCreate": {
      "properties": {
        "bank_id": {
          "format": "int32",
          "type": "integer"
        },
        "cheque_currency_id": {
          "format": "int32",
          "type": "integer"
        },
        "cheque_value": {
          "format": "double",
          "type": "number"
        },
        "customer_cheque_value": {
          "format": "double",
          "type": "number"
        },
        "customer_id": {
          "format": "int32",
          "type": "integer"
        },
        "exchange_rate": {
          "format": "double",
          "type": "number"
        },
        "reference": {
          "type": "string"
        },
        "second_reference": {
          "type": "string"
        },
        "settlement_discount_value": {
          "format": "double",
          "type": "number"
        },
        "transaction_date": {
          "type": "string"
        }
      },
      "required": [
        "customer_id",
        "bank_id",
        "cheque_value"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "sales_receipts",
      "type": "object"
    },
    "BulkJobList": {
      "title": "BulkJobList",
      "properties": {
        "record_count": {
          "x-samplevalue": 41,
          "format": "int32",
          "type": "integer"
        },
        "job_query": {
          "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type": "string"
        },
        "job_reset_attempt": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "completion_time": {
          "x-samplevalue": 1542829827804,
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "x-samplevalue": "COMPLETED",
          "type": "string"
        },
        "notification_url": {
          "type": "string"
        },
        "job_direction": {
          "x-samplevalue": "DOWNLOAD",
          "type": "string"
        },
        "error_count": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "job_state": {
          "type": "string"
        },
        "createdDate": {
          "x-samplevalue": 1542829826619,
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "x-samplevalue": 1722,
          "format": "int32",
          "type": "integer"
        },
        "instanceId": {
          "x-samplevalue": 123453,
          "format": "int32",
          "type": "integer"
        },
        "object_name": {
          "x-samplevalue": "systemuser",
          "type": "string"
        },
        "fileFormat": {
          "x-samplevalue": "csv",
          "type": "string"
        }
      },
      "type": "object"
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "bulkDownloadRequestDocsHubDetails": {
      "properties": {
        "instanceId": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "path": {
          "type": "string",
          "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
        }
      },
      "title": "docsHubDetails",
      "type": "object"
    },
    "productGroup": {
      "properties": {
        "can_levels_go_negative": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "code": {
          "type": "string",
          "x-samplevalue": "NONS"
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.737"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Non Stock Item"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 34632
        },
        "product_type": {
          "type": "string",
          "x-samplevalue": "EnumStockItemTypeMisc"
        }
      },
      "title": "productGroup",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "product_groups"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "invoice": {
      "properties": {
        "base_allocated_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "base_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "base_goods_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 14.25
        },
        "base_gross_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "base_tax_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "base_tax_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.43
        },
        "control_value_in_base_currency": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "customer_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 27825
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.83"
        },
        "discount_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "discount_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_allocated_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "document_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_goods_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 14.25
        },
        "document_gross_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "document_outstanding_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_tax_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_tax_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.43
        },
        "due_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-02-01T00:00:00"
        },
        "exchange_rate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 29685
        },
        "posted_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-09-13T00:00:00"
        },
        "queried": {
          "type": "string"
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "second_reference": {
          "type": "string",
          "x-samplevalue": "AT Mini Tower Case"
        },
        "settled_immediately": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "trader_transaction_type": {
          "type": "string",
          "x-samplevalue": "TradingAccountEntryTypeInvoice"
        },
        "transaction_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-01-02T00:00:00"
        },
        "urn": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 99
        },
        "user_name": {
          "type": "string",
          "x-samplevalue": "Migration"
        }
      },
      "title": "invoice",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "transaction": {
      "properties": {
        "base_allocated_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "base_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "base_goods_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 14.25
        },
        "base_gross_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "base_outstanding_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "base_tax_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "base_tax_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.43
        },
        "currency_name": {
          "type": "string",
          "x-samplevalue": "Pound Sterling"
        },
        "currency_symbol": {
          "type": "string",
          "x-samplevalue": "£"
        },
        "customer_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 27825
        },
        "customer_name": {
          "type": "string",
          "x-samplevalue": "A1 Design Services"
        },
        "customer_reference": {
          "type": "string",
          "x-samplevalue": "A1D001"
        },
        "discount_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_allocated_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "document_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_goods_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 14.25
        },
        "document_gross_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 16.68
        },
        "document_outstanding_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_tax_discount_value": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "document_tax_value": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.43
        },
        "due_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-02-01T00:00:00"
        },
        "exchange_rate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "ledger_type": {
          "type": "string",
          "x-samplevalue": "LedgerSales"
        },
        "posted_customer_transaction_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 29685
        },
        "posted_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-09-13T00:00:00"
        },
        "query": {
          "type": "string"
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "second_reference": {
          "type": "string",
          "x-samplevalue": "AT Mini Tower Case"
        },
        "settled_immediately": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "status": {
          "type": "string",
          "x-samplevalue": "Full"
        },
        "transaction_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2015-01-02T00:00:00"
        },
        "transaction_date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-10-22T16:40:10.83"
        },
        "transaction_type": {
          "type": "string",
          "x-samplevalue": "TradingAccountEntryTypeInvoice"
        },
        "urn": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 99
        },
        "user_name": {
          "type": "string",
          "x-samplevalue": "Migration"
        }
      },
      "title": "transaction",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "posted_customer_transaction_id"
      ],
      "x-vendor-objectname": "sales_transaction_views"
    },
    "customer": {
      "properties": {
        "account_status_type": {
          "type": "string",
          "x-samplevalue": "AccountStatusActive"
        },
        "analysis_code_1": {
          "type": "string"
        },
        "analysis_code_2": {
          "type": "string"
        },
        "analysis_code_3": {
          "type": "string"
        },
        "analysis_code_4": {
          "type": "string"
        },
        "analysis_code_5": {
          "type": "string"
        },
        "balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "country_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 13
        },
        "credit_limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "currency_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2103
        },
        "date_time_updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2019-01-15T19:40:32.187"
        },
        "default_tax_code_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1729
        },
        "duns_code": {
          "type": "string"
        },
        "exchange_rate_type": {
          "type": "string",
          "x-samplevalue": "ExchangeRateSingle"
        },
        "fax_area_code": {
          "type": "string"
        },
        "fax_country_code": {
          "type": "string"
        },
        "fax_subscriber_number": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 157994
        },
        "name": {
          "type": "string",
          "x-samplevalue": "CE Customer"
        },
        "on_hold": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "reference": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "short_name": {
          "type": "string",
          "x-samplevalue": "CE Custo"
        },
        "telephone_area_code": {
          "type": "string"
        },
        "telephone_country_code": {
          "type": "string"
        },
        "telephone_subscriber_number": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "customer",
      "type": "object",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "customers"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "Sage 200 Accounting",
    "x-element-hub": "finance",
    "x-element-key": "sage200",
    "title": "sage200",
    "x-element-id": 987,
    "version": "api-v2",
    "description": "Add a Sage 200 Instance to connect your existing Sage account to the Finance Hub, allowing you to manage customers, invoices, purchase orders, etc. across multiple Finance Elements. You will need your Sage account information to add an instance."
  },
  "tags": [
    {
      "name": "Banks"
    },
    {
      "name": "Bulk"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Object Name"
    },
    {
      "name": "Objects"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Payments Receipts"
    },
    {
      "name": "Ping"
    },
    {
      "name": "Product Groups"
    },
    {
      "name": "Product Prices"
    },
    {
      "name": "Products"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "Warehouse Holdings"
    },
    {
      "name": "Warehouses"
    }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Finance and management software to manage accounts and customers",
  "externalDocs": {
    "description": "SAP Open Connectors Documentation",
    "url": "https://help.openconnectors.ext.hana.ondemand.com/home/sage200"
  }
}