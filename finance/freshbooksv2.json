{
  "basePath": "/elements/api-v2",
  "paths": {
    "/bulk/download": {
      "post": {
        "summary": "Create a new bulk download job (asynchronous)",
        "operationId": "createBulkDownload",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/bulkDownloadRequest"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/jobs": {
      "get": {
        "operationId": "getBulkJobs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkJobList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Fetch all the bulk jobs for an instance",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Cancel an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the errors of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "Bulk"
        ],
        "produces": [
          "text/csv",
          "application/json",
          "application/jsonl"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" :&lt;path for the sub resource&gt;, \"format\": &lt;json/csv&gt;, \"callback-payload\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/customers": {
      "post": {
        "summary": "Create a new customer",
        "operationId": "createCustomer",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createCustomer"
            },
            "in": "body",
            "name": "body",
            "description": "The customer object",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Search for customers",
        "operationId": "getCustomers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customersListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>address_like, email, has_credit, has_draft, has_outstanding, has_overdue, fname_like, lname_like, note_like, organization_like, phone_like, updated_min, updated_max, user_like, userid, userids,username, vis_state, email_like</i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{id}": {
      "patch": {
        "summary": "Update a customer",
        "operationId": "updateCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateCustomer"
            },
            "in": "body",
            "name": "body",
            "description": "The customer object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Retrieve a customer",
        "operationId": "getCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The customer id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/employees": {
      "post": {
        "summary": "Create an employees",
        "operationId": "createEmployee",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "get": {
        "summary": "Search for employees",
        "operationId": "getEmployees",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. The supported queryable fields are userid, userids, user_levels, user_like, note_like, phone_like, and email_like.  For example to search employees with lastname  <i> user_like='cb' </i>. See Freshbooks CA docs for more information <a href='https://www.freshbooks.com/api/staff'>here</a>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/employees/{id}": {
      "patch": {
        "summary": "Update an employee",
        "operationId": "updateEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The employee ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "get": {
        "summary": "Retrieve an employee",
        "operationId": "getEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesGetRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The employee ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "delete": {
        "summary": "Delete an employee",
        "operationId": "deleteEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The employee ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/expenses": {
      "post": {
        "summary": "Create an expense",
        "operationId": "createExpense",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/CreateExpenseResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/CreateExpense"
            },
            "in": "body",
            "name": "body",
            "description": "The expense body",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ]
      },
      "get": {
        "summary": "Search for expenses",
        "operationId": "getExpenses",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/expensesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for expenses with categoryid equals to '3729837', the search expression will be where=categoryid='3729837'. And the searchable query parameters are <i>expenseid, expenseids, clientid, staffid, profileid, categoryid, projectid, amount_min, amount_max, date_min, date_max, updated_min, updated_max, vendor etc</i>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Expenses"
        ]
      }
    },
    "/expenses/{id}": {
      "patch": {
        "summary": "Update an expense",
        "operationId": "updateExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/UpdateExpenseResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expense id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/UpdateExpense"
            },
            "in": "body",
            "name": "body",
            "description": "The expense body",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ]
      },
      "get": {
        "summary": "Retrieve an expense",
        "operationId": "getExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/expenses"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expense id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ]
      },
      "delete": {
        "summary": "Delete an expense",
        "operationId": "deleteExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expense id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ]
      }
    },
    "/invoices": {
      "post": {
        "summary": "Create a new Invoice",
        "operationId": "createInvoice",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createInvoice"
            },
            "in": "body",
            "name": "body",
            "description": "The invoice object",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoicesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>invoiceid, invoiceids, invoice_number_like, invoice_number, notes, statusid, statusids, v3_status, currency_code, currency, date_min, date_max, total_min, total_max, po_number, customerid, customerids, parentid, paid, outstanding, updated_min, updated_max, item_name, item_description, projectid, outstanding_min</i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}": {
      "patch": {
        "summary": "Update an invoice",
        "operationId": "updateInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The invoice id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateInvoice"
            },
            "in": "body",
            "name": "body",
            "description": "The invoice object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Retrieve an invoice",
        "operationId": "getInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The invoice id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "delete": {
        "summary": "Delete an invoice",
        "operationId": "deleteInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The invoice id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/items": {
      "post": {
        "summary": "Create a new item",
        "operationId": "createItem",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/items"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createItem"
            },
            "in": "body",
            "name": "body",
            "description": "The item objec",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Search for items",
        "operationId": "getItems",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itemsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>itemid, itemids, description, unit_cost_min, unit_cost_max, inventory_min, inventory_max, updated_min, updated_max, qty_min, qty_max</i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/items/{id}": {
      "patch": {
        "summary": "Update an item",
        "operationId": "updateItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/items"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The item id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateItem"
            },
            "in": "body",
            "name": "body",
            "description": "The item object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Retrieve an item",
        "operationId": "getItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/items"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The item id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "delete": {
        "summary": "Delete an item",
        "operationId": "deleteItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The item id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/journal-entries": {
      "post": {
        "operationId": "createJournalEntry",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalEntries"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/journalEntriesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Journal Entries"
        ],
        "summary": "Create a new journal entry"
      },
      "get": {
        "operationId": "getJournalEntries",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalEntries"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Journal Entries"
        ],
        "summary": "Search for journal entries"
      }
    },
    "/legder-accounts": {
      "get": {
        "operationId": "getLegderAccounts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/legderAccounts"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Legder Accounts"
        ],
        "summary": "Search for legder accounts"
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/payments": {
      "post": {
        "summary": "Create a new payment",
        "operationId": "createPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/payments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createPayment"
            },
            "in": "body",
            "name": "body",
            "description": "The payment object",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Search for payments",
        "operationId": "getPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/paymentsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>logid, logids, date_min, date_max, updated_min, updated_max, amount_min, amount_max, type, customerid, customerids, clientid, clientids, currency, invoiceid, notes, from_credit, client_name, number, payment_or_credit</i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}": {
      "patch": {
        "summary": "Update a payment",
        "operationId": "updatePaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/payments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The payment id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updatePayment"
            },
            "in": "body",
            "name": "body",
            "description": "The payment object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Retrieve a payment",
        "operationId": "getPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/payments"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The payment id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "summary": "Delete a payment",
        "operationId": "deletePaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The payment id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "Ping"
        ]
      }
    },
    "/projects": {
      "post": {
        "summary": "Create a projects",
        "operationId": "createProject",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/projectsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/projectsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The project JSON object",
            "required": true
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "summary": "Search for projects",
        "operationId": "getProjects",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/projectsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. The supported queryable fields are active, complete, include_logged_duration, updated_since, skip_group.  For example to search for inactive projects use <i> active='false' </i>. See Freshbooks CA docs for more information <a href='https://www.freshbooks.com/api/project'>here</a>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{id}": {
      "patch": {
        "summary": "Update a project",
        "operationId": "updateProjectById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/projectsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The project ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/projectsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The project JSON object",
            "required": true
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "get": {
        "summary": "Retrieve a project",
        "operationId": "getProjectById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/projectsRetrieve"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The project ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "summary": "Delete a project",
        "operationId": "deleteProjectById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The project ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/reports/{reportType}": {
      "get": {
        "summary": "Retrieve a report.",
        "operationId": "getReportByReportType",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/retrieveReports"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "reportType",
            "description": "The Report Type to be fetched.  <b> The valid report types is one of <i> invoice_details, expense_details, profitloss_entity, taxsummary, payments_collected, accounts_aging </i> </b>",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.  The queryable fields are <i> start_date, end_date, currency_code, cash_based, clientids, payment_method, statusids, date_type, group_by, exclude_personal, resolution. </i> For more information refer to Freshbooks CA docs <a href='https://www.freshbooks.com/api/reports'> here </a>",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/sales-quotes": {
      "post": {
        "operationId": "createSalesQuote",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The salesQuote request body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Create a sales quote"
      },
      "get": {
        "operationId": "getSalesQuotes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesGetAllRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for salesQuotes whose estimateid is 120687, the search expression will be where=estimateid=120687. When this parameter is omitted, all salesQuotes are returned as defined by the paging. See Freshbooks CA docs for more information <a href='https://www.freshbooks.com/api/estimates'>here</a>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Search for sales quotes"
      }
    },
    "/sales-quotes/{id}": {
      "patch": {
        "operationId": "updateSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuote Id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The salesQuote request body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Update a sales quote"
      },
      "get": {
        "operationId": "getSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuote Id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Retrieve a sales quote"
      },
      "delete": {
        "operationId": "deleteSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuote Id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Delete a sales quote"
      }
    },
    "/tasks": {
      "post": {
        "summary": "Create a new task",
        "operationId": "createTask",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/tasks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createTask"
            },
            "in": "body",
            "name": "body",
            "description": "The task object",
            "required": true
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "summary": "Search for tasks",
        "operationId": "getTasks",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/tasksList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>taskid, taskids, billable, rate_min, rate_max, updated_min, updated_max, projectids</i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/tasks/{id}": {
      "patch": {
        "summary": "Update a task",
        "operationId": "updateTaskById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/tasks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The task id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateTask"
            },
            "in": "body",
            "name": "body",
            "description": "The task object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "get": {
        "summary": "Retrieve a task",
        "operationId": "getTaskById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/tasks"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The task id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "delete": {
        "summary": "Delete a task",
        "operationId": "deleteTaskById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The task id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/taxes": {
      "post": {
        "summary": "Create a new tax",
        "operationId": "createTaxe",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createTax"
            },
            "in": "body",
            "name": "body",
            "description": "The tax object",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "get": {
        "summary": "Search for taxes",
        "operationId": "getTaxes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>taxid, taxids, name, number, compound, updated_min, updated_max</i>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/taxes/{id}": {
      "patch": {
        "summary": "Update a tax",
        "operationId": "updateTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The tax id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateTax"
            },
            "in": "body",
            "name": "body",
            "description": "The tax object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "get": {
        "summary": "Retrieve a tax",
        "operationId": "getTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The tax id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "delete": {
        "summary": "Delete a tax",
        "operationId": "deleteTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The tax id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/time-activities": {
      "post": {
        "operationId": "createTimeActivity",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivitiesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeActivitiesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time activitie object",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ],
        "summary": "Create a time activity. only for hourly rate projects, time-activities can be created"
      },
      "get": {
        "operationId": "getTimeActivities",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/timeActivitiesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. The supported queryable fields are billable, billed, client_id, include_deleted, team, include_unlogged, started_from, started_to and updated_since.  For example to search for non billable time-activities use <i> billable='false' </i>. See Freshbooks CA docs for more information <a href='https://www.freshbooks.com/api/time_entries'>here</a>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Time Activities"
        ],
        "summary": "Search for time activities"
      }
    },
    "/time-activities/{id}": {
      "patch": {
        "operationId": "updateTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivitiesPatchtRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The time activities ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeActivitiesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time-activities object",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ],
        "summary": "Update a time activity"
      },
      "get": {
        "operationId": "getTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivitiesRetrieve"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The time activities ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ],
        "summary": "Retrieve a time activity"
      },
      "delete": {
        "operationId": "deleteTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The time activities ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ],
        "summary": "Delete a time activity"
      }
    },
    "/vendors": {
      "post": {
        "summary": "Create a new Vendor.",
        "operationId": "createVendor",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/createVendor"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor object",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Search for vendors",
        "operationId": "getVendors",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vendorsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Feb 05, 2018’, the search expression will be where=updated_min='2018-02-05'’. When this parameter is omitted, all invoices are returned as defined by the paging.  And the searchable query parameters are <i>address_like, email, has_credit, has_draft, has_outstanding, has_overdue, fname_like, lname_like, note_like, organization_like, phone_like, updated_min, updated_max, user_like, userid, userids,username, vis_state, email_like</i>",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/vendors/{id}": {
      "patch": {
        "summary": "Update a Vendor",
        "operationId": "updateVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The vendor id",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/updateVendor"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor object, with those fields that are to be updated.",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Retrieve a vendor",
        "operationId": "getVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The vendor id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "delete": {
        "summary": "Delete a Vendor",
        "operationId": "deleteVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The vendor id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      }
    }
  },
  "host": "hostname",
  "schemes": [
    "https"
  ],
  "definitions": {
    "invoicesListLines": {
      "properties": {
        "line": {
          "$ref": "#/definitions/invoicesListLinesLine"
        }
      },
      "type": "object"
    },
    "invoice_detailssummary": {
      "properties": {
        "company_name": {
          "type": "string",
          "x-samplevalue": "My Company"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "bunch of letters and numbers"
        },
        "outstanding": {
          "$ref": "#/definitions/invoice_detailsoutstanding"
        },
        "paid": {
          "$ref": "#/definitions/paid"
        },
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      },
      "title": "summary",
      "type": "object",
      "x-has-customfields": false
    },
    "accounts0-30": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "0-30",
      "type": "object",
      "x-has-customfields": false
    },
    "accounts61-90": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "61-90",
      "type": "object",
      "x-has-customfields": false
    },
    "salesQuotesGetAllRes": {
      "properties": {
        "accepted": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "amount": {
          "$ref": "#/definitions/salesQuotesGetAllResAmount"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 06:59:51"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "cb",
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "discount_total": {
          "$ref": "#/definitions/salesQuotesGetAllResDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "draft",
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "invoiced": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en",
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "require_client_signature": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "rich_proposal": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped",
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "ui_status": {
          "type": "string",
          "x-samplevalue": "draft",
          "x-searchable": true,
          "x-searchable-operators": [
            "LIKE",
            "="
          ]
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 07:47:33"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "itemsListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "monkey descriptor"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "",
          "x-samplevalue": 201225
        },
        "inventory": {
          "type": "string",
          "x-alias": "quantityOnHand",
          "x-samplevalue": "decimal-string count of inventorynull"
        },
        "itemid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 201225
        },
        "name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Monkeys"
        },
        "qty": {
          "type": "string",
          "x-alias": "quantityOnOrder",
          "x-samplevalue": "21"
        },
        "tax1": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-samplevalue": 58730
        },
        "tax2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 58729
        },
        "unit_cost": {
          "$ref": "#/definitions/itemsListUnit_cost"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-07-20 15:36:09"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "items",
      "type": "object"
    },
    "pending_invitationsobject": {
      "properties": {},
      "title": "clientids",
      "x-has-customfields": false,
      "type": "object"
    },
    "salesQuotesPatchResAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "7200.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "expensesListAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "invoice_detailsoutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "outstanding",
      "type": "object",
      "x-has-customfields": false
    },
    "paymentsAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "10.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "invoicesLinesLineAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.totalAmount"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "createInvoice": {
      "properties": {
        "accountid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "KAG77"
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "address": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for address"
        },
        "amount": {
          "$ref": "#/definitions/createInvoiceAmount"
        },
        "auto_bill": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "autobill_status": {
          "type": "string",
          "x-samplevalue": "The value for autobill_status"
        },
        "basecampid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for city"
        },
        "code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "The value for code"
        },
        "country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "United States"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 14:37:59"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "Test Client"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 2185379
        },
        "date_paid": {
          "format": "date",
          "type": "string",
          "x-alias": "fullPaymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "deposit_amount": {
          "type": "string",
          "x-samplevalue": "The value for deposit_amount"
        },
        "deposit_percentage": {
          "type": "string",
          "x-samplevalue": "The value for deposit_percentage"
        },
        "deposit_status": {
          "type": "string",
          "x-samplevalue": "none"
        },
        "description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for description"
        },
        "discount_description": {
          "type": "string",
          "x-samplevalue": "The value for discount_description"
        },
        "discount_total": {
          "$ref": "#/definitions/createInvoiceDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "dispute_status": {
          "type": "string",
          "x-samplevalue": "The value for dispute_status"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-10-09"
        },
        "due_offset_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 30
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-alias": "customer.contact.firstName",
          "x-samplevalue": "Test"
        },
        "generation_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2201278
        },
        "invoice_number": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "0000003"
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2201278
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_order_status": {
          "type": "string",
          "x-samplevalue": "The value for last_order_status"
        },
        "lines": {
          "$ref": "#/definitions/createInvoiceLines"
        },
        "lname": {
          "type": "string",
          "x-alias": "customer.contact.lastName",
          "x-samplevalue": "Client"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "The value for notes"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Test Client"
        },
        "outstanding": {
          "$ref": "#/definitions/createInvoiceOutstanding"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "paid": {
          "$ref": "#/definitions/createInvoicePaid"
        },
        "parent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "payment_details": {
          "type": "string",
          "x-samplevalue": "Stirng"
        },
        "payment_status": {
          "type": "string",
          "x-samplevalue": "unpaid"
        },
        "po_number": {
          "type": "string",
          "x-alias": "parentDocumentNumber",
          "x-samplevalue": "The value for po_number"
        },
        "province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for province"
        },
        "return_uri": {
          "type": "string",
          "x-samplevalue": "The value for return_uri"
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "show_attachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 2
        },
        "street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for street"
        },
        "street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for street2"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-alias": "paymentTerms",
          "x-samplevalue": "The value for terms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 16:04:42"
        },
        "v3_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "customerid",
        "create_date"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "invoices",
      "type": "object"
    },
    "labels": {
      "properties": {
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        }
      },
      "title": "labels",
      "x-has-customfields": false,
      "type": "object"
    },
    "0": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "JaneDoe@Example.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Jane"
        },
        "id": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Doe"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Company and Co"
        },
        "userid": {
          "type": "string",
          "x-samplevalue": "null"
        }
      },
      "title": "0",
      "type": "object",
      "x-has-customfields": false
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "1": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "tonyparker@spurs.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Tony"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Parker"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Spurs"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "1",
      "type": "object",
      "x-has-customfields": false
    },
    "invoicesPaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountPaid",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "subtotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "subtotal",
      "type": "object",
      "x-has-customfields": false
    },
    "updateCustomer": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "allow_late_fees": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "allow_late_notifications": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "The value for bus_phone"
        },
        "company_industry": {
          "type": "string",
          "x-samplevalue": "The value for company_industry"
        },
        "company_size": {
          "type": "string",
          "x-samplevalue": "The value for company_size"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "direct_link_token": {
          "type": "string",
          "x-samplevalue": "The value for direct_link_token"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "john.doe@abcorp.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "The value for fax"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "The value for fname"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-samplevalue": "The value for home_phone"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 1831231
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_activity": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "The value for lname"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "The value for mob_phone"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for note"
        },
        "notified": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "The value for organization"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for p_city"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "2011"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "The value for p_country"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for p_province"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for p_street"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for p_street2"
        },
        "pref_email": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "pref_gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "role": {
          "type": "string",
          "x-alias": "contact.title",
          "x-samplevalue": "client"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "The value for s_city"
        },
        "s_code": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "The value for s_code"
        },
        "s_country": {
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-samplevalue": "The value for s_country"
        },
        "s_province": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "The value for s_province"
        },
        "s_street": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "The value for s_street"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "The value for s_street2"
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "statement_token": {
          "type": "string",
          "x-samplevalue": "The value for statement_token"
        },
        "subdomain": {
          "type": "string",
          "x-samplevalue": "The value for subdomain"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-12 14:54:15"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1831231
        },
        "username": {
          "type": "string",
          "x-samplevalue": "aclient"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "clients",
      "type": "object"
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "salesQuotesPatchReqLines": {
      "properties": {
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "expenseid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1918390
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Paperwork"
        },
        "qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "taxAmount1": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "taxAmount2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unit_cost": {
          "$ref": "#/definitions/salesQuotesPatchReqLinesUnit_cost"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "salesQuotesGetByIdRes": {
      "properties": {
        "accepted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "amount": {
          "$ref": "#/definitions/salesQuotesGetByIdResAmount"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 06:59:51"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "discount_total": {
          "$ref": "#/definitions/salesQuotesGetByIdResDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "invoiced": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089"
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "require_client_signature": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "rich_proposal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "ui_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 07:47:33"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "invoicesListAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "updateInvoiceDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "items": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "monkey descriptor"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "",
          "x-samplevalue": 201225
        },
        "inventory": {
          "type": "string",
          "x-alias": "quantityOnHand",
          "x-samplevalue": "decimal-string count of inventorynull"
        },
        "itemid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 201225
        },
        "name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Monkeys"
        },
        "qty": {
          "type": "string",
          "x-alias": "quantityOnOrder",
          "x-samplevalue": "21"
        },
        "tax1": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-samplevalue": 58730
        },
        "tax2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 58729
        },
        "unit_cost": {
          "$ref": "#/definitions/itemsUnit_cost"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-07-20 15:36:09"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "items",
      "type": "object"
    },
    "expensestotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "854.76"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "salesQuotesPostReqLinesUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "5000.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "createInvoiceOutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountDue",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "discount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "discount_total",
      "type": "object",
      "x-has-customfields": false
    },
    "journalEntriesDetails": {
      "properties": {
        "credit": {
          "type": "string"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "debit": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Here is a basic description of the journal entry made."
        },
        "detailid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2004224
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2004224
        },
        "name": {
          "type": "string",
          "x-samplevalue": "JournalEntry"
        },
        "sub_accountid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 635974
        },
        "user_entered_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-04-20"
        }
      },
      "title": "details",
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "updateItemUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "price",
          "x-samplevalue": "1234.00"
        },
        "code": {
          "type": "string",
          "x-alias": "salesCurrency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "timeActivitiesRetrieve": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 356356
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "title": "timeActivitiesRetrieve",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "timeActivitiesObject": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 356356
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "title": "timeActivitiesObject",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "5372366": {
      "properties": {
        "category": {
          "type": "string",
          "x-samplevalue": "Gas"
        },
        "categoryid": {
          "type": "string",
          "x-samplevalue": "5372366"
        },
        "subcategory_name": {
          "type": "string",
          "x-samplevalue": "Gas"
        }
      },
      "title": "5372366",
      "type": "object",
      "x-has-customfields": false
    },
    "taxable_amount_collected": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "taxable_amount_collected",
      "type": "object",
      "x-has-customfields": false
    },
    "createInvoiceAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "customers": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "allow_late_fees": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "allow_late_notifications": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "The value for bus_phone"
        },
        "company_industry": {
          "type": "string",
          "x-samplevalue": "The value for company_industry"
        },
        "company_size": {
          "type": "string",
          "x-samplevalue": "The value for company_size"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "direct_link_token": {
          "type": "string",
          "x-samplevalue": "The value for direct_link_token"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "john.doe@abcorp.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "The value for fax"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "The value for fname"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-samplevalue": "The value for home_phone"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 1831231
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_activity": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "The value for lname"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "The value for mob_phone"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for note"
        },
        "notified": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "The value for organization"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for p_city"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "2011"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "The value for p_country"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for p_province"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for p_street"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for p_street2"
        },
        "pref_email": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "pref_gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "The value for s_city"
        },
        "s_code": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "The value for s_code"
        },
        "s_country": {
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-samplevalue": "The value for s_country"
        },
        "s_province": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "The value for s_province"
        },
        "s_street": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "The value for s_street"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "The value for s_street2"
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "statement_token": {
          "type": "string",
          "x-samplevalue": "The value for statement_token"
        },
        "subdomain": {
          "type": "string",
          "x-samplevalue": "The value for subdomain"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-12 14:54:15"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1831231
        },
        "username": {
          "type": "string",
          "x-samplevalue": "aclient"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "clients",
      "type": "object"
    },
    "invoicespaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "paid",
      "type": "object",
      "x-has-customfields": false
    },
    "updateInvoiceLinesLineUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.product.price"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "total_expense": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/total_expensechildren"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/total_expensedata"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Total Expenses"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "debit"
        },
        "total": {
          "$ref": "#/definitions/total_expensetotal"
        }
      },
      "title": "total_expense",
      "type": "object",
      "x-has-customfields": false
    },
    "customersListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "allow_late_fees": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "allow_late_notifications": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "The value for bus_phone"
        },
        "company_industry": {
          "type": "string",
          "x-samplevalue": "The value for company_industry"
        },
        "company_size": {
          "type": "string",
          "x-samplevalue": "The value for company_size"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "direct_link_token": {
          "type": "string",
          "x-samplevalue": "The value for direct_link_token"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "john.doe@abcorp.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "The value for fax"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "The value for fname"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-samplevalue": "The value for home_phone"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 1831231
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_activity": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "The value for lname"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "The value for mob_phone"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for note"
        },
        "notified": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "The value for organization"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for p_city"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "2011"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "The value for p_country"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for p_province"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for p_street"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for p_street2"
        },
        "pref_email": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "pref_gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "role": {
          "type": "string",
          "x-alias": "contact.title",
          "x-samplevalue": "client"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "The value for s_city"
        },
        "s_code": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "The value for s_code"
        },
        "s_country": {
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-samplevalue": "The value for s_country"
        },
        "s_province": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "The value for s_province"
        },
        "s_street": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "The value for s_street"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "The value for s_street2"
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "statement_token": {
          "type": "string",
          "x-samplevalue": "The value for statement_token"
        },
        "subdomain": {
          "type": "string",
          "x-samplevalue": "The value for subdomain"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-12 14:54:15"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1831231
        },
        "username": {
          "type": "string",
          "x-samplevalue": "aclient"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "clients",
      "type": "object"
    },
    "invoice_details": {
      "properties": {
        "clientids": {
          "items": {
            "$ref": "#/definitions/clientids"
          },
          "type": "array"
        },
        "clients": {
          "items": {
            "$ref": "#/definitions/clients"
          },
          "type": "array"
        },
        "date_type": {
          "type": "string",
          "x-samplevalue": "issue"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "statusids": {
          "items": {
            "$ref": "#/definitions/statusids"
          },
          "type": "array"
        },
        "summary": {
          "$ref": "#/definitions/invoice_detailssummary"
        }
      },
      "title": "invoice_details",
      "x-has-customfields": false,
      "type": "object"
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "invoicesListObject": {
      "properties": {
        "accountid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "KAG77"
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "address": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for address"
        },
        "amount": {
          "$ref": "#/definitions/invoicesListAmount"
        },
        "auto_bill": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "autobill_status": {
          "type": "string",
          "x-samplevalue": "The value for autobill_status"
        },
        "basecampid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for city"
        },
        "code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "The value for code"
        },
        "country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "United States"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 14:37:59"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "Test Client"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 2185379
        },
        "date_paid": {
          "format": "date",
          "type": "string",
          "x-alias": "fullPaymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "deposit_amount": {
          "type": "string",
          "x-samplevalue": "The value for deposit_amount"
        },
        "deposit_percentage": {
          "type": "string",
          "x-samplevalue": "The value for deposit_percentage"
        },
        "deposit_status": {
          "type": "string",
          "x-samplevalue": "none"
        },
        "description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for description"
        },
        "discount_description": {
          "type": "string",
          "x-samplevalue": "The value for discount_description"
        },
        "discount_total": {
          "$ref": "#/definitions/invoicesListDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "dispute_status": {
          "type": "string",
          "x-samplevalue": "The value for dispute_status"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-10-09"
        },
        "due_offset_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 30
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-alias": "customer.contact.firstName",
          "x-samplevalue": "Test"
        },
        "generation_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2201278
        },
        "invoice_number": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "0000003"
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2201278
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_order_status": {
          "type": "string",
          "x-samplevalue": "The value for last_order_status"
        },
        "lines": {
          "$ref": "#/definitions/invoicesListLines"
        },
        "lname": {
          "type": "string",
          "x-alias": "customer.contact.lastName",
          "x-samplevalue": "Client"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "The value for notes"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Test Client"
        },
        "outstanding": {
          "$ref": "#/definitions/invoicesListOutstanding"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "paid": {
          "$ref": "#/definitions/invoicesListPaid"
        },
        "parent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "payment_details": {
          "type": "string",
          "x-samplevalue": "Stirng"
        },
        "payment_status": {
          "type": "string",
          "x-samplevalue": "unpaid"
        },
        "po_number": {
          "type": "string",
          "x-alias": "parentDocumentNumber",
          "x-samplevalue": "The value for po_number"
        },
        "province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for province"
        },
        "return_uri": {
          "type": "string",
          "x-samplevalue": "The value for return_uri"
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "show_attachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 2
        },
        "street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for street"
        },
        "street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for street2"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-alias": "paymentTerms",
          "x-samplevalue": "The value for terms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 16:04:42"
        },
        "v3_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "invoices",
      "type": "object"
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "timeActivitiesPatchtRes": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 356356
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "title": "timeActivitiesPatchRes",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "61-90": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "61-90",
      "type": "object",
      "x-has-customfields": false
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "createPayment": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "$ref": "#/definitions/createPaymentAmount"
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 1758507
        },
        "creditid": {
          "type": "string",
          "x-samplevalue": "545454"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2013-12-10"
        },
        "from_credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "gateway": {
          "type": "string",
          "x-samplevalue": "The payment processor used if any"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 10865326
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "invoice.id",
          "x-samplevalue": 2010190
        },
        "logid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10865326
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "This is note"
        },
        "orderid": {
          "type": "string",
          "x-samplevalue": "454455"
        },
        "overpaymentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 545
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 54545
        },
        "type": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-28 21:00:46"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "required": [
        "date",
        "amount",
        "invoiceid",
        "type"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "payments",
      "type": "object"
    },
    "BulkJobList": {
      "title": "BulkJobList",
      "properties": {
        "record_count": {
          "x-samplevalue": 41,
          "format": "int32",
          "type": "integer"
        },
        "job_query": {
          "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type": "string"
        },
        "job_reset_attempt": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "completion_time": {
          "x-samplevalue": 1542829827804,
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "x-samplevalue": "COMPLETED",
          "type": "string"
        },
        "notification_url": {
          "type": "string"
        },
        "job_direction": {
          "x-samplevalue": "DOWNLOAD",
          "type": "string"
        },
        "error_count": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "job_state": {
          "type": "string"
        },
        "createdDate": {
          "x-samplevalue": 1542829826619,
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "x-samplevalue": 1722,
          "format": "int32",
          "type": "integer"
        },
        "instanceId": {
          "x-samplevalue": 123453,
          "format": "int32",
          "type": "integer"
        },
        "object_name": {
          "x-samplevalue": "systemuser",
          "type": "string"
        },
        "fileFormat": {
          "x-samplevalue": "csv",
          "type": "string"
        }
      },
      "type": "object"
    },
    "services": {
      "properties": {
        "business_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 373845
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 300088
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Software as Service"
        }
      },
      "title": "services",
      "x-has-customfields": false,
      "type": "object"
    },
    "31-60": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "31-60",
      "type": "object",
      "x-has-customfields": false
    },
    "unit_cost": {
      "properties": {
        "amount": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesListOutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountDue",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "invoicesLinesLineUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.product.price"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesPostRes": {
      "properties": {
        "accepted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "amount": {
          "$ref": "#/definitions/salesQuotesPostResAmount"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 06:59:51"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "discount_total": {
          "$ref": "#/definitions/salesQuotesPostResDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "invoiced": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089"
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "require_client_signature": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "rich_proposal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "ui_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 07:47:33"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "projectsPatchRes": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "title": "projectsPatchRes",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "5372370": {
      "properties": {
        "category": {
          "type": "string",
          "x-samplevalue": "Personal"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5372370
        },
        "subcategory_name": {
          "type": "string",
          "x-samplevalue": "personal (general)"
        }
      },
      "title": "5372370",
      "type": "object",
      "x-has-customfields": false
    },
    "salesQuotesPostReq": {
      "properties": {
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "email": {
          "type": "string",
          "x-samplevalue": "test@example.com"
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "lines": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostReqLines"
          },
          "type": "array"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089"
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "salesQuotesGetAllResAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "7200.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "projectsPatchReq": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "title": "projectsPatchReq",
      "x-has-customfields": false,
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "createPaymentAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "10.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "BulkUploadResponse": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance Id of the bulk job",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "childrendata": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "salesQuotesGetByIdResDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "journalEntriesPostReq": {
      "properties": {
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Here is a basic description of the journal entry made."
        },
        "details": {
          "items": {
            "$ref": "#/definitions/journalEntriesPostReqDetails"
          },
          "type": "array"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "JournalEntry"
        },
        "user_entered_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-04-20"
        }
      },
      "required": [
        "details",
        "name"
      ],
      "title": "journalEntriesPostReq",
      "type": "object"
    },
    "CreateExpenseResponse": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "ACC"
        },
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "MgzNp"
        },
        "amount": {
          "$ref": "#/definitions/CreateExpenseResponseAmount"
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "BANK1"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3729837
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compounded_tax": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2011-11-24"
        },
        "expenseid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 15048051
        },
        "ext_invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "vendorInvoiceNumber",
          "x-samplevalue": 0
        },
        "ext_systemid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "from_bulk_import": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "has_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 15048051
        },
        "include_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_cogs": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "isduplicate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "markup_percent": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "test notes"
        },
        "projectid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staffid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 23323
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-08-20 05:00:45"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "Expenses",
      "type": "object"
    },
    "employeesListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2194844
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "salesQuotesPostReqLines": {
      "properties": {
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "expenseid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1918390
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Paperwork"
        },
        "qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "taxAmount1": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "taxAmount2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "unit_cost": {
          "$ref": "#/definitions/salesQuotesPostReqLinesUnit_cost"
        }
      },
      "type": "object"
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "journalEntriesPostReqDetails": {
      "properties": {
        "credit": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "debit": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "sub_accountid": {
          "type": "string",
          "x-samplevalue": "226045"
        }
      },
      "title": "details",
      "type": "object"
    },
    "invoicesAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "91plus": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "91+",
      "type": "object",
      "x-has-customfields": false
    },
    "tasksList": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "description": {
          "type": "string",
          "x-samplevalue": "This is taks description"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "rate": {
          "$ref": "#/definitions/rate"
        },
        "taskid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "tdesc": {
          "type": "string",
          "x-samplevalue": ""
        },
        "tname": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2017-07-24 09:39:21"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "tasksList",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "tasks",
      "type": "object"
    },
    "vendors": {
      "properties": {
        "92d61cbb2aa3a9e323151955eb4484b2": {
          "type": "string",
          "x-samplevalue": "Vendor 1"
        }
      },
      "title": "vendors",
      "type": "object",
      "x-has-customfields": false
    },
    "journalEntriesBalance": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "30.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "balance",
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "createTax": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "type": "string",
          "x-samplevalue": "12"
        },
        "compound": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "number": {
          "type": "string",
          "x-samplevalue": "an external number that identifies your tax submission"
        },
        "taxid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2016-07-20 15:28:44"
        }
      },
      "required": [
        "name"
      ],
      "title": "createTax",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "taxes",
      "type": "object"
    },
    "updatePaymentAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "10.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "updateInvoiceLinesLineAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.totalAmount"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "childrenchildren": {
      "properties": {},
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "invoicesoutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "outstanding",
      "type": "object",
      "x-has-customfields": false
    },
    "payments_collected": {
      "properties": {
        "clientids": {
          "items": {
            "$ref": "#/definitions/clientids"
          },
          "type": "array"
        },
        "currency_codes": {
          "items": {
            "$ref": "#/definitions/currency_codes"
          },
          "type": "array"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "A lot of characters"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "payment_methods": {
          "items": {
            "$ref": "#/definitions/payment_methods"
          },
          "type": "array"
        },
        "payments": {
          "items": {
            "$ref": "#/definitions/payments"
          },
          "type": "array"
        },
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-26"
        },
        "totals": {
          "items": {
            "$ref": "#/definitions/totals"
          },
          "type": "array"
        }
      },
      "title": "payments_collected",
      "x-has-customfields": false,
      "type": "object"
    },
    "bulkDownloadRequestQuery": {
      "properties": {
        "anyKey": {
          "type": "string",
          "x-samplevalue": "anyValue"
        }
      },
      "title": "query",
      "type": "object"
    },
    "retrieveReports": {
      "properties": {
        "accounts_aging": {
          "$ref": "#/definitions/accounts_aging"
        },
        "expense_details": {
          "$ref": "#/definitions/expense_details"
        },
        "invoice_details": {
          "$ref": "#/definitions/invoice_details"
        },
        "payments_collected": {
          "$ref": "#/definitions/payments_collected"
        },
        "profitloss": {
          "$ref": "#/definitions/profitloss"
        },
        "taxsummary": {
          "$ref": "#/definitions/taxsummary"
        }
      },
      "title": "retrieveReports",
      "x-has-customfields": false,
      "type": "object"
    },
    "legderAccounts": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cash"
        },
        "account_number": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "1000"
        },
        "account_type": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "asset"
        },
        "accountid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 93495
        },
        "balance": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "0"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 93495
        },
        "sub_accounts": {
          "items": {
            "$ref": "#/definitions/legderAccountsSub_accounts"
          },
          "type": "array"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "createVendor": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "r1awo"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "1234565564"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "fdf@y.com"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "fdf@y.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "12345687"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "cb"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 124596
        },
        "invitation_status": {
          "type": "string",
          "x-samplevalue": "not_sent"
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": -3
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "xyz"
        },
        "mapped_taskid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 146518
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "1234567890"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "my org"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Hyderabad"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "507005"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "india"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "xxxxxxx"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "xxxx"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Banjara Hills"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "role": {
          "type": "string",
          "x-samplevalue": "contractor"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-02-05 17:55:55"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 124596
        },
        "username": {
          "type": "string",
          "x-samplevalue": "6vL4TB8uxc"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "mapped_taskid",
        "email"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "contractors",
      "type": "object"
    },
    "itemsListUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "price",
          "x-samplevalue": "1234.00"
        },
        "code": {
          "type": "string",
          "x-alias": "salesCurrency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "net_profit": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/net_profitchildren"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/net_profitdata"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Net Profit (CAD)"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "credit"
        },
        "total": {
          "$ref": "#/definitions/net_profittotal"
        }
      },
      "title": "net_profit",
      "type": "object",
      "x-has-customfields": false
    },
    "currency_codes0": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "JaneDoe@Example.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Jane"
        },
        "id": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Doe"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Company and Co"
        },
        "userid": {
          "type": "string",
          "x-samplevalue": "null"
        }
      },
      "title": "0",
      "type": "object",
      "x-has-customfields": false
    },
    "clientssummary": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "JaneDoe@Example.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Jane"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Doe"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Company and Co"
        },
        "outstanding": {
          "$ref": "#/definitions/summaryoutstanding"
        },
        "paid": {
          "$ref": "#/definitions/summarypaid"
        },
        "total": {
          "$ref": "#/definitions/summarytotal"
        }
      },
      "title": "summary",
      "type": "object",
      "x-has-customfields": false
    },
    "total_expensedata": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "expense_details": {
      "properties": {
        "authors": {
          "$ref": "#/definitions/authors"
        },
        "categories": {
          "$ref": "#/definitions/categories"
        },
        "clients": {
          "$ref": "#/definitions/clients"
        },
        "company_name": {
          "type": "string",
          "x-samplevalue": "My Company Name"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/data"
          },
          "type": "array"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "A bunch of letters and numbers"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "exclude_personal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "group_by": {
          "type": "string",
          "x-samplevalue": "category"
        },
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        },
        "vendors": {
          "$ref": "#/definitions/vendors"
        }
      },
      "title": "expense_details",
      "x-has-customfields": false,
      "type": "object"
    },
    "income": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/children"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/data"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "credit"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      },
      "title": "income",
      "x-has-customfields": false,
      "type": "object"
    },
    "accounts_aging": {
      "properties": {
        "accounts": {
          "items": {
            "$ref": "#/definitions/accounts"
          },
          "type": "array"
        },
        "company_name": {
          "type": "string",
          "x-samplevalue": "FB"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "Lots of Characters"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "totals": {
          "$ref": "#/definitions/totals"
        }
      },
      "title": "accounts_aging",
      "x-has-customfields": false,
      "type": "object"
    },
    "net_profitdata": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "invoicesListLinesLine": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/invoicesListLinesLineAmount"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "expenseid": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "qty": {
          "type": "string",
          "x-alias": "line.product.quantity"
        },
        "taxAmount1": {
          "type": "string",
          "x-alias": "line.taxAmount"
        },
        "taxAmount2": {
          "type": "string"
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unit_cost": {
          "$ref": "#/definitions/invoicesListLinesLineUnit_cost"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "taxable_amount_paid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "854.76"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "taxable_amount_paid",
      "type": "object",
      "x-has-customfields": false
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "journalEntriesEntry": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "entryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20672507
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20672507
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 744902
        },
        "paymentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 821885
        }
      },
      "title": "entry",
      "type": "object"
    },
    "invoicesListLinesLineUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.product.price"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "projectsPostRes": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "title": "projectsPostRes",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "rate": {
      "properties": {
        "amount": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "projectsPostReq": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "required": [
        "title"
      ],
      "title": "projectsPostReq",
      "x-has-customfields": false,
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "createInvoiceLinesLineUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.product.price"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "legderAccountsSub_accounts": {
      "properties": {
        "account_sub_name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "accName",
              "path": "sub_accounts[*].account_sub_name | [0]"
            }
          ],
          "x-samplevalue": "Petty Cash"
        },
        "account_sub_number": {
          "type": "string",
          "x-alias": [
            {
              "alias": "account",
              "path": "sub_accounts[*].account_sub_number | [0]"
            }
          ],
          "x-samplevalue": "1"
        },
        "account_type": {
          "type": "string",
          "x-alias": [
            {
              "alias": "accCategory",
              "path": "sub_accounts[*].account_type | [0]"
            }
          ],
          "x-samplevalue": "asset"
        },
        "balance": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "custom": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 226045
        },
        "parentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 93495
        },
        "sub_accountid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 226045
        }
      },
      "type": "object"
    },
    "currency_codes": {
      "properties": {},
      "title": "currency_codes",
      "x-has-customfields": false,
      "type": "object"
    },
    "journalEntries": {
      "properties": {
        "account": {
          "$ref": "#/definitions/journalEntriesAccount"
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "balance": {
          "$ref": "#/definitions/journalEntriesBalance"
        },
        "debit": {
          "$ref": "#/definitions/journalEntriesDebit"
        },
        "description": {
          "type": "string"
        },
        "detail_type": {
          "type": "string",
          "x-samplevalue": "received"
        },
        "detailid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 45021507
        },
        "entry": {
          "$ref": "#/definitions/journalEntriesEntry"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 45021507
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Invoice 0000045"
        },
        "sub_account": {
          "$ref": "#/definitions/journalEntriesSub_account"
        },
        "user_entered_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-01-09"
        }
      },
      "title": "journalEntries",
      "type": "object"
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "CreateExpense": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "ACC"
        },
        "amount": {
          "$ref": "#/definitions/CreateExpenseAmount"
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "BANK1"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3729837
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compounded_tax": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2011-11-24"
        },
        "ext_invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "vendorInvoiceNumber",
          "x-samplevalue": 0
        },
        "ext_systemid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "has_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "include_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_cogs": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "isduplicate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "markup_percent": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "test notes"
        },
        "projectid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staffid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 23323
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "date",
        "amount",
        "categoryid",
        "staffid"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "expenses",
      "type": "object"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "paid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "paid",
      "type": "object",
      "x-has-customfields": false
    },
    "summarytotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "taxes": {
      "properties": {
        "net_tax": {
          "$ref": "#/definitions/net_tax"
        },
        "net_taxable_amount": {
          "$ref": "#/definitions/net_taxable_amount"
        },
        "tax_collected": {
          "$ref": "#/definitions/tax_collected"
        },
        "tax_name": {
          "type": "string",
          "x-samplevalue": "Tax One"
        },
        "tax_paid": {
          "$ref": "#/definitions/tax_paid"
        },
        "taxable_amount_collected": {
          "$ref": "#/definitions/taxable_amount_collected"
        },
        "taxable_amount_paid": {
          "$ref": "#/definitions/taxable_amount_paid"
        }
      },
      "title": "taxes",
      "x-has-customfields": false,
      "type": "object"
    },
    "projectsRetrieve": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "title": "projectsRetrieve",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "updatePayment": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "$ref": "#/definitions/updatePaymentAmount"
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 1758507
        },
        "creditid": {
          "type": "string",
          "x-samplevalue": "545454"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2013-12-10"
        },
        "from_credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "gateway": {
          "type": "string",
          "x-samplevalue": "The payment processor used if any"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 10865326
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "invoice.id",
          "x-samplevalue": 2010190
        },
        "logid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10865326
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "This is note"
        },
        "orderid": {
          "type": "string",
          "x-samplevalue": "454455"
        },
        "overpaymentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 545
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 54545
        },
        "type": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-28 21:00:46"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "payments",
      "type": "object"
    },
    "0-30": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "0-30",
      "type": "object",
      "x-has-customfields": false
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "invoices": {
      "properties": {
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-04-04"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date_paid": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "discount_total": {
          "$ref": "#/definitions/discount_total"
        },
        "due_offset_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "invoice_number": {
          "type": "string",
          "x-samplevalue": "0000001"
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 638384
        },
        "lines": {
          "$ref": "#/definitions/clientids"
        },
        "outstanding": {
          "$ref": "#/definitions/invoicesoutstanding"
        },
        "paid": {
          "$ref": "#/definitions/invoicespaid"
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "subtotal": {
          "$ref": "#/definitions/subtotal"
        },
        "tax": {
          "$ref": "#/definitions/tax"
        },
        "tax_summaries": {
          "$ref": "#/definitions/clientids"
        },
        "total": {
          "$ref": "#/definitions/invoicestotal"
        },
        "v3_status": {
          "type": "string",
          "x-samplevalue": "draft"
        }
      },
      "title": "invoices",
      "x-has-customfields": false,
      "type": "object"
    },
    "children": {
      "properties": {
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        }
      },
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "invoicesOutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountDue",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "employeesGetRes": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2194844
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "statusids": {
      "properties": {},
      "title": "statusids",
      "x-has-customfields": false,
      "type": "object"
    },
    "tasks": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "description": {
          "type": "string",
          "x-samplevalue": "This is taks description"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "rate": {
          "$ref": "#/definitions/rate"
        },
        "taskid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "tdesc": {
          "type": "string",
          "x-samplevalue": ""
        },
        "tname": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2017-07-24 09:39:21"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "tasks",
      "type": "object"
    },
    "vendorsListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "r1awo"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "1234565564"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "fdf@y.com"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "fdf@y.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "12345687"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "cb"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 124596
        },
        "invitation_status": {
          "type": "string",
          "x-samplevalue": "not_sent"
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": -3
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "xyz"
        },
        "mapped_taskid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 146518
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "1234567890"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "my org"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Hyderabad"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "507005"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "india"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "xxxxxxx"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "xxxx"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Banjara Hills"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "role": {
          "type": "string",
          "x-samplevalue": "contractor"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-02-05 17:55:55"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 124596
        },
        "username": {
          "type": "string",
          "x-samplevalue": "6vL4TB8uxc"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "contractors",
      "type": "object"
    },
    "taxAmount1": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "taxAmount1",
      "type": "object",
      "x-has-customfields": false
    },
    "taxAmount2": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "taxAmount2",
      "type": "object",
      "x-has-customfields": false
    },
    "updateItem": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "monkey descriptor"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "",
          "x-samplevalue": 201225
        },
        "inventory": {
          "type": "string",
          "x-alias": "quantityOnHand",
          "x-samplevalue": "decimal-string count of inventorynull"
        },
        "itemid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 201225
        },
        "name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Monkeys"
        },
        "qty": {
          "type": "string",
          "x-alias": "quantityOnOrder",
          "x-samplevalue": "21"
        },
        "tax1": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-samplevalue": 58730
        },
        "tax2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 58729
        },
        "unit_cost": {
          "$ref": "#/definitions/updateItemUnit_cost"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-07-20 15:36:09"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "items",
      "type": "object"
    },
    "timeActivitiesPostReq": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "required": [
        "duration",
        "is_logged",
        "started_at"
      ],
      "title": "timeActivitiesPostReq",
      "x-has-customfields": false,
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "journalEntriesDebit": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "30.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "debit",
      "type": "object"
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "timeActivitiesPostRes": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 356356
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "title": "timeActivitiesPostRes",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "summaryoutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "outstanding",
      "type": "object",
      "x-has-customfields": false
    },
    "accounts91plus": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "91+",
      "type": "object",
      "x-has-customfields": false
    },
    "expensesdata": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "invoicesDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "invoicestotal": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "createTask": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "description": {
          "type": "string",
          "x-samplevalue": "This is taks description"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "rate": {
          "$ref": "#/definitions/rate"
        },
        "taskid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "tdesc": {
          "type": "string",
          "x-samplevalue": ""
        },
        "tname": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2017-07-24 09:39:21"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "name"
      ],
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "tasks",
      "type": "object"
    },
    "projectsObject": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "billing_method": {
          "type": "string",
          "x-samplevalue": "project_rate"
        },
        "budget": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1440000
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 97487
        },
        "complete": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "description"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-31"
        },
        "fixed_price": {
          "type": "string",
          "x-samplevalue": "34.00"
        },
        "group": {
          "$ref": "#/definitions/group"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 779597
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "logged_duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7800
        },
        "project_type": {
          "enum": [
            "fixed_price",
            "hourly_rate"
          ],
          "type": "string",
          "x-samplevalue": "fixed_price"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "8055"
        },
        "sample": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "services": {
          "items": {
            "$ref": "#/definitions/services"
          },
          "type": "array"
        },
        "title": {
          "type": "string",
          "x-samplevalue": "My Cool Project"
        },
        "updated_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-07-12T15:00:53"
        }
      },
      "title": "projectsObject",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "projects",
      "type": "object"
    },
    "authors": {
      "properties": {
        "1": {
          "$ref": "#/definitions/1"
        }
      },
      "title": "authors",
      "type": "object",
      "x-has-customfields": false
    },
    "updateInvoiceLinesLine": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/updateInvoiceLinesLineAmount"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "expenseid": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "qty": {
          "type": "string",
          "x-alias": "line.product.quantity"
        },
        "taxAmount1": {
          "type": "string",
          "x-alias": "line.taxAmount"
        },
        "taxAmount2": {
          "type": "string"
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unit_cost": {
          "$ref": "#/definitions/updateInvoiceLinesLineUnit_cost"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "employeesPatchReq": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "clients": {
      "properties": {
        "invoices": {
          "items": {
            "$ref": "#/definitions/invoices"
          },
          "type": "array"
        },
        "summary": {
          "$ref": "#/definitions/clientssummary"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 144577
        }
      },
      "title": "clients",
      "x-has-customfields": false,
      "type": "object"
    },
    "employeesPatchRes": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2194844
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "createInvoicePaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountPaid",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "UpdateExpense": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "ACC"
        },
        "amount": {
          "$ref": "#/definitions/UpdateExpenseAmount"
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "BANK1"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3729837
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compounded_tax": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2011-11-24"
        },
        "ext_invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "vendorInvoiceNumber",
          "x-samplevalue": 0
        },
        "ext_systemid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "has_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "include_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_cogs": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "isduplicate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "markup_percent": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "test notes"
        },
        "projectid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staffid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 23323
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "Expenses",
      "type": "object"
    },
    "payments": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/amount"
        },
        "client": {
          "type": "string",
          "x-samplevalue": "Magic"
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 144599
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-26"
        },
        "description": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string",
          "x-samplevalue": "0000012"
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 668361
        },
        "method": {
          "type": "string",
          "x-samplevalue": "Bank Transfer"
        }
      },
      "title": "payments",
      "x-has-customfields": false,
      "type": "object"
    },
    "BulkQuery": {
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "instance_id": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "updateVendor": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "r1awo"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "1234565564"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "fdf@y.com"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "fdf@y.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "12345687"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "cb"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 124596
        },
        "invitation_status": {
          "type": "string",
          "x-samplevalue": "not_sent"
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": -3
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "xyz"
        },
        "mapped_taskid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 146518
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "1234567890"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "my org"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Hyderabad"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "507005"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "india"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "xxxxxxx"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "xxxx"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Banjara Hills"
        },
        "rate": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "role": {
          "type": "string",
          "x-samplevalue": "contractor"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-02-05 17:55:55"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 124596
        },
        "username": {
          "type": "string",
          "x-samplevalue": "6vL4TB8uxc"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "contractors",
      "type": "object"
    },
    "invoicesLines": {
      "properties": {
        "line": {
          "$ref": "#/definitions/invoicesLinesLine"
        }
      },
      "type": "object"
    },
    "categories": {
      "properties": {
        "5372366": {
          "$ref": "#/definitions/5372366"
        },
        "5372370": {
          "$ref": "#/definitions/5372370"
        }
      },
      "title": "categories",
      "type": "object",
      "x-has-customfields": false
    },
    "childrentotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "717.42"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "createInvoiceLines": {
      "properties": {
        "line": {
          "$ref": "#/definitions/createInvoiceLinesLine"
        }
      },
      "type": "object"
    },
    "net_taxable_amount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-854.76"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "net_taxable_amount",
      "type": "object",
      "x-has-customfields": false
    },
    "journalEntriesAccount": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "Cash"
        },
        "account_number": {
          "type": "string",
          "x-samplevalue": "1000"
        },
        "account_type": {
          "type": "string",
          "x-samplevalue": "asset"
        },
        "accountid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 93495
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 93495
        }
      },
      "title": "account",
      "type": "object"
    },
    "UpdateExpenseAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "accounts": {
      "properties": {
        "0-30": {
          "$ref": "#/definitions/accounts0-30"
        },
        "31-60": {
          "$ref": "#/definitions/31-60"
        },
        "61-90": {
          "$ref": "#/definitions/accounts61-90"
        },
        "91+": {
          "$ref": "#/definitions/accounts91plus"
        },
        "email": {
          "type": "string",
          "x-samplevalue": "data@ce.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "DFDS"
        },
        "lname": {
          "type": "string"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "DFDS"
        },
        "total": {
          "$ref": "#/definitions/accountstotal"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161775
        }
      },
      "title": "accounts",
      "x-has-customfields": false,
      "type": "object"
    },
    "clientids0": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "JaneDoe@Example.com",
          "x-sub-format": "email"
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Jane"
        },
        "id": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Doe"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Company and Co"
        },
        "userid": {
          "type": "string",
          "x-samplevalue": "null"
        }
      },
      "title": "0",
      "type": "object",
      "x-has-customfields": false
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "summarypaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "paid",
      "type": "object",
      "x-has-customfields": false
    },
    "bulkDownloadRequest": {
      "properties": {
        "apiLimit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "continueFromJobId": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "docsHubDetails": {
          "$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
        },
        "filterDateField": {
          "type": "string",
          "x-samplevalue": "lastModifiedDate"
        },
        "filterNulls": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "format": {
          "enum": [
            "application/json",
            "txt/csv",
            "application/jsonl"
          ],
          "type": "string",
          "x-samplevalue": "application/json"
        },
        "from": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-06T13:22:17-08:00"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 107
        },
        "notificationUrl": {
          "type": "string",
          "x-samplevalue": "https://myreceiver.com/whatever"
        },
        "objectName": {
          "type": "string",
          "x-samplevalue": "accounts"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "query": {
          "$ref": "#/definitions/bulkDownloadRequestQuery"
        },
        "selectFields": {
          "type": "string",
          "x-samplevalue": "a,b,c"
        },
        "to": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-10T13:22:17-08:00"
        },
        "where": {
          "type": "string",
          "x-samplevalue": "name='Alex' and gender='male'"
        }
      },
      "required": [
        "objectName",
        "format"
      ],
      "title": "bulkDownloadRequest",
      "type": "object"
    },
    "createInvoiceLinesLineAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.totalAmount"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "total_expensechildren": {
      "properties": {
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        }
      },
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "data": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "salesQuotesGetByIdResAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "7200.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "timeActivitiesPatchReq": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "billed": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "client_id": {
          "type": "string",
          "x-samplevalue": "2149780"
        },
        "duration": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 7200
        },
        "internal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_logged": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "note": {
          "type": "string",
          "x-samplevalue": "Stuff"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "153125"
        },
        "started_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "x-samplevalue": "2016-08-16T20:00:00.000Z"
        }
      },
      "required": [
        "duration",
        "is_logged",
        "started_at"
      ],
      "title": "timeActivitiesPatchReq",
      "x-has-customfields": false,
      "x-vendor-objectname": "time_entries",
      "type": "object"
    },
    "taxesListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "type": "string",
          "x-samplevalue": "12"
        },
        "compound": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "number": {
          "type": "string",
          "x-samplevalue": "an external number that identifies your tax submission"
        },
        "taxid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2016-07-20 15:28:44"
        }
      },
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "taxes",
      "type": "object"
    },
    "createItemUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "price",
          "x-samplevalue": "1234.00"
        },
        "code": {
          "type": "string",
          "x-alias": "salesCurrency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchResDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "total_incometotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "updateInvoice": {
      "properties": {
        "accountid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "KAG77"
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "address": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for address"
        },
        "amount": {
          "$ref": "#/definitions/updateInvoiceAmount"
        },
        "auto_bill": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "autobill_status": {
          "type": "string",
          "x-samplevalue": "The value for autobill_status"
        },
        "basecampid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for city"
        },
        "code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "The value for code"
        },
        "country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "United States"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 14:37:59"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "Test Client"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 2185379
        },
        "date_paid": {
          "format": "date",
          "type": "string",
          "x-alias": "fullPaymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "deposit_amount": {
          "type": "string",
          "x-samplevalue": "The value for deposit_amount"
        },
        "deposit_percentage": {
          "type": "string",
          "x-samplevalue": "The value for deposit_percentage"
        },
        "deposit_status": {
          "type": "string",
          "x-samplevalue": "none"
        },
        "description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for description"
        },
        "discount_description": {
          "type": "string",
          "x-samplevalue": "The value for discount_description"
        },
        "discount_total": {
          "$ref": "#/definitions/updateInvoiceDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "dispute_status": {
          "type": "string",
          "x-samplevalue": "The value for dispute_status"
        },
        "due_date": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-10-09"
        },
        "due_offset_days": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 30
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-alias": "customer.contact.firstName",
          "x-samplevalue": "Test"
        },
        "generation_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-09-09"
        },
        "gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2201278
        },
        "invoice_number": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "0000003"
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2201278
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_order_status": {
          "type": "string",
          "x-samplevalue": "The value for last_order_status"
        },
        "lines": {
          "$ref": "#/definitions/updateInvoiceLines"
        },
        "lname": {
          "type": "string",
          "x-alias": "customer.contact.lastName",
          "x-samplevalue": "Client"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "The value for notes"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Test Client"
        },
        "outstanding": {
          "$ref": "#/definitions/updateInvoiceOutstanding"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "paid": {
          "$ref": "#/definitions/updateInvoicePaid"
        },
        "parent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "payment_details": {
          "type": "string",
          "x-samplevalue": "Stirng"
        },
        "payment_status": {
          "type": "string",
          "x-samplevalue": "unpaid"
        },
        "po_number": {
          "type": "string",
          "x-alias": "parentDocumentNumber",
          "x-samplevalue": "The value for po_number"
        },
        "province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for province"
        },
        "return_uri": {
          "type": "string",
          "x-samplevalue": "The value for return_uri"
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "show_attachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 2
        },
        "street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for street"
        },
        "street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for street2"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-alias": "paymentTerms",
          "x-samplevalue": "The value for terms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-09 16:04:42"
        },
        "v3_status": {
          "type": "string",
          "x-samplevalue": "sent"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "invoices",
      "type": "object"
    },
    "clientids": {
      "properties": {},
      "title": "clientids",
      "x-has-customfields": false,
      "type": "object"
    },
    "payment_methods": {
      "properties": {},
      "title": "payment_methods",
      "x-has-customfields": false,
      "type": "object"
    },
    "taxsummary": {
      "properties": {
        "cash_based": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "A bunch of Characters"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        },
        "taxes": {
          "items": {
            "$ref": "#/definitions/taxes"
          },
          "type": "array"
        },
        "total_invoiced": {
          "$ref": "#/definitions/total_invoiced"
        }
      },
      "title": "taxsummary",
      "x-has-customfields": false,
      "type": "object"
    },
    "members": {
      "properties": {
        "active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "company": {
          "type": "string",
          "x-samplevalue": "Brain Wyatt & Co"
        },
        "email": {
          "type": "string",
          "x-samplevalue": "test@example.com",
          "x-sub-format": "email"
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "Brian"
        },
        "identity_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 418859
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Wyatt"
        },
        "role": {
          "type": "string",
          "x-samplevalue": "owner"
        }
      },
      "title": "members",
      "x-has-customfields": false,
      "type": "object"
    },
    "tax_paid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "tax_paid",
      "type": "object",
      "x-has-customfields": false
    },
    "salesQuotesGetAllResDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "links": {
      "properties": {
        "self": {
          "type": "string",
          "x-samplevalue": "/service/comments/projects/779597"
        },
        "threads": {
          "type": "string",
          "x-samplevalue": "/service/comments/projects/779597/threads"
        }
      },
      "title": "links",
      "type": "object",
      "x-has-customfields": false
    },
    "group": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1177789
        },
        "members": {
          "items": {
            "$ref": "#/definitions/members"
          },
          "type": "array"
        },
        "pending_invitations": {
          "$ref": "#/definitions/pending_invitations"
        }
      },
      "title": "group",
      "type": "object",
      "x-has-customfields": false
    },
    "CreateExpenseResponseAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "journalEntriesSub_account": {
      "properties": {
        "account_sub_name": {
          "type": "string",
          "x-samplevalue": "Petty Cash"
        },
        "account_sub_number": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 226045
        },
        "parentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 93495
        },
        "sub_accountid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 226045
        }
      },
      "title": "sub_account",
      "type": "object"
    },
    "invoicesListPaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountPaid",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "tax": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "tax",
      "type": "object",
      "x-has-customfields": false
    },
    "paymentsListAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "10.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "total_expensetotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "1572.18"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "invoicesListDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "updateTask": {
      "properties": {
        "billable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "description": {
          "type": "string",
          "x-samplevalue": "This is taks description"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "rate": {
          "$ref": "#/definitions/rate"
        },
        "taskid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 159361
        },
        "tdesc": {
          "type": "string",
          "x-samplevalue": ""
        },
        "tname": {
          "type": "string",
          "x-samplevalue": "Piloting"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2017-07-24 09:39:21"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "name"
      ],
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "tasks",
      "type": "object"
    },
    "expensesListObject": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "ACC"
        },
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "MgzNp"
        },
        "amount": {
          "$ref": "#/definitions/expensesListAmount"
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "BANK1"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3729837
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compounded_tax": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2011-11-24"
        },
        "expenseid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 15048051
        },
        "ext_invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "vendorInvoiceNumber",
          "x-samplevalue": 0
        },
        "ext_systemid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "from_bulk_import": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "has_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 15048051
        },
        "include_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_cogs": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "isduplicate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "markup_percent": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "test notes"
        },
        "projectid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staffid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 23323
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-08-20 05:00:45"
        },
        "vendor": {
          "type": "string",
          "x-alias": "vendor.name"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "total_income": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/total_incomechildren"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/total_incomedata"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Gross Profit"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "credit"
        },
        "total": {
          "$ref": "#/definitions/total_incometotal"
        }
      },
      "title": "total_income",
      "type": "object",
      "x-has-customfields": false
    },
    "salesQuotesPostResAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "7200.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "createItem": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "monkey descriptor"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "",
          "x-samplevalue": 201225
        },
        "inventory": {
          "type": "string",
          "x-alias": "quantityOnHand",
          "x-samplevalue": "decimal-string count of inventorynull"
        },
        "itemid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 201225
        },
        "name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Monkeys"
        },
        "qty": {
          "type": "string",
          "x-alias": "quantityOnOrder",
          "x-samplevalue": "21"
        },
        "tax1": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-samplevalue": 58730
        },
        "tax2": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 58729
        },
        "unit_cost": {
          "$ref": "#/definitions/createItemUnit_cost"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-07-20 15:36:09"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "name"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "items",
      "type": "object"
    },
    "total_invoiced": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total_invoiced",
      "type": "object",
      "x-has-customfields": false
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "updateInvoicePaid": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountPaid",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "expenses": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/expenseschildren"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/expensesdata"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Car & Truck Expenses"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "credit"
        },
        "total": {
          "$ref": "#/definitions/expensestotal"
        }
      },
      "title": "expenses",
      "x-has-customfields": false,
      "type": "object"
    },
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "itemsUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "price",
          "x-samplevalue": "1234.00"
        },
        "code": {
          "type": "string",
          "x-alias": "salesCurrency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "invoicesListLinesLineAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "line.totalAmount"
        },
        "code": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "expenseschildren": {
      "properties": {
        "children": {
          "items": {
            "$ref": "#/definitions/childrenchildren"
          },
          "type": "array"
        },
        "data": {
          "items": {
            "$ref": "#/definitions/childrendata"
          },
          "type": "array"
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Personal (general)"
        },
        "entry_type": {
          "type": "string",
          "x-samplevalue": "debit"
        },
        "total": {
          "$ref": "#/definitions/childrentotal"
        }
      },
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "salesQuotesPatchReq": {
      "properties": {
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "email": {
          "type": "string",
          "x-samplevalue": "test@example.com"
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "lines": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchReqLines"
          },
          "type": "array"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089"
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "salesQuotesPatchReqLinesUnit_cost": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "5000.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "accountstotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "salesQuotesPatchRes": {
      "properties": {
        "accepted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "MgzNp"
        },
        "address": {
          "type": "string",
          "x-samplevalue": "Nellore, Andhra"
        },
        "amount": {
          "$ref": "#/definitions/salesQuotesPatchResAmount"
        },
        "city": {
          "type": "string",
          "x-samplevalue": "Nellore"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "524002"
        },
        "country": {
          "type": "string",
          "x-samplevalue": "India"
        },
        "create_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-04"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 06:59:51"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "current_organization": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "customerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 161795
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Line Desc-1"
        },
        "discount_total": {
          "$ref": "#/definitions/salesQuotesPatchResDiscount_total"
        },
        "discount_value": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "display_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "estimate_number": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "estimateid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "ext_archive": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "fname": {
          "type": "string",
          "x-samplevalue": "Harshavardhan Naidu"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120687
        },
        "invoiced": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "lname": {
          "type": "string",
          "x-samplevalue": "Gangavarapu"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Estimate Creation"
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "ownerid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "po_number": {
          "type": "string",
          "x-samplevalue": "500089"
        },
        "province": {
          "type": "string",
          "x-samplevalue": "Andhra"
        },
        "require_client_signature": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "rich_proposal": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "sentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "street": {
          "type": "string",
          "x-samplevalue": "Madhapur"
        },
        "street2": {
          "type": "string",
          "x-samplevalue": "Rent-a-Desk"
        },
        "template": {
          "type": "string",
          "x-samplevalue": "clean-grouped"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Terms Desc"
        },
        "ui_status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2021-02-10 07:47:33"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "id"
      ],
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "updateInvoiceAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "createInvoiceDiscount_total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "tax_collected": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "tax_collected",
      "type": "object",
      "x-has-customfields": false
    },
    "total": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "UpdateExpenseResponse": {
      "properties": {
        "account_name": {
          "type": "string",
          "x-samplevalue": "ACC"
        },
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "MgzNp"
        },
        "amount": {
          "$ref": "#/definitions/UpdateExpenseResponseAmount"
        },
        "bank_name": {
          "type": "string",
          "x-samplevalue": "BANK1"
        },
        "categoryid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3729837
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compounded_tax": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2011-11-24"
        },
        "expenseid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 15048051
        },
        "ext_invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "vendorInvoiceNumber",
          "x-samplevalue": 0
        },
        "ext_systemid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "from_bulk_import": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "has_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 15048051
        },
        "include_receipt": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "is_cogs": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "isduplicate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "markup_percent": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "test notes"
        },
        "projectid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staffid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 23323
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2018-08-20 05:00:45"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "Expenses",
      "type": "object"
    },
    "profitloss": {
      "properties": {
        "cash_based": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "company_name": {
          "type": "string",
          "x-samplevalue": "My Company"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "download_token": {
          "type": "string",
          "x-samplevalue": "A bunch of letters and numbers"
        },
        "end_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-12-31"
        },
        "expenses": {
          "items": {
            "$ref": "#/definitions/expenses"
          },
          "type": "array"
        },
        "income": {
          "items": {
            "$ref": "#/definitions/income"
          },
          "type": "array"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/labels"
          },
          "type": "array"
        },
        "net_profit": {
          "$ref": "#/definitions/net_profit"
        },
        "resolution": {
          "type": "string",
          "x-samplevalue": "null"
        },
        "start_date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-01-01"
        },
        "total_expense": {
          "$ref": "#/definitions/total_expense"
        },
        "total_income": {
          "$ref": "#/definitions/total_income"
        }
      },
      "title": "profitloss",
      "x-has-customfields": false,
      "type": "object"
    },
    "expensesAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "paymentsListObject": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "$ref": "#/definitions/paymentsListAmount"
        },
        "clientid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "customer.id",
          "x-samplevalue": 1758507
        },
        "creditid": {
          "type": "string",
          "x-samplevalue": "545454"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2013-12-10"
        },
        "from_credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "gateway": {
          "type": "string",
          "x-samplevalue": "The payment processor used if any"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 10865326
        },
        "invoiceid": {
          "format": "int32",
          "type": "integer",
          "x-alias": "invoice.id",
          "x-samplevalue": 2010190
        },
        "logid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10865326
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "This is note"
        },
        "orderid": {
          "type": "string",
          "x-samplevalue": "454455"
        },
        "overpaymentid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 545
        },
        "transactionid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 54545
        },
        "type": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-09-28 21:00:46"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "payments",
      "type": "object"
    },
    "net_tax": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "net_tax",
      "type": "object",
      "x-has-customfields": false
    },
    "amount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "114.77"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "amount",
      "type": "object",
      "x-has-customfields": false
    },
    "createCustomer": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "zDmNq"
        },
        "allow_late_fees": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "allow_late_notifications": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "The value for bus_phone"
        },
        "company_industry": {
          "type": "string",
          "x-samplevalue": "The value for company_industry"
        },
        "company_size": {
          "type": "string",
          "x-samplevalue": "The value for company_size"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "direct_link_token": {
          "type": "string",
          "x-samplevalue": "The value for direct_link_token"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "john.doe@abcorp.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "The value for fax"
        },
        "fname": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-samplevalue": "The value for fname"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-samplevalue": "The value for home_phone"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 1831231
        },
        "language": {
          "type": "string",
          "x-alias": "language",
          "x-samplevalue": "en"
        },
        "last_activity": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "lname": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-samplevalue": "The value for lname"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "contact.mobile",
          "x-samplevalue": "The value for mob_phone"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "The value for note"
        },
        "notified": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "The value for organization"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "The value for p_city"
        },
        "p_code": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "2011"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "The value for p_country"
        },
        "p_province": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "The value for p_province"
        },
        "p_street": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "The value for p_street"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "The value for p_street2"
        },
        "pref_email": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "pref_gmail": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "role": {
          "type": "string",
          "x-alias": "contact.title",
          "x-samplevalue": "client"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "The value for s_city"
        },
        "s_code": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "The value for s_code"
        },
        "s_country": {
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-samplevalue": "The value for s_country"
        },
        "s_province": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "The value for s_province"
        },
        "s_street": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "The value for s_street"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "The value for s_street2"
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-03-09 17:42:11"
        },
        "statement_token": {
          "type": "string",
          "x-samplevalue": "The value for statement_token"
        },
        "subdomain": {
          "type": "string",
          "x-samplevalue": "The value for subdomain"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-12 14:54:15"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1831231
        },
        "username": {
          "type": "string",
          "x-samplevalue": "aclient"
        },
        "vat_name": {
          "type": "string",
          "x-samplevalue": "The value for vat_name"
        },
        "vat_number": {
          "type": "string",
          "x-samplevalue": "The value for vat_number"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "clients",
      "type": "object"
    },
    "updateInvoiceLines": {
      "properties": {
        "line": {
          "$ref": "#/definitions/updateInvoiceLinesLine"
        }
      },
      "type": "object"
    },
    "updateInvoiceOutstanding": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "totalAmountDue",
          "x-samplevalue": "800.00"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "totals": {
      "properties": {
        "0-30": {
          "$ref": "#/definitions/0-30"
        },
        "61-90": {
          "$ref": "#/definitions/61-90"
        },
        "91+": {
          "$ref": "#/definitions/91plus"
        },
        "total": {
          "$ref": "#/definitions/total"
        }
      },
      "title": "totals",
      "type": "object",
      "x-has-customfields": false
    },
    "bulkDownloadRequestDocsHubDetails": {
      "properties": {
        "instanceId": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "path": {
          "type": "string",
          "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
        }
      },
      "title": "docsHubDetails",
      "type": "object"
    },
    "net_profitchildren": {
      "properties": {},
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "UpdateExpenseResponseAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "net_profittotal": {
      "properties": {
        "amount": {
          "type": "string",
          "x-samplevalue": "-1572.18"
        },
        "code": {
          "type": "string",
          "x-samplevalue": "CAD"
        }
      },
      "title": "total",
      "type": "object",
      "x-has-customfields": false
    },
    "total_incomechildren": {
      "properties": {},
      "title": "children",
      "x-has-customfields": false,
      "type": "object"
    },
    "total_incomedata": {
      "properties": {},
      "title": "data",
      "x-has-customfields": false,
      "type": "object"
    },
    "CreateExpenseAmount": {
      "properties": {
        "amount": {
          "type": "string",
          "x-alias": "amount",
          "x-samplevalue": "20.00"
        },
        "code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "updateTax": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "zDmNq"
        },
        "amount": {
          "type": "string",
          "x-samplevalue": "12"
        },
        "compound": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "number": {
          "type": "string",
          "x-samplevalue": "an external number that identifies your tax submission"
        },
        "taxid": {
          "format": "int32",
          "type": "integer",
          "x-readOnly": true,
          "x-samplevalue": 58728
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-readOnly": true,
          "x-samplevalue": "2016-07-20 15:28:44"
        }
      },
      "title": "updateTax",
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "taxes",
      "type": "object"
    },
    "employeesPostRes": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id",
          "x-samplevalue": 2194844
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "id"
      ],
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "invoicesLinesLine": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/invoicesLinesLineAmount"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "expenseid": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "qty": {
          "type": "string",
          "x-alias": "line.product.quantity"
        },
        "taxAmount1": {
          "type": "string",
          "x-alias": "line.taxAmount"
        },
        "taxAmount2": {
          "type": "string"
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unit_cost": {
          "$ref": "#/definitions/invoicesLinesLineUnit_cost"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "employeesPostReq": {
      "properties": {
        "accounting_systemid": {
          "type": "string",
          "x-samplevalue": "KAG77"
        },
        "api_token": {
          "type": "string",
          "x-samplevalue": "akdhkjfhsdlkjflkjklhjfdsojflkjds"
        },
        "bus_phone": {
          "type": "string",
          "x-alias": "officePhone",
          "x-samplevalue": "8974563215"
        },
        "currency_code": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "display_name": {
          "type": "string",
          "x-samplevalue": "cb"
        },
        "email": {
          "type": "string",
          "x-alias": "email",
          "x-samplevalue": "staff@freshbooks.com"
        },
        "fax": {
          "type": "string",
          "x-alias": "fax",
          "x-samplevalue": "9874563212"
        },
        "fname": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "chinna"
        },
        "home_phone": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "2356789458"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_login": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "lname": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "sa"
        },
        "mob_phone": {
          "type": "string",
          "x-alias": "mobile",
          "x-samplevalue": "2032908666"
        },
        "note": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "ufff"
        },
        "num_logins": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Cloud Elements"
        },
        "p_city": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "San Jose"
        },
        "p_code": {
          "type": "string",
          "x-samplevalue": "75248"
        },
        "p_country": {
          "type": "string",
          "x-alias": "address.country",
          "x-samplevalue": "USA"
        },
        "p_province": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "p_street": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "Gemini St"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "address.line2",
          "x-samplevalue": "Bay Area"
        },
        "rate": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 20.25
        },
        "signup_date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-08-05 10:38:41"
        },
        "userid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2194844
        },
        "username": {
          "type": "string",
          "x-samplevalue": "MHzxqDerKq"
        },
        "vis_state": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "required": [
        "email"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "staff",
      "type": "object"
    },
    "createInvoiceLinesLine": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/createInvoiceLinesLineAmount"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "expenseid": {
          "type": "string"
        },
        "lineid": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "qty": {
          "type": "string",
          "x-alias": "line.product.quantity"
        },
        "taxAmount1": {
          "type": "string",
          "x-alias": "line.taxAmount"
        },
        "taxAmount2": {
          "type": "string"
        },
        "taxName1": {
          "type": "string"
        },
        "taxName2": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unit_cost": {
          "$ref": "#/definitions/createInvoiceLinesLineUnit_cost"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "pending_invitations": {
      "properties": {},
      "title": "clientids",
      "x-has-customfields": false,
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "Freshbooks Cloud Accounting",
    "x-element-hub": "finance",
    "x-element-key": "freshbooksv2",
    "title": "freshbooksv2",
    "x-element-id": 10701,
    "version": "api-v2",
    "description": "Add a Freshbooks Cloud Accounting Instance to connect your existing Freshbooks account to the Finance Hub"
  },
  "tags": [
    {
      "name": "Bulk"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Employees"
    },
    {
      "name": "Expenses"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Items"
    },
    {
      "name": "Journal Entries"
    },
    {
      "name": "Legder Accounts"
    },
    {
      "name": "Object Name"
    },
    {
      "name": "Objects"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Ping"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Reports"
    },
    {
      "name": "Sales Quotes"
    },
    {
      "name": "Tasks"
    },
    {
      "name": "Taxes"
    },
    {
      "name": "Time Activities"
    },
    {
      "name": "Vendors"
    }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Cloud based financial and accounting software for small businesses",
  "externalDocs": {
    "description": "SAP Open Connectors Documentation",
    "url": "https://help.openconnectors.ext.hana.ondemand.com/home/freshbooksv2"
  }
}