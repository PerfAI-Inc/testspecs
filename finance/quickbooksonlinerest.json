{
  "basePath": "/elements/api-v2",
  "paths": {
    "/attachments": {
      "get": {
        "summary": "Search for attachments",
        "operationId": "getAttachments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/attachmentsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Attachments"
        ]
      }
    },
    "/attachments/{id}": {
      "get": {
        "summary": "Retrieve an attachment",
        "operationId": "getAttachmentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/attachmentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the attachment",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Attachments"
        ]
      }
    },
    "/bill-payments": {
      "post": {
        "summary": "Create a billPayment",
        "operationId": "createBillPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billPaymentsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/billPaymentsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bill Payments"
        ]
      },
      "get": {
        "summary": "Search for bill payments",
        "operationId": "getBillPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billPaymentsGetAll"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Bill Payments"
        ]
      }
    },
    "/bill-payments/{id}": {
      "get": {
        "summary": "Retrieve a defined bill payment or category associated with a given id",
        "operationId": "getBillPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billPaymentsGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the class or category to retrieve from the finance system.",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Bill Payments"
        ]
      },
      "delete": {
        "summary": "Delete a defined bill payment or category associated with a given id",
        "operationId": "deleteBillPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the bill-payment or category to delete from the finance system.",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Bill Payments"
        ]
      },
      "put": {
        "summary": "Update a defined bill payment associated with a given id",
        "operationId": "replaceBillPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billPaymentsPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the bill-payment",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/billPaymentsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The bill-payment object",
            "required": true
          }
        ],
        "tags": [
          "Bill Payments"
        ]
      }
    },
    "/bills": {
      "post": {
        "summary": "Create a bill",
        "operationId": "createBill",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/billsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The bill object",
            "required": true
          }
        ],
        "tags": [
          "Bills"
        ]
      },
      "get": {
        "summary": "Search for bills",
        "operationId": "getBills",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/billsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Bills"
        ]
      }
    },
    "/bills/{id}": {
      "get": {
        "summary": "Retrieve a bill",
        "operationId": "getBillById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the bill",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Bills"
        ]
      },
      "delete": {
        "summary": "Delete a bill",
        "operationId": "deleteBillById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the bill",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Bills"
        ]
      },
      "put": {
        "summary": "Update a bill",
        "operationId": "replaceBillById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/billsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the bill to update into the finance system.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/billsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The bill object",
            "required": true
          }
        ],
        "tags": [
          "Bills"
        ]
      }
    },
    "/budgets": {
      "get": {
        "summary": "Search for budgets in the finance system",
        "operationId": "getBudgets",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/budgetsGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=’2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Budgets"
        ]
      }
    },
    "/bulk/download": {
      "post": {
        "summary": "Create a new bulk download job (asynchronous)",
        "operationId": "createBulkDownload",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/bulkDownloadRequest"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/jobs": {
      "get": {
        "operationId": "getBulkJobs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkJobList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Fetch all the bulk jobs for an instance",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Cancel an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the errors of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "Bulk"
        ],
        "produces": [
          "text/csv",
          "application/json",
          "application/jsonl"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" :&lt;path for the sub resource&gt;, \"format\": &lt;json/csv&gt;, \"callback-payload\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/changes": {
      "get": {
        "summary": "The change data capture (cdc) operation returns a list of objects that have changed since a specified time",
        "operationId": "getChanges",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/changesGetObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "CDC request returns a maximum of 1000 objects. It is suggested to query with a look-back time shorter than 30 days that can ensure full data is returned. Ex:entities='Customer,Estimate' and changedSince='2015-11-28'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Changes"
        ]
      }
    },
    "/classes": {
      "post": {
        "summary": "Create a class ",
        "operationId": "createClasse",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/classesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/classesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The class object body",
            "required": true
          }
        ],
        "tags": [
          "Classes"
        ]
      },
      "get": {
        "summary": "search for classes",
        "operationId": "getClasses",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/classesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/classes/{id}": {
      "get": {
        "summary": "Retrieve a defined Class or Category associated with a given id",
        "operationId": "getClasseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/classesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the class or category to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Classes"
        ]
      },
      "put": {
        "summary": "Updates a defined Class or Category associated with a given id",
        "operationId": "replaceClasseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/classesPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the class or category to update into the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/classesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The class object",
            "required": true
          }
        ],
        "tags": [
          "Classes"
        ]
      }
    },
    "/company-currencies": {
      "post": {
        "summary": "Create a company-currency",
        "operationId": "createCompanyCurrency",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/companyCurrenciesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/companyCurrenciesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The company-currency object",
            "required": true
          }
        ],
        "tags": [
          "Company Currencies"
        ]
      },
      "get": {
        "summary": "Search for company-currencies",
        "operationId": "getCompanyCurrencies",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/companyCurrenciesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Company Currencies"
        ]
      }
    },
    "/company-currencies/{id}": {
      "get": {
        "summary": "Retrieve a company-currency",
        "operationId": "getCompanyCurrencyById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/companyCurrenciesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the company-currency",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Company Currencies"
        ]
      },
      "delete": {
        "summary": "Delete a company-currency",
        "operationId": "deleteCompanyCurrencyById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id company-currency",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Company Currencies"
        ]
      },
      "put": {
        "summary": "Update a company-currency",
        "operationId": "replaceCompanyCurrencyById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/companyCurrenciesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id company-currency",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/companyCurrenciesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The company-currency object",
            "required": true
          }
        ],
        "tags": [
          "Company Currencies"
        ]
      }
    },
    "/company-info": {
      "get": {
        "summary": "Search for Company-Info",
        "operationId": "getCompanyInfo",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/companyInfosObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Company Info"
        ]
      }
    },
    "/company-info/{id}": {
      "patch": {
        "summary": "Update a company-info",
        "operationId": "updateCompanyInfoById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/companyInfo"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the company-info to updates into the finance system.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/companyInfoPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The company-info object",
            "required": true
          }
        ],
        "tags": [
          "Company Info"
        ]
      }
    },
    "/credit-memos": {
      "post": {
        "summary": "Creates a Credit Memo",
        "operationId": "createCreditMemo",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditMemosPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/creditMemosPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The credit-memo object",
            "required": true
          }
        ],
        "tags": [
          "Credit Memos"
        ]
      },
      "get": {
        "summary": "Search for credit memos from the finance system.",
        "operationId": "getCreditMemos",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/creditMemosGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credit Memos"
        ]
      }
    },
    "/credit-memos/{id}": {
      "get": {
        "summary": "Retrieve a defined credit memo associated with a given id",
        "operationId": "getCreditMemoById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditMemosGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the credit-memos to retrieve from the finance system.",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Credit Memos"
        ]
      },
      "delete": {
        "summary": "Delete a defined credit memo associated with a given id",
        "operationId": "deleteCreditMemoById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the credit-memos to deletes from the finance system.",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Credit Memos"
        ]
      },
      "put": {
        "summary": "Update a defined credit memo associated with a given id",
        "operationId": "replaceCreditMemoById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditMemosPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the credit-memos to update into the finance system.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/creditMemosPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The credit-memo object",
            "required": true
          }
        ],
        "tags": [
          "Credit Memos"
        ]
      }
    },
    "/customers": {
      "post": {
        "summary": "Create a customer",
        "operationId": "createCustomer",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The customer object",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Search for customers",
        "operationId": "getCustomers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customersObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{id}": {
      "get": {
        "summary": "Retrieve a customer",
        "operationId": "getCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the customer to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the customer",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "put": {
        "summary": "Update a customer",
        "operationId": "replaceCustomerById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customersObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the customer to retrieve from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The customer object",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/departments": {
      "post": {
        "summary": "Create a department",
        "operationId": "createDepartment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/departmentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/departmentsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The department object",
            "required": true
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "get": {
        "summary": "Search for departments",
        "operationId": "getDepartments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/departmentsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-02T06:40:55-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/departments/{id}": {
      "get": {
        "summary": "Retrieve a department",
        "operationId": "getDepartmentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/departmentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the department to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "delete": {
        "summary": "Delete a department",
        "operationId": "deleteDepartmentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the department ",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "put": {
        "summary": "Update a department",
        "operationId": "replaceDepartmentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/departmentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the department to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/departmentsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The department object",
            "required": true
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/deposits": {
      "post": {
        "summary": "Create a deposit",
        "operationId": "createDeposit",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/depositsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/depositsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The deposit object",
            "required": true
          }
        ],
        "tags": [
          "Deposits"
        ]
      },
      "get": {
        "summary": "Search for deposits",
        "operationId": "getDeposits",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/depositsGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Deposits"
        ]
      }
    },
    "/deposits/{id}": {
      "patch": {
        "summary": "Updates a defined deposit associated with a given id",
        "operationId": "updateDepositById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/depositsPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the deposit to updates into the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/depositsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The deposit object",
            "required": true
          }
        ],
        "tags": [
          "Deposits"
        ]
      },
      "get": {
        "summary": "Retrieve a defined deposit associated with a given id",
        "operationId": "getDepositById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/depositsGetByID"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the deposit to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Deposits"
        ]
      },
      "delete": {
        "summary": "Deletes a defined deposit associated with a given id",
        "operationId": "deleteDepositById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the deposits to delete from the finance system.",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object.",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Deposits"
        ]
      }
    },
    "/employees": {
      "post": {
        "summary": "Create an employee",
        "operationId": "createEmployee",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The employee object",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "get": {
        "summary": "Search for employees",
        "operationId": "getEmployees",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/employees/{id}": {
      "get": {
        "summary": "Retrieve an employee",
        "operationId": "getEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the employee to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "delete": {
        "summary": "Delete an employee",
        "operationId": "deleteEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the employee",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "put": {
        "summary": "Update an employee",
        "operationId": "replaceEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the employee to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The employee object",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/estimates": {
      "post": {
        "summary": "Create an estimate",
        "operationId": "createEstimate",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/estimatesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/estimatesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The estimate object",
            "required": true
          }
        ],
        "tags": [
          "Estimates"
        ]
      },
      "get": {
        "summary": "Search for estimates",
        "operationId": "getEstimates",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/estimatesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=TxnDate= '2017-08-20'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Estimates"
        ]
      }
    },
    "/estimates/{id}": {
      "get": {
        "summary": "Retrieve an estimate",
        "operationId": "getEstimateById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/estimatesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the estimate to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Estimates"
        ]
      },
      "delete": {
        "summary": "Delete an estimate",
        "operationId": "deleteEstimateById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the estimate",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Estimates"
        ]
      },
      "put": {
        "summary": "Update an estimate",
        "operationId": "replaceEstimateById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/estimatesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the estimate to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/estimatesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The estimate object",
            "required": true
          }
        ],
        "tags": [
          "Estimates"
        ]
      }
    },
    "/exchange-rates": {
      "get": {
        "summary": "Search for exchange rates",
        "operationId": "getExchangeRates",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/exchangeRatesGetAll"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=’2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Exchange Rates"
        ]
      }
    },
    "/exchange-rates/{id}": {
      "get": {
        "summary": "Retrieve a defined exchange rate associated with a given id",
        "operationId": "getExchangeRateById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the exchange rates to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Exchange Rates"
        ]
      }
    },
    "/invoices": {
      "post": {
        "summary": "Create an invoice",
        "operationId": "createInvoice",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The invoice object",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoicesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2019-12-29T21:40:36-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "summary": "Retrieve an invoice",
        "operationId": "getInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the invoice to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "delete": {
        "summary": "Delete an invoice",
        "operationId": "deleteInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the invoice",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "put": {
        "summary": "Update an invoice",
        "operationId": "replaceInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the invoice to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The invoice object",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/items": {
      "post": {
        "summary": "Create an item",
        "operationId": "createItem",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The item object",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Search for items",
        "operationId": "getItems",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itemsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2017-08-23T12:47:47-07:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/items/{id}": {
      "get": {
        "summary": "Retrieve an item",
        "operationId": "getItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the item to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "delete": {
        "summary": "Delete an item",
        "operationId": "deleteItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the item",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "put": {
        "summary": "Update an item",
        "operationId": "replaceItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the item to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The item object",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/journal-codes": {
      "post": {
        "summary": "Create a journal code",
        "operationId": "createJournalCode",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalCodesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/journalCodesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The journal-code object",
            "required": true
          }
        ],
        "tags": [
          "Journal Codes"
        ]
      },
      "get": {
        "summary": "Search for journal codes",
        "operationId": "getJournalCodes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/journalCodesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Journal Codes"
        ]
      }
    },
    "/journal-codes/{id}": {
      "patch": {
        "summary": "Update a defined journal code associated with a given id",
        "operationId": "updateJournalCodeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalCodesPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the journal codes to update into the finance system.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/journalCodesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The journal-code object",
            "required": true
          }
        ],
        "tags": [
          "Journal Codes"
        ]
      },
      "get": {
        "summary": "Retrieve a defined journal code associated with a given id",
        "operationId": "getJournalCodeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalCodesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the journal code to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Journal Codes"
        ]
      }
    },
    "/journal-entries": {
      "post": {
        "summary": "Create a journal-entry",
        "operationId": "createJournalEntry",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalEntriesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/journalEntriesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The journal-entry object",
            "required": true
          }
        ],
        "tags": [
          "Journal Entries"
        ]
      },
      "get": {
        "summary": "Search for journal entries",
        "operationId": "getJournalEntries",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/journalEntriesGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Journal Entries"
        ]
      }
    },
    "/journal-entries/{id}": {
      "patch": {
        "summary": "Update a defined journal entry associated with a given id",
        "operationId": "updateJournalEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalEntriesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the journal entry to update from the finance system.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/journalEntriesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Journal Entries"
        ]
      },
      "get": {
        "summary": "Retrieve a defined journal entry associated with a given id",
        "operationId": "getJournalEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/journalEntriesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the journal entry to retrieve from the finance system.",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Journal Entries"
        ]
      },
      "delete": {
        "summary": "Delete a defined journal entry associated with a given id",
        "operationId": "deleteJournalEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the journal entry to delete from the finance system",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Journal Entries"
        ]
      }
    },
    "/ledger-accounts": {
      "post": {
        "summary": "Create a ledger-account",
        "operationId": "createLedgerAccount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ledgeraccountsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ledgeraccountsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The ledger-account object",
            "required": true
          }
        ],
        "tags": [
          "Ledger Accounts"
        ]
      },
      "get": {
        "summary": "Search for ledger-accounts",
        "operationId": "getLedgerAccounts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ledgerAccountsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Ledger Accounts"
        ]
      }
    },
    "/ledger-accounts/{id}": {
      "get": {
        "summary": "Retrieve a ledger-account",
        "operationId": "getLedgerAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ledgeraccountsGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the ledger account to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Ledger Accounts"
        ]
      },
      "delete": {
        "summary": "Delete a ledger-account",
        "operationId": "deleteLedgerAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the ledger-account",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Ledger Accounts"
        ]
      },
      "put": {
        "summary": "Update a ledger-account",
        "operationId": "replaceLedgerAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/ledgerAccountsPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the ledger account to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/ledgeraccountsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The ledger-account object",
            "required": true
          }
        ],
        "tags": [
          "Ledger Accounts"
        ]
      }
    },
    "/me": {
      "get": {
        "summary": "Retrieve user information",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/meGetRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Me"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/payment-methods": {
      "post": {
        "summary": "Create a payment method ",
        "operationId": "createPaymentMethod",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentMethodsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentMethodsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The payment-method object",
            "required": true
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      },
      "get": {
        "summary": "Search for payment methods",
        "operationId": "getPaymentMethods",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentMethodsGetAll"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2020-01-01T02:18:12-08:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/payment-methods/{id}": {
      "get": {
        "summary": "Retrieve a defined payment method associated with a given id",
        "operationId": "getPaymentMethodById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentMethodsGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the payment method to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      },
      "put": {
        "summary": "Update a defined payment method associated with a given id ",
        "operationId": "replacePaymentMethodById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentMethodsPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the payment method to update in the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentMethodsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The payment-method object",
            "required": true
          }
        ],
        "tags": [
          "Payment Methods"
        ]
      }
    },
    "/payments": {
      "post": {
        "summary": "Create a payment",
        "operationId": "createPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The payment object",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Search for payments",
        "operationId": "getPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/paymentsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=TxnDate='2020-01-03'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "summary": "Retrieve a payment",
        "operationId": "getPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the payment to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "summary": "Delete a payment",
        "operationId": "deletePaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the payment",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "put": {
        "summary": "Update a payment",
        "operationId": "replacePaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the payment to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The payment object",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "Ping"
        ]
      }
    },
    "/preferences": {
      "get": {
        "summary": "Search for preferences",
        "operationId": "getPreferences",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/preferencesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Preferences"
        ]
      }
    },
    "/preferences/{id}": {
      "put": {
        "summary": "Retrieve a defined preference associated with a given id",
        "operationId": "replacePreferenceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/preferencesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the preference to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/preferencesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The preference body",
            "required": true
          }
        ],
        "tags": [
          "Preferences"
        ]
      }
    },
    "/purchase-orders": {
      "post": {
        "summary": "Create a purchase order",
        "operationId": "createPurchaseOrder",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The purchase order object",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ]
      },
      "get": {
        "summary": "Search for purchase orders",
        "operationId": "getPurchaseOrders",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchaseOrdersGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Purchase Orders"
        ]
      }
    },
    "/purchase-orders/{id}": {
      "patch": {
        "summary": "Retrieve a defined purchase order associated with a given id",
        "operationId": "updatePurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the purchase order to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The purchase order object",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ]
      },
      "get": {
        "summary": "Retrieve a defined purchase order associated with a given id",
        "operationId": "getPurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the purchase order to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ]
      },
      "delete": {
        "summary": "Delete a purchase order associated with a given id",
        "operationId": "deletePurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the purchase order",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ]
      }
    },
    "/purchases": {
      "post": {
        "summary": "Create a purchase",
        "operationId": "createPurchase",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchasesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchasesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The purchase object",
            "required": true
          }
        ],
        "tags": [
          "Purchases"
        ]
      },
      "get": {
        "summary": "Search for purchases",
        "operationId": "getPurchases",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchasesGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Purchases"
        ]
      }
    },
    "/purchases/{id}": {
      "patch": {
        "summary": "Retrieve a defined purchase associated with a given id",
        "operationId": "updatePurchaseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchasesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the purchase to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchasesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The purchase object",
            "required": true
          }
        ],
        "tags": [
          "Purchases"
        ]
      },
      "get": {
        "summary": "Retrieve a defined purchase associated with a given id",
        "operationId": "getPurchaseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchasesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the purchase to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Purchases"
        ]
      },
      "delete": {
        "summary": "Delete a purchase associated with a given id",
        "operationId": "deletePurchaseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the purchase",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The Version of the number",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Purchases"
        ]
      }
    },
    "/refund-receipts": {
      "post": {
        "summary": "Create a refund receipt",
        "operationId": "createRefundReceipt",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/refundReceiptsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/refundReceiptsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The refund receipt object",
            "required": true
          }
        ],
        "tags": [
          "Refund Receipts"
        ]
      },
      "get": {
        "summary": "Search for refund receipts",
        "operationId": "getRefundReceipts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/refundReceiptsGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Refund Receipts"
        ]
      }
    },
    "/refund-receipts/{id}": {
      "patch": {
        "summary": "Retrieve a defined refund receipt associated with a given id",
        "operationId": "updateRefundReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/refundReceiptsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the refund receipt to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/refundReceiptsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The refund receipt object",
            "required": true
          }
        ],
        "tags": [
          "Refund Receipts"
        ]
      },
      "get": {
        "summary": "Retrieve a defined refund receipt associated with a given id",
        "operationId": "getRefundReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/refundReceiptsGetBYId"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the refund receipt to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Refund Receipts"
        ]
      },
      "delete": {
        "summary": "Delete a refund receipt associated with a given id",
        "operationId": "deleteRefundReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the refund receipt",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Refund Receipts"
        ]
      }
    },
    "/sales-receipts": {
      "post": {
        "summary": "Create a sales receipt",
        "operationId": "createSalesReceipt",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesReceiptsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesReceiptsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The sales receipt object body",
            "required": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      },
      "get": {
        "summary": "Search for sales receipts",
        "operationId": "getSalesReceipts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/salesReceiptsGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      }
    },
    "/sales-receipts/{id}": {
      "patch": {
        "summary": "Retrieve a defined sales receipt associated with a given id",
        "operationId": "updateSalesReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesReceiptsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the sales receipt to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesReceiptsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The sales receipt object",
            "required": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      },
      "get": {
        "summary": "Retrieve a defined sales receipt associated with a given id",
        "operationId": "getSalesReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesReceiptsGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the sales receipt to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      },
      "delete": {
        "summary": "Delete a sales receipt associated with a given id",
        "operationId": "deleteSalesReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the sales receipt",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Receipts"
        ]
      }
    },
    "/tax-agencies": {
      "post": {
        "summary": "Creates a tax agency",
        "operationId": "createTaxAgency",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxAgenciesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxAgenciesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The tax agency object",
            "required": true
          }
        ],
        "tags": [
          "Tax Agencies"
        ]
      },
      "get": {
        "summary": "Search for tax agencies",
        "operationId": "getTaxAgencies",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxAgenciesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be where=MetaData.LastUpdatedTime='2017-08-23T12:47:47-07:00'. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tax Agencies"
        ]
      }
    },
    "/tax-agencies/{id}": {
      "get": {
        "summary": "Retrieve a defined tax agency associated with a given id",
        "operationId": "getTaxAgencyById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxAgenciesObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the tax-agency to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Tax Agencies"
        ]
      }
    },
    "/tax-codes": {
      "get": {
        "summary": "Search for tax codes",
        "operationId": "getTaxCodes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxCodesGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tax Codes"
        ]
      }
    },
    "/tax-codes/{id}": {
      "get": {
        "summary": "Retrieve a defined tax code associated with a given id",
        "operationId": "getTaxCodeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxCodesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the tax code to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Tax Codes"
        ]
      }
    },
    "/tax-rates": {
      "get": {
        "summary": "Search for tax rates",
        "operationId": "getTaxRates",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxRatesGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tax Rates"
        ]
      }
    },
    "/tax-rates/{id}": {
      "get": {
        "summary": "Retrieve a defined tax rate associated with a given id",
        "operationId": "getTaxRateById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxRatesGetByID"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the tax rate to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Tax Rates"
        ]
      }
    },
    "/tax-service": {
      "post": {
        "summary": "Create a tax service into the finance system",
        "operationId": "createTaxService",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxServicePostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxServicePostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The tax service object body",
            "required": true
          }
        ],
        "tags": [
          "Tax Service"
        ]
      }
    },
    "/time-activities": {
      "post": {
        "summary": "Create a time activity",
        "operationId": "createTimeActivity",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivitiesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeActivitiesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time activity object body ",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ]
      },
      "get": {
        "summary": "Search for time activities",
        "operationId": "getTimeActivities",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/timeActivitiesGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Time Activities"
        ]
      }
    },
    "/time-activities/{id}": {
      "get": {
        "summary": "Retrieve a defined time activity associated with a given id",
        "operationId": "getTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivitiesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the time activity to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ]
      },
      "delete": {
        "summary": "Delete a time activity associated with a given id from the finance system",
        "operationId": "deleteTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the time activity",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Time Activities"
        ]
      },
      "put": {
        "summary": "Retrieve a defined time activity associated with a given id",
        "operationId": "replaceTimeActivityById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeActivities"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the time activity to update in the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeActivitiesPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time activity object body",
            "required": true
          }
        ],
        "tags": [
          "Time Activities"
        ]
      }
    },
    "/transfers": {
      "post": {
        "summary": "Create a transfer",
        "operationId": "createTransfer",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transfersPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/transfersPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The transfer object body",
            "required": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      },
      "get": {
        "summary": "Search for transfers",
        "operationId": "getTransfers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transfersGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/transfers/{id}": {
      "patch": {
        "summary": "Retrieve a defined transfer associated with a given id",
        "operationId": "updateTransferById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transfersPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the transfer to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/transfersPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The transfer object body",
            "required": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      },
      "get": {
        "summary": "Retrieve a defined transfer associated with a given id",
        "operationId": "getTransferById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transfersGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the transfer to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Transfers"
        ]
      },
      "delete": {
        "summary": "Delete a transfer associated with a given id",
        "operationId": "deleteTransferById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the transfer",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Transfers"
        ]
      }
    },
    "/vendor-credits": {
      "post": {
        "summary": "Create a vendor credit into the finance system",
        "operationId": "createVendorCredit",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorCreditsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendorCreditsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor credit object body",
            "required": true
          }
        ],
        "tags": [
          "Vendor Credits"
        ]
      },
      "get": {
        "summary": "Search for vendor credits",
        "operationId": "getVendorCredits",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vendorCreditsGetAllObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after ‘Jan 15, 2014’, the search expression will be where=MetaData.LastUpdatedTime=‘2020-01-01T02:18:12-08:00’. When this parameter is omitted, all accounts are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Vendor Credits"
        ]
      }
    },
    "/vendor-credits/{id}": {
      "patch": {
        "summary": "Update a defined vendor credit associated with a given id",
        "operationId": "updateVendorCreditById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorCreditsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the vendor credit to update from the finance system",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendorCreditsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor credit object body",
            "required": true
          }
        ],
        "tags": [
          "Vendor Credits"
        ]
      },
      "get": {
        "summary": "Retrieve a defined vendor credit associated with a given id",
        "operationId": "getVendorCreditById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the vendor credit to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendor Credits"
        ]
      },
      "delete": {
        "summary": "Delete a vendor credit associated with a given id",
        "operationId": "deleteVendorCreditById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the vendor credit",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "SyncToken",
            "description": "The version number of the object",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Vendor Credits"
        ]
      }
    },
    "/vendors": {
      "post": {
        "summary": "Create a vendor",
        "operationId": "createVendor",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendorsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor object body",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Search for vendors",
        "operationId": "getVendors",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vendorsObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/vendors/{id}": {
      "patch": {
        "summary": "Update a vendor",
        "operationId": "updateVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the vendor",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendorsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The vendor object body",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Retrieve a vendor",
        "operationId": "getVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendorsObject"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the vendor to retrieve from the finance system",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "delete": {
        "summary": "Delete a vendor",
        "operationId": "deleteVendorById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id of the vendor",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      }
    }
  },
  "host": "hostname",
  "schemes": [
    "https"
  ],
  "definitions": {
    "creditMemosPutReqTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "journalEntriesPatchResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "nov portion of rider insurance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesPatchResLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "creditMemosPutResTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "taxRatesGetAllAgencyRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "AgencyRef",
      "type": "object"
    },
    "billPaymentsPutResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "vendorsObjectDefaultTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "refundReceiptsPatchResTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "refundReceiptsPatchReqTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "timeActivitiesPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T11:55:25-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-18T13:45:12-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "vendorCreditsGetAllLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "vendorCreditsPatchReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/vendorCreditsPatchReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "billPaymentsPostReqLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "21371",
          "x-required": true
        },
        "TxnLineId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "BillPaymentCheck",
          "x-required": true
        }
      },
      "title": "LinkedTxn",
      "type": "object",
      "required": [
        "TxnId",
        "TxnType"
      ]
    },
    "depositsPostResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsPostResLineDepositLineDetail"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "DepositLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "salesReceiptsPatchRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/salesReceiptsPatchResBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/salesReceiptsPatchResBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/salesReceiptsPatchResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPatchResCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/salesReceiptsPatchResCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/salesReceiptsPatchResCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/salesReceiptsPatchResDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1014"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "47"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPatchResLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPatchResLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/salesReceiptsPatchResMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-19"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/salesReceiptsPatchResTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "salesReceiptsPatchRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPatchReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/salesReceiptsPatchReqBillAddr"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPatchReqCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/salesReceiptsPatchReqCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/salesReceiptsPatchReqCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/salesReceiptsPatchReqDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1003"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "11"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/salesReceiptsPatchReqMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/salesReceiptsPatchReqPaymentMethodRef"
        },
        "PaymentRefNum": {
          "type": "string",
          "x-samplevalue": "10264"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 337.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-14"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/salesReceiptsPatchReqTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Line",
        "CustomerRef"
      ],
      "title": "salesReceiptsPatchReq",
      "type": "object"
    },
    "paymentsObjectLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 55
        },
        "LineEx": {
          "$ref": "#/definitions/paymentsObjectLineLineEx"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/paymentsObjectLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "billPaymentsPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "paymentsObjectCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Red Rock Diner"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "20"
        }
      },
      "type": "object"
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "vendorsObjectPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "purchaseOrdersPostResAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "purchasesGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "salesReceiptsPatchResLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Gardening"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "6"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "invoicesObjectBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "95"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Russ Sonnenschein"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "refundReceiptsPatchReqCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Updated customer memo"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "purchasesPatchResPurchaseEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/purchasesPatchResPurchaseExAny"
          },
          "type": "array"
        }
      },
      "title": "PurchaseEx",
      "type": "object"
    },
    "refundReceiptsPatchResCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "companyInfosPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-samplevalue": "(650)944-4444"
        }
      },
      "title": "PrimaryPhone",
      "type": "object"
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "vendorCreditsPostReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/vendorCreditsPostReqLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/vendorCreditsPostReqLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/vendorCreditsPostReqLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "preferencesVendorAndPurchasesPrefsPOCustomField": {
      "properties": {
        "CustomField": {
          "items": {
            "$ref": "#/definitions/preferencesVendorAndPurchasesPrefsPOCustomFieldCustomField"
          },
          "type": "array"
        }
      },
      "title": "POCustomField",
      "type": "object"
    },
    "changesGetEstimateTxnTaxDetailTaxLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 26.82
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "TaxLineDetail"
        },
        "TaxLineDetail": {
          "$ref": "#/definitions/changesGetEstimateTxnTaxDetailTaxLineTaxLineDetail"
        }
      },
      "title": "TaxLine",
      "type": "object"
    },
    "invoicesPostReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "24"
        }
      },
      "type": "object"
    },
    "paymentsLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].invoice.id",
          "x-samplevalue": "70"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Invoice"
        }
      },
      "type": "object"
    },
    "attachments": {
      "items": {
        "$ref": "#/definitions/attachmentsObject"
      },
      "type": "array"
    },
    "creditMemosGetAllCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "transfersPostReq": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "120.00"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersPostReqFromAccountRef"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersPostReqToAccountRef"
        }
      },
      "required": [
        "Amount",
        "FromAccountRef",
        "ToAccountRef"
      ],
      "title": "transfersPostReq",
      "type": "object"
    },
    "customersShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "109"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "invoicesObjectShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "25"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94303"
        }
      },
      "type": "object"
    },
    "transfersPostRes": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120
        },
        "CurrencyRef": {
          "$ref": "#/definitions/transfersPostResCurrencyRef"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersPostResFromAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "182"
        },
        "MetaData": {
          "$ref": "#/definitions/transfersPostResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersPostResToAccountRef"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "transfersPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "invoicesPutReqTxnTaxDetailTaxLineTaxLineDetail": {
      "properties": {
        "NetAmountTaxable": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 335.25
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "TaxPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxRateRef": {
          "$ref": "#/definitions/invoicesPutReqTxnTaxDetailTaxLineTaxLineDetailTaxRateRef"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllObject": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE",
            "<",
            ">",
            "<=",
            ">="
          ]
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "191",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE",
            "<",
            ">",
            "<=",
            ">="
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersGetAllMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersGetAllShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE",
            "<",
            ">",
            "<=",
            ">="
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE",
            "<",
            ">",
            "<=",
            ">="
          ]
        },
        "VendorAddr": {
          "$ref": "#/definitions/purchaseOrdersGetAllVendorAddr"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPatchReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "creditMemosGetByIdTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "paymentsPutReqLineLineEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/paymentsPutReqLineLineExAny"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "paymentsDepositToAccountRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "bankAccount",
          "x-samplevalue": "4"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "depositsPostResLineDepositLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Unapplied Cash Payment Income"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "87"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "billsPostReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].account",
          "x-samplevalue": "64"
        }
      },
      "type": "object"
    },
    "billPaymentsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2021-01-06T23:31:10-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2021-01-06T23:31:10-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "departments": {
      "items": {
        "$ref": "#/definitions/departmentsObject"
      },
      "type": "array"
    },
    "creditMemosPutReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "paymentsLineLineEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/paymentsLineLineExAny"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "preferences": {
      "items": {
        "$ref": "#/definitions/preferencesObject"
      },
      "type": "array"
    },
    "billsLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Job Expenses:Job Materials:Decks and Patios"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].account",
          "x-samplevalue": "64"
        }
      },
      "type": "object"
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "employeesPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "BillableTime": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Bill Miller"
        },
        "FamilyName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Miller"
        },
        "GivenName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Bill"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "71"
        },
        "MetaData": {
          "$ref": "#/definitions/employeesPutReqMetaData"
        },
        "PrimaryAddr": {
          "$ref": "#/definitions/employeesPutReqPrimaryAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/employeesPutReqPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Bill Miller"
        },
        "SSN": {
          "type": "string",
          "x-alias": "ssn",
          "x-samplevalue": "XXX-XX-XXXX"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "PrimaryAddr"
      ],
      "type": "object"
    },
    "salesReceiptsPatchResBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "321 Channing"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "Palo Alto, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "transfersGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "vendorCreditsPatchReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "billPaymentsGetAll": {
      "properties": {
        "CreditCardPayment": {
          "$ref": "#/definitions/billPaymentsGetAllCreditCardPayment"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billPaymentsGetAllCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "6",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "77",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billPaymentsGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/billPaymentsGetAllMetaData"
        },
        "PayType": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 114.09,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-22",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsGetAllVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "creditMemosPutResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T15:35:07-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T15:35:07-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "employeesPostReqPrimaryAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "116"
        },
        "Line1": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "45 N. Elm Street"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "address.postalCode",
          "x-samplevalue": "93242"
        }
      },
      "type": "object"
    },
    "invoicesShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "25"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94303"
        }
      },
      "type": "object"
    },
    "vendorsPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "vendorsPostReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "billPaymentsGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetByIdLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "changesGetEstimateLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "transfersPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "vendorCreditsPostResLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "purchasesPostRes": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPostResAccountRef"
        },
        "Credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchasesPostResCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "367"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchasesPostResMetaData"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "CreditCard"
        },
        "PurchaseEx": {
          "$ref": "#/definitions/purchasesPostResPurchaseEx"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-01-02"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Id"
      ],
      "title": "purchasesPostRes",
      "type": "object"
    },
    "purchasesPostReq": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPostReqAccountRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesPostReqLine"
          },
          "type": "array"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "CreditCard"
        }
      },
      "required": [
        "Line",
        "PaymentType",
        "AccountRef"
      ],
      "title": "purchasesPostReq",
      "type": "object"
    },
    "refundReceiptsPostRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/refundReceiptsPostResBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/refundReceiptsPostResBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/refundReceiptsPostResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPostResCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/refundReceiptsPostResCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/refundReceiptsPostResCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsPostResDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1020"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/refundReceiptsPostResMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/refundReceiptsPostResPaymentMethodRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-21"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/refundReceiptsPostResTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "refundReceiptsPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsPostReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/refundReceiptsPostReqCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsPostReqDepositToAccountRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPostReqLine"
          },
          "type": "array"
        }
      },
      "required": [
        "Line",
        "DepositToAccountRef"
      ],
      "title": "refundReceiptsPostReq",
      "type": "object"
    },
    "taxCodesGetAllSalesTaxRateListTaxRateDetailTaxRateRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "AZ State tax"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "TaxRateRef",
      "type": "object"
    },
    "purchasesPatchReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPatchReqLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchasesPatchReqLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "salesReceiptsPostReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsPostReqLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsPostReqLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "purchaseOrdersGetByIdAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "preferencesPutReq": {
      "properties": {
        "AccountingInfoPrefs": {
          "$ref": "#/definitions/preferencesAccountingInfoPrefs"
        },
        "CurrencyPrefs": {
          "$ref": "#/definitions/preferencesCurrencyPrefs"
        },
        "EmailMessagesPrefs": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefs"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/preferencesMetaData"
        },
        "OtherPrefs": {
          "$ref": "#/definitions/preferencesOtherPrefs"
        },
        "ProductAndServicesPrefs": {
          "$ref": "#/definitions/preferencesProductAndServicesPrefs"
        },
        "ReportPrefs": {
          "$ref": "#/definitions/preferencesReportPrefs"
        },
        "SalesFormsPrefs": {
          "$ref": "#/definitions/preferencesSalesFormsPrefs"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "6"
        },
        "TaxPrefs": {
          "$ref": "#/definitions/preferencesTaxPrefs"
        },
        "TimeTrackingPrefs": {
          "$ref": "#/definitions/preferencesTimeTrackingPrefs"
        },
        "VendorAndPurchasesPrefs": {
          "$ref": "#/definitions/preferencesVendorAndPurchasesPrefs"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken"
      ],
      "title": "preferences",
      "type": "object"
    },
    "purchaseOrdersGetById": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersGetByIdAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersGetByIdCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "191"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersGetByIdMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersGetByIdShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "VendorAddr": {
          "$ref": "#/definitions/purchaseOrdersGetByIdVendorAddr"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersGetByIdVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "paymentsPutReq": {
      "properties": {
        "CustomerRef": {
          "$ref": "#/definitions/paymentsPutReqCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/paymentsPutReqDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "163"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/paymentsPutReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentsPutReqMetaData"
        },
        "ProcessPayment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 65
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-01-16"
        },
        "UnappliedAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "TotalAmt",
        "CustomerRef"
      ],
      "type": "object"
    },
    "invoicesBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "95"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Russ Sonnenschein"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        }
      },
      "type": "object"
    },
    "paymentsPostReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Red Rock Diner"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "20"
        }
      },
      "type": "object"
    },
    "transfersPatchRes": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 600
        },
        "CurrencyRef": {
          "$ref": "#/definitions/transfersPatchResCurrencyRef"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersPatchResFromAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "239"
        },
        "MetaData": {
          "$ref": "#/definitions/transfersPatchResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersPatchResToAccountRef"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-31"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Amount",
        "ToAccountRef",
        "FromAccountRef"
      ],
      "title": "transfersPatchRes",
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "invoicesObjectLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": [
            {
              "alias": "parentDocumentNumber",
              "path": "LinkedTxn[*].TxnId | [0]"
            }
          ],
          "x-samplevalue": "100"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Estimate"
        }
      },
      "type": "object"
    },
    "journalEntriesGetByIdLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "nov portion of rider insurance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesGetByIdLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "customersPostReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "invoicesSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "depositsPostResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "vendorCreditsPatchResLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "taxCodesGetByIdSalesTaxRateListTaxRateDetailTaxRateRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "AZ State tax"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "TaxRateRef",
      "type": "object"
    },
    "depositsPostReqLineDepositLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Unapplied Cash Payment Income"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "87"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "salesReceiptsPostReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "bulkDownloadRequestQuery": {
      "properties": {
        "anyKey": {
          "type": "string",
          "x-samplevalue": "anyValue"
        }
      },
      "title": "query",
      "type": "object"
    },
    "refundReceiptsPatchReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "employeesPutReqPrimaryAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "116"
        },
        "Line1": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "45 N. Elm Street"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "address.postalCode",
          "x-samplevalue": "93242"
        }
      },
      "type": "object"
    },
    "estimatesCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchasesGetAllLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "itemsExpenseAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "50100 Cost of Goods Sold"
        },
        "value": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "79"
        }
      },
      "type": "object"
    },
    "taxAgenciesPostReq": {
      "properties": {
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Arizona Dept. of Revenue"
        }
      },
      "required": [
        "DisplayName"
      ],
      "title": "taxAgencies",
      "type": "object"
    },
    "paymentMethodsGetAll": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/paymentMethodsGetAllMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Cash",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "NON_CREDIT_CARD"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "paymentMethodsGetAll",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsPatchReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "purchaseOrdersPostResLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "126"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "purchasesPatchReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesPatchReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "vendorCreditsPatchResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Books by Bessie"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "30"
        }
      },
      "title": "VendorRef",
      "type": "object"
    },
    "purchaseOrdersPostReqShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Menlo Park, CA  94305"
        }
      },
      "type": "object"
    },
    "creditMemosPutResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosPutResLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "departmentsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2013-08-13T11:49:31-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2013-08-13T11:49:31-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "changesGetCustomerFax": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-samplevalue": "(520) 555-7894"
        }
      },
      "title": "Fax",
      "type": "object"
    },
    "taxCodesGetAllObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Tucson",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Hidden": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "3",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/taxCodesGetAllMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Tucson",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SalesTaxRateList": {
          "$ref": "#/definitions/taxCodesGetAllSalesTaxRateList"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TaxGroup": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "taxCodesGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "classesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T06:24:04-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T06:24:04-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchaseOrdersPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "transfersPatchReq": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 600
        },
        "CurrencyRef": {
          "$ref": "#/definitions/transfersPatchReqCurrencyRef"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersPatchReqFromAccountRef"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersPatchReqToAccountRef"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-31"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Amount",
        "ToAccountRef",
        "FromAccountRef"
      ],
      "title": "transfersPatchReq",
      "type": "object"
    },
    "companyInfoCustomerCommunicationAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Denver"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CO"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4155"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "3858 Walnut Street 235"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "80205"
        }
      },
      "title": "CustomerCommunicationAddr",
      "type": "object"
    },
    "paymentsPostReqLineLineExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "txnId"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "70"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "employeesObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "BillableTime": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Bill Miller",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "FamilyName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Miller",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "GivenName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Bill",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "71"
        },
        "MetaData": {
          "$ref": "#/definitions/employeesMetaData"
        },
        "PrimaryAddr": {
          "$ref": "#/definitions/employeesPrimaryAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/employeesPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Bill Miller",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "SSN": {
          "type": "string",
          "x-alias": "ssn",
          "x-samplevalue": "XXX-XX-XXXX"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "creditMemosGetByIdCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "refundReceiptsPatchReqDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "preferencesCurrencyPrefsHomeCurrency": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "HomeCurrency",
      "type": "object"
    },
    "preferencesVendorAndPurchasesPrefs": {
      "properties": {
        "BillableExpenseTracking": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "POCustomField": {
          "items": {
            "$ref": "#/definitions/preferencesVendorAndPurchasesPrefsPOCustomField"
          },
          "type": "array"
        },
        "TrackingByCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "VendorAndPurchasesPrefs",
      "type": "object"
    },
    "customersObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalOutstandingAmount",
          "x-samplevalue": 274,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "BalanceWithJobs": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 274
        },
        "BillAddr": {
          "$ref": "#/definitions/customersBillAddr"
        },
        "BillWithParent": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "DefaultTaxCodeRef": {
          "$ref": "#/definitions/customersDefaultTaxCodeRef"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "1"
        },
        "Job": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "MetaData": {
          "$ref": "#/definitions/customersMetaData"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "Notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Note added via Update operation."
        },
        "PreferredDeliveryMethod": {
          "type": "string",
          "x-samplevalue": "Print"
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/customersPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/customersPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "ShipAddr": {
          "$ref": "#/definitions/customersShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "purchasesPatchReqAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Visa"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "42"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "budgetsGetAllObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "BudgetDetail": {
          "items": {
            "$ref": "#/definitions/budgetsGetAllBudgetDetail"
          },
          "type": "array"
        },
        "BudgetEntryType": {
          "type": "string",
          "x-samplevalue": "Monthly"
        },
        "BudgetType": {
          "type": "string",
          "x-samplevalue": "ProfitAndLoss"
        },
        "EndDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-31"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/budgetsGetAllMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Sandbox Budget"
        },
        "StartDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-01-01"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "budgetsGetAll",
      "type": "object"
    },
    "changesGetEstimate": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "BillAddr": {
          "$ref": "#/definitions/changesGetEstimateBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/changesGetEstimateBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/changesGetEstimateCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/changesGetEstimateCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/changesGetEstimateCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/changesGetEstimateCustomerRef"
        },
        "DeliveryInfo": {
          "$ref": "#/definitions/changesGetEstimateDeliveryInfo"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1001"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NeedToSend"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "48"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/changesGetEstimateLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/changesGetEstimateLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/changesGetEstimateMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "ShipAddr": {
          "$ref": "#/definitions/changesGetEstimateShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1005
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-19"
        },
        "TxnStatus": {
          "type": "string",
          "x-samplevalue": "Closed"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/changesGetEstimateTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "Estimate",
      "type": "object"
    },
    "taxRatesGetByID": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AgencyRef": {
          "$ref": "#/definitions/taxRatesGetByIDAgencyRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Sales Tax"
        },
        "DisplayType": {
          "type": "string",
          "x-samplevalue": "ReadOnly"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/taxRatesGetByIDMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "AZ State tax"
        },
        "RateValue": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 7.1
        },
        "SpecialTaxType": {
          "type": "string",
          "x-samplevalue": "NONE"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "taxRatesGetByID",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "customersPostReqBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "invoicesPutReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "102"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "purchasesGetByIdAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Visa"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "42"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "purchasesGetAllAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "salesReceiptsPatchResLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "taxCodesGetAllSalesTaxRateListTaxRateDetail": {
      "properties": {
        "TaxOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxRateRef": {
          "$ref": "#/definitions/taxCodesGetAllSalesTaxRateListTaxRateDetailTaxRateRef"
        },
        "TaxTypeApplicable": {
          "type": "string",
          "x-samplevalue": "TaxOnAmount"
        }
      },
      "title": "TaxRateDetail",
      "type": "object"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "changesGetCustomerCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "taxCodesGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "billsLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/billsLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/billsLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/billsLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "type": "object"
    },
    "invoicesObjectCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "24"
        }
      },
      "type": "object"
    },
    "changesGetEstimateDeliveryInfo": {
      "properties": {
        "DeliveryType": {
          "type": "string",
          "x-samplevalue": "Email"
        }
      },
      "title": "DeliveryInfo",
      "type": "object"
    },
    "itemsObjectExpenseAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "50100 Cost of Goods Sold"
        },
        "value": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "79"
        }
      },
      "type": "object"
    },
    "preferencesVendorAndPurchasesPrefsPOCustomFieldCustomField": {
      "properties": {
        "BooleanValue": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "PurchasePrefs.PurchaseCustomName2"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "Sales Rep"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "journalEntriesPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T21:58:29-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T21:58:29-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "taxCodesGetByIdSalesTaxRateList": {
      "properties": {
        "TaxRateDetail": {
          "items": {
            "$ref": "#/definitions/taxCodesGetByIdSalesTaxRateListTaxRateDetail"
          },
          "type": "array"
        }
      },
      "title": "SalesTaxRateList",
      "type": "object"
    },
    "purchasesGetAllPurchaseExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "TxnType"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "value",
      "type": "object"
    },
    "vendorCreditsPatchResLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/vendorCreditsPatchResLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "billPaymentsPostResCheckPayment": {
      "properties": {
        "BankAccountRef": {
          "$ref": "#/definitions/billPaymentsPostResCheckPaymentBankAccountRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        }
      },
      "title": "CheckPayment",
      "type": "object"
    },
    "refundReceiptsGetAllLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Refund - Pest control was ineffective"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsGetAllLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "billsObjectAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "changesGetEstimateLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "5"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "refundReceiptsPatchResLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/refundReceiptsPatchResLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsPatchResLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/refundReceiptsPatchResLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "ledgeraccountsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "customersMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "invoicesObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        }
      },
      "type": "object"
    },
    "journalEntriesGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 25000
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Opening Balance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesGetAllLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "budgetsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-14T13:59:45-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-14T13:59:59-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "invoicesObjectCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "102"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "preferencesCurrencyPrefs": {
      "properties": {
        "HomeCurrency": {
          "$ref": "#/definitions/preferencesCurrencyPrefsHomeCurrency"
        },
        "MultiCurrencyEnabled": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "CurrencyPrefs",
      "type": "object"
    },
    "ping": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2019-12-18T21:21:03.109Z"
        },
        "endpoint": {
          "type": "string",
          "x-samplevalue": "quickbooks"
        },
        "valid": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "ping",
      "type": "object"
    },
    "purchaseOrdersGetByIdLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Fountain Pump"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersGetByIdLineItemBasedExpenseLineDetail"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "type": "object"
    },
    "ledgeraccountsGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "creditMemosPutResShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "99"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "purchaseOrdersPostResVendorAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "92"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Julie Norton"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "4528 Country Road"
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "type": "object"
    },
    "creditMemosPutResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "ledgeraccountsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "purchasesPatchReq": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPatchReqAccountRef"
        },
        "Credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchasesPatchReqCurrencyRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchasesPatchReqMetaData"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "CreditCard"
        },
        "PurchaseEx": {
          "$ref": "#/definitions/purchasesPatchReqPurchaseEx"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-01-02"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "Line",
        "PaymentType",
        "AccountRef"
      ],
      "title": "purchasesPatchReq",
      "type": "object"
    },
    "preferencesReportPrefs": {
      "properties": {
        "CalcAgingReportFromTxnDate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ReportBasis": {
          "type": "string",
          "x-samplevalue": "Accrual"
        }
      },
      "title": "ReportPrefs",
      "type": "object"
    },
    "timeActivitiesGetAllItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Lighting"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "invoicesLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "classesPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T06:24:04-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T06:24:04-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchasesPatchRes": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPatchResAccountRef"
        },
        "Credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchasesPatchResCurrencyRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesPatchResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchasesPatchResMetaData"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "CreditCard"
        },
        "PurchaseEx": {
          "$ref": "#/definitions/purchasesPatchResPurchaseEx"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-01-02"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "purchasesPatchRes",
      "type": "object"
    },
    "purchasesPostResLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Meals and Entertainment"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "13"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "classesPostReqParentRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "test"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "21"
        }
      },
      "title": "ParentRef",
      "type": "object"
    },
    "creditMemosPutResBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "98"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "journalCodesPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-10-30T11:06:19-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-10-30T11:06:19-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "vendorsObjectBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "creditMemosTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "depositsGetByIDCashBackAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "refundReceiptsGetBYIdCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "preferencesTaxPrefsTaxGroupCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "TaxGroupCodeRef",
      "type": "object"
    },
    "salesReceiptsPatchReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsPatchReqLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 4.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsPatchReqLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 75
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "refundReceiptsPatchReqLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Refund - Pest control was ineffective"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsPatchReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "purchaseOrdersPatchResLineItemBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "journalEntriesPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "purchaseOrdersPatchResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "vendorCreditsPatchResAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "33"
        }
      },
      "title": "APAccountRef",
      "type": "object"
    },
    "vendorCreditsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "invoicesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        }
      },
      "type": "object"
    },
    "creditMemosPutResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "employeesObjectPrimaryAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "116"
        },
        "Line1": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "45 N. Elm Street"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "address.postalCode",
          "x-samplevalue": "93242"
        }
      },
      "type": "object"
    },
    "exchangeRatesGetAllMetaData": {
      "properties": {
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2016-06-21T00:14:17-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "preferencesTaxPrefs": {
      "properties": {
        "TaxGroupCodeRef": {
          "$ref": "#/definitions/preferencesTaxPrefsTaxGroupCodeRef"
        },
        "UsingSalesTax": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "TaxPrefs",
      "type": "object"
    },
    "ledgerAccountsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "preferencesEmailMessagesPrefsEstimateMessage": {
      "properties": {
        "Message": {
          "type": "string",
          "x-samplevalue": "Please review the estimate below.  Feel free to contact us if you have any questions.\nWe look forward to working with you.\n\nSincerely,\nCraig's Design and Landscaping Services"
        },
        "Subject": {
          "type": "string",
          "x-samplevalue": "Estimate from Craig's Design and Landscaping Services"
        }
      },
      "title": "EstimateMessage",
      "type": "object"
    },
    "purchaseOrdersPatchResShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Menlo Park, CA  94305"
        },
        "Line5": {
          "type": "string",
          "x-samplevalue": "Jalopies@intuit.com (650) 555-8989"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        }
      },
      "type": "object"
    },
    "paymentsLineLineExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/paymentsLineLineExAnyValue"
        }
      },
      "type": "object"
    },
    "meGetRes": {
      "properties": {
        "email": {
          "type": "string",
          "x-samplevalue": "quickbooks+oauth2@cloud-elements.com"
        },
        "emailVerified": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "familyName": {
          "type": "string",
          "x-samplevalue": "Elements"
        },
        "givenName": {
          "type": "string",
          "x-samplevalue": "Cloud"
        },
        "phoneNumber": {
          "type": "string",
          "x-samplevalue": "+1 9199492530"
        },
        "phoneNumberVerified": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "sub": {
          "type": "string",
          "x-samplevalue": "adbfa5e2-83b9-4942-beb8-a6f9351a6ae6"
        }
      },
      "title": "meGetRes",
      "type": "object"
    },
    "vendorCreditsPostResAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "33"
        }
      },
      "title": "APAccountRef",
      "type": "object"
    },
    "billPaymentsGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:57:18-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T09:18:19-08:00"
        }
      },
      "type": "object"
    },
    "vendorCreditsPostReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Bank Charges"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "purchaseOrdersGetAllAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "invoicesObjectCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "type": "object"
    },
    "paymentsObject": {
      "properties": {
        "CustomerRef": {
          "$ref": "#/definitions/paymentsCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/paymentsDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "163"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/paymentsLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentsMetaData"
        },
        "ProcessPayment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 65,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-01-16",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UnappliedAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "purchaseOrdersGetAllLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllLineItemBasedExpenseLineDetailCustomerRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersGetAllLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "creditMemosPostRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "BillAddr": {
          "$ref": "#/definitions/creditMemosBillAddr"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/creditMemosCustomField"
          },
          "type": "array"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1039"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "147"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/creditMemosMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "ShipAddr": {
          "$ref": "#/definitions/creditMemosShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-31"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/creditMemosTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "creditMemosPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPatchResLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Landscaping Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "45"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "salesReceiptsGetAllCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "preferencesSalesFormsPrefsCustomField": {
      "properties": {
        "CustomField": {
          "items": {
            "$ref": "#/definitions/preferencesSalesFormsPrefsCustomFieldCustomField"
          },
          "type": "array"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "purchaseOrdersPostReqLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "creditMemosPutResLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosPutResLineSalesItemLineDetailItemRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/creditMemosPutResLineSalesItemLineDetailTaxCodeRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "taxCodesGetById": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Tucson"
        },
        "Hidden": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "3"
        },
        "MetaData": {
          "$ref": "#/definitions/taxCodesGetByIdMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Tucson"
        },
        "SalesTaxRateList": {
          "$ref": "#/definitions/taxCodesGetByIdSalesTaxRateList"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TaxGroup": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "taxCodesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "employeesPutReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "234-525-1234"
        }
      },
      "type": "object"
    },
    "paymentsPutReqLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].invoice.id",
          "x-samplevalue": "70"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Invoice"
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchReqTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "salesReceiptsGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Weekly Gardening Service"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsGetAllLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "vendorCreditsPostReq": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/vendorCreditsPostReqAPAccountRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/vendorCreditsPostReqLine"
          },
          "type": "array"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-23"
        },
        "VendorRef": {
          "$ref": "#/definitions/vendorCreditsPostReqVendorRef"
        }
      },
      "required": [
        "VendorRef",
        "Line"
      ],
      "title": "vendorCreditsPostReq",
      "type": "object"
    },
    "paymentMethodsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T00:32:31-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T00:32:31-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchasesGetByIdPurchaseExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "TxnType"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "value",
      "type": "object"
    },
    "vendorCreditsPostRes": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/vendorCreditsPostResAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "CurrencyRef": {
          "$ref": "#/definitions/vendorCreditsPostResCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "183"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/vendorCreditsPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/vendorCreditsPostResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-23"
        },
        "VendorRef": {
          "$ref": "#/definitions/vendorCreditsPostResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "vendorCreditsPostRes",
      "type": "object"
    },
    "salesReceiptsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "itemsObjectParentRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "parent.name",
          "x-samplevalue": "Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "parent.id",
          "x-samplevalue": "36"
        }
      },
      "type": "object"
    },
    "purchasesPostResPurchaseExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/purchasesPostResPurchaseExAnyValue"
        }
      },
      "title": "any",
      "type": "object"
    },
    "salesReceiptsPostResLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "employeesPostReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "234-525-1234"
        }
      },
      "type": "object"
    },
    "changesGetEstimateCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "customersPutReqBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchasesPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "preferencesTimeTrackingPrefs": {
      "properties": {
        "BillCustomers": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "MarkTimeEntriesBillable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "ShowBillRateToAll": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "UseServices": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "WorkWeekStartDate": {
          "type": "string",
          "x-samplevalue": "Monday"
        }
      },
      "title": "TimeTrackingPrefs",
      "type": "object"
    },
    "purchasesPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "changesGetCustomerPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-samplevalue": "(650) 555-4477"
        }
      },
      "title": "PrimaryPhone",
      "type": "object"
    },
    "depositsGetByIDLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "116"
        },
        "TxnLineId": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Payment"
        }
      },
      "title": "LinkedTxn",
      "type": "object"
    },
    "journalEntriesPostReqLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesPostReqLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Debit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "invoicesPutReqTxnTaxDetailTaxLineTaxLineDetailTaxRateRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": [
            {
              "alias": "taxRate",
              "path": "TxnTaxDetail.TaxLine[*].TaxLineDetail.TaxRateRef.value | [0]"
            }
          ],
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "preferencesObject": {
      "properties": {
        "AccountingInfoPrefs": {
          "$ref": "#/definitions/preferencesAccountingInfoPrefs"
        },
        "CurrencyPrefs": {
          "$ref": "#/definitions/preferencesCurrencyPrefs"
        },
        "EmailMessagesPrefs": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefs"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/preferencesMetaData"
        },
        "OtherPrefs": {
          "$ref": "#/definitions/preferencesOtherPrefs"
        },
        "ProductAndServicesPrefs": {
          "$ref": "#/definitions/preferencesProductAndServicesPrefs"
        },
        "ReportPrefs": {
          "$ref": "#/definitions/preferencesReportPrefs"
        },
        "SalesFormsPrefs": {
          "$ref": "#/definitions/preferencesSalesFormsPrefs"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "6"
        },
        "TaxPrefs": {
          "$ref": "#/definitions/preferencesTaxPrefs"
        },
        "TimeTrackingPrefs": {
          "$ref": "#/definitions/preferencesTimeTrackingPrefs"
        },
        "VendorAndPurchasesPrefs": {
          "$ref": "#/definitions/preferencesVendorAndPurchasesPrefs"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "preferences",
      "type": "object"
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchRes": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchResCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "191"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersPatchResMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersPatchResShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "journalEntriesPostReqJournalCodeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "test"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "cdcdw"
        }
      },
      "title": "JournalCodeRef",
      "type": "object"
    },
    "vendorCreditsPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "purchaseOrdersPatchReq": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersPatchReqMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersPatchReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken"
      ],
      "type": "object"
    },
    "creditMemosPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosPostReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "invoicesObjectTxnTaxDetail": {
      "properties": {
        "TaxLine": {
          "items": {
            "$ref": "#/definitions/invoicesObjectTxnTaxDetailTaxLine"
          },
          "type": "array"
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-alias": "taxAmount",
          "x-samplevalue": 26.82
        },
        "TxnTaxCodeRef": {
          "$ref": "#/definitions/invoicesObjectTxnTaxDetailTxnTaxCodeRef"
        }
      },
      "type": "object"
    },
    "billPaymentsPutResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:57:18-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T09:18:19-08:00"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "depositsPutResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "estimatesCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "salesReceiptsPatchResCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "salesReceiptsPatchReqCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "An updated customer memo."
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "customersPutReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "transfersPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "transfersPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "companyInfosMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-06-05T13:55:54-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-06T08:51:50-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "journalEntriesGetByIdLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesGetByIdLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Debit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "depositsPatchReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2100
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsPatchReqLineDepositLineDetail"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "DepositLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "salesReceiptsGetAllLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "62"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Deposit"
        }
      },
      "title": "LinkedTxn",
      "type": "object"
    },
    "billsSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "paymentMethodsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsPatchResLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "invoicesPostReqSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "creditMemosCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchasesPatchReqLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "companyInfoPatchReqLegalAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "LegalAddr",
      "type": "object"
    },
    "purchaseOrdersGetAllLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "126"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "paymentsObjectLineLineExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "txnId"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "70"
        }
      },
      "type": "object"
    },
    "creditMemosPostReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosPostReqCurrencyRef"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosPostReqCustomerRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosPostReqLine"
          },
          "type": "array"
        }
      },
      "required": [
        "Line",
        "CustomerRef"
      ],
      "title": "creditMemosPostReq",
      "type": "object"
    },
    "customersPostReqPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "depositsPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "test"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "12"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "creditMemosPutResLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "vendorCreditsPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:52:16-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "employeesPostReq": {
      "properties": {
        "FamilyName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Miller"
        },
        "GivenName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Bill"
        },
        "PrimaryAddr": {
          "$ref": "#/definitions/employeesPostReqPrimaryAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/employeesPostReqPrimaryPhone"
        },
        "SSN": {
          "type": "string",
          "x-alias": "ssn",
          "x-samplevalue": "XXX-XX-XXXX"
        }
      },
      "required": [
        "PrimaryAddr"
      ],
      "type": "object"
    },
    "invoicesTxnTaxDetailTaxLineTaxLineDetail": {
      "properties": {
        "NetAmountTaxable": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 335.25
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "TaxPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxRateRef": {
          "$ref": "#/definitions/invoicesTxnTaxDetailTaxLineTaxLineDetailTaxRateRef"
        }
      },
      "type": "object"
    },
    "invoicesPostReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "5"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetAllPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "refundReceiptsPatchReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "ledgeraccountsPutReq": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability"
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Description added during update."
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgeraccountsPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "Name"
      ],
      "type": "object"
    },
    "purchaseOrdersGetByIdLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersGetByIdLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersGetByIdLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "paymentMethodsPostReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Business Check"
        }
      },
      "required": [
        "Name"
      ],
      "title": "paymentMethodsPostReq",
      "type": "object"
    },
    "journalEntriesGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "refundReceiptsPatchResPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "paymentMethodsPostRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "8"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentMethodsPostResMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "xsad"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "NON_CREDIT_CARD"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "paymentMethodsPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "billPaymentsGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "taxCodesGetAllSalesTaxRateList": {
      "properties": {
        "TaxRateDetail": {
          "items": {
            "$ref": "#/definitions/taxCodesGetAllSalesTaxRateListTaxRateDetail"
          },
          "type": "array"
        }
      },
      "title": "SalesTaxRateList",
      "type": "object"
    },
    "itemsParentRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "parent.name",
          "x-samplevalue": "Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "parent.id",
          "x-samplevalue": "36"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostResTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "refundReceiptsPostReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "38"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "journalEntriesPatchRes": {
      "properties": {
        "Adjustment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesPatchResCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "180"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesPatchResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/journalEntriesPatchResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-29"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalEntriesPatchRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "invoicesObjectTxnTaxDetailTxnTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "journalEntriesPatchReq": {
      "properties": {
        "Adjustment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesPatchReqCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/journalEntriesPatchReqMetaData"
        },
        "PrivateNote": {
          "type": "string"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-19"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalEntriesPatchReq",
      "type": "object"
    },
    "purchaseOrdersPostReqLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "customersPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalOutstandingAmount",
          "x-samplevalue": 274
        },
        "BalanceWithJobs": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 274
        },
        "BillAddr": {
          "$ref": "#/definitions/customersPutReqBillAddr"
        },
        "BillWithParent": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "1"
        },
        "Job": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "MetaData": {
          "$ref": "#/definitions/customersPutReqMetaData"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "PreferredDeliveryMethod": {
          "type": "string",
          "x-samplevalue": "Print"
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/customersPutReqPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/customersPutReqPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "ShipAddr": {
          "$ref": "#/definitions/customersPutReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "DisplayName"
      ],
      "type": "object"
    },
    "refundReceiptsPostReqDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "transfersGetById": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120
        },
        "CurrencyRef": {
          "$ref": "#/definitions/transfersGetByIdCurrencyRef"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersGetByIdFromAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "182"
        },
        "MetaData": {
          "$ref": "#/definitions/transfersGetByIdMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersGetByIdToAccountRef"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "transfersGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPatchReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Dylan Sollfrank"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "6"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchasesPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "journalEntriesGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-20T10:04:24-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-20T10:04:24-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "journalCodesGetById": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Bedfordshire"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalCodesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "journalEntriesPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "nov portion of rider insurance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesPostReqLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "transfersPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-31T00:37:58-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-31T02:29:08-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "transfersPostReqToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "creditMemosPutReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "depositsPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T02:10:05-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T02:10:33-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "depositsPostReqDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "changesGetEstimateBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "67"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Kathy Paulsen"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Paulsen Medical Supplies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "900 Main St."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "billPaymentsPutReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 200
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billPaymentsPutReqLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "changesGetEstimateTxnTaxDetailTaxLineTaxLineDetailTaxRateRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "TaxRateRef",
      "type": "object"
    },
    "purchasesGetByIdLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesGetByIdLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "vendorsObjectShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "109"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchasesPostReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Meals and Entertainment"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "13"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "creditMemosPutReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosPutReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "timeActivitiesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T11:53:15-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-28T11:59:41-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "invoicesPostReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "102"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "estimatesLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "vendorsPatchReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetByIdCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "refundReceiptsPatchResLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "purchaseOrdersPatchResLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "creditMemosLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "salesReceiptsGetAllDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Undeposited Funds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "invoicesPostReqTxnTaxDetailTaxLineTaxLineDetail": {
      "properties": {
        "NetAmountTaxable": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 335.25
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "TaxPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxRateRef": {
          "$ref": "#/definitions/invoicesPostReqTxnTaxDetailTaxLineTaxLineDetailTaxRateRef"
        }
      },
      "type": "object"
    },
    "creditMemosCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "preferencesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-10-25T01:05:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2018-03-08T13:24:26-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "companyInfoMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-07-07T07:13:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-05-27T09:45:53-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "depositsGetByIDLineDepositLineDetailPaymentMethodRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "invoicesObject": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-samplevalue": 362.07
        },
        "BillAddr": {
          "$ref": "#/definitions/invoicesBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/invoicesBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/invoicesCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/invoicesCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/invoicesCustomerRef"
        },
        "Deposit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1037"
        },
        "DueDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-10-19",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "130"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/invoicesLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/invoicesLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/invoicesMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "SalesTermRef": {
          "$ref": "#/definitions/invoicesSalesTermRef"
        },
        "ShipAddr": {
          "$ref": "#/definitions/invoicesShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 362.07,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "invoiceDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-19",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/invoicesTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsPostResLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "estimatesLineDiscountLineDetailDiscountAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Discounts given"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "86"
        }
      },
      "title": "DiscountAccountRef",
      "type": "object"
    },
    "paymentMethodsPutResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsGetBYIdLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "billsObjectLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Job Expenses:Job Materials:Decks and Patios"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].account",
          "x-samplevalue": "64"
        }
      },
      "type": "object"
    },
    "customersPostReq": {
      "properties": {
        "BillAddr": {
          "$ref": "#/definitions/customersPostReqBillAddr"
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "Notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Note added via Update operation."
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/customersPostReqPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/customersPostReqPrimaryPhone"
        },
        "ShipAddr": {
          "$ref": "#/definitions/customersPostReqShipAddr"
        },
        "Suffix": {
          "type": "string",
          "x-samplevalue": "Jr"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.salutation",
          "x-samplevalue": "Mr"
        }
      },
      "required": [
        "DisplayName",
        "Title"
      ],
      "type": "object"
    },
    "attachmentsObject": {
      "properties": {
        "AttachableRef": {
          "items": {
            "$ref": "#/definitions/attachmentsAttachableRef"
          },
          "type": "array"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "200900000000000008541"
        },
        "MetaData": {
          "$ref": "#/definitions/attachmentsMetaData"
        },
        "Note": {
          "type": "string",
          "x-samplevalue": "This is an attached note."
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "attachments",
      "type": "object"
    },
    "companyInfoPatchReqNameValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "NeoEnabled"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "true"
        }
      },
      "title": "NameValue",
      "type": "object"
    },
    "timeActivitiesPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T11:53:15-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-17T11:53:15-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchaseOrdersPostResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Fountain Pump"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersPostResLineItemBasedExpenseLineDetail"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "type": "object"
    },
    "salesReceiptsGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "billPaymentsGetByIdCreditCardPaymentCCAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Mastercard"
        },
        "value": {
          "type": "string",
          "x-alias": "ccBankAccount",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "depositsPatchReqLineDepositLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsPatchReqLineDepositLineDetailAccountRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "paymentsCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Red Rock Diner"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "20"
        }
      },
      "type": "object"
    },
    "billPaymentsGetByIdCreditCardPayment": {
      "properties": {
        "CCAccountRef": {
          "$ref": "#/definitions/billPaymentsGetByIdCreditCardPaymentCCAccountRef"
        }
      },
      "type": "object"
    },
    "purchasesGetById": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesGetByIdAccountRef"
        },
        "Credit": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchasesGetByIdCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "367"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesGetByIdLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchasesGetByIdMetaData"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "CreditCard"
        },
        "PurchaseEx": {
          "$ref": "#/definitions/purchasesGetByIdPurchaseEx"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-01-02"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "purchasesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsPatchResLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "invoicesPostReqLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": [
            {
              "alias": "parentDocumentNumber",
              "path": "LinkedTxn[*].TxnId | [0]"
            }
          ],
          "x-samplevalue": "100"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Estimate"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "csdcds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1223"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "paymentsPutReqLineLineExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "txnId"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "70"
        }
      },
      "type": "object"
    },
    "companyInfosCompanyAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "CompanyAddr",
      "type": "object"
    },
    "transfersGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "paymentsPostReqLineLineExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/paymentsPostReqLineLineExAnyValue"
        }
      },
      "type": "object"
    },
    "timeActivitiesPostResCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Rondonuwu Fruit and Vegi"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "21"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "journalEntriesGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T02:31:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T02:31:15-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "timeActivitiesCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "vendorCreditsPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "estimatesTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "depositsPutResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2000
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsPutResLineDepositLineDetail"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "DepositLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "vendorsPostReqPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "creditMemosPutReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "preferencesEmailMessagesPrefsStatementMessage": {
      "properties": {
        "Message": {
          "type": "string",
          "x-samplevalue": "Your statement is attached.  Please remit payment at your earliest convenience.\nThank you for your business - we appreciate it very much.\n\nSincerely,\nCraig's Design and Landscaping Services"
        },
        "Subject": {
          "type": "string",
          "x-samplevalue": "Statement from Craig's Design and Landscaping Services"
        }
      },
      "title": "StatementMessage",
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "journalEntriesPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T02:27:29-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T02:27:29-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "journalEntriesPostRes": {
      "properties": {
        "Adjustment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesPostResCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "177"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/journalEntriesPostResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-27"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalEntriesPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "journalEntriesPostReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesPostReqCurrencyRef"
        },
        "JournalCodeRef": {
          "$ref": "#/definitions/journalEntriesPostReqJournalCodeRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesPostReqLine"
          },
          "type": "array"
        }
      },
      "required": [
        "Line"
      ],
      "title": "journalEntriesPostReq",
      "type": "object"
    },
    "changesGetCustomer": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BalanceWithJobs": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/changesGetCustomerBillAddr"
        },
        "BillWithParent": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CompanyName": {
          "type": "string",
          "x-samplevalue": "Gevelber Photography"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/changesGetCustomerCurrencyRef"
        },
        "DefaultTaxCodeRef": {
          "$ref": "#/definitions/changesGetCustomerDefaultTaxCodeRef"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Rodriguez"
        },
        "Fax": {
          "$ref": "#/definitions/changesGetCustomerFax"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Diego"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "Job": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "MetaData": {
          "$ref": "#/definitions/changesGetCustomerMetaData"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Fruit"
        },
        "Mobile": {
          "$ref": "#/definitions/changesGetCustomerMobile"
        },
        "Notes": {
          "type": "string",
          "x-samplevalue": "Here are other details."
        },
        "ParentRef": {
          "$ref": "#/definitions/changesGetCustomerParentRef"
        },
        "PreferredDeliveryMethod": {
          "type": "string",
          "x-samplevalue": "Print"
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/changesGetCustomerPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/changesGetCustomerPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "ShipAddr": {
          "$ref": "#/definitions/changesGetCustomerShipAddr"
        },
        "Suffix": {
          "type": "string",
          "x-samplevalue": "Jr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Title": {
          "type": "string",
          "x-samplevalue": "Mr"
        },
        "WebAddr": {
          "$ref": "#/definitions/changesGetCustomerWebAddr"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "Customer",
      "type": "object"
    },
    "creditMemosGetAllLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "vendorCreditsGetAllLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/vendorCreditsGetAllLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/vendorCreditsGetAllLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/vendorCreditsGetAllLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "transfersGetAllFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "invoicesPutReqCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "type": "object"
    },
    "paymentsObjectDepositToAccountRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "bankAccount",
          "x-samplevalue": "4"
        }
      },
      "type": "object"
    },
    "itemsPostReqIncomeAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "40140 Construction Income:Materials Income"
        },
        "value": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "77"
        }
      },
      "type": "object"
    },
    "companyInfoPatchReq": {
      "properties": {
        "CompanyAddr": {
          "$ref": "#/definitions/companyInfoPatchReqCompanyAddr"
        },
        "CompanyName": {
          "type": "string",
          "x-samplevalue": "Larry's Bakery"
        },
        "CompanyStartDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-06-05"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CustomerCommunicationAddr": {
          "$ref": "#/definitions/companyInfoPatchReqCustomerCommunicationAddr"
        },
        "Email": {
          "$ref": "#/definitions/companyInfoPatchReqEmail"
        },
        "FiscalYearStartMonth": {
          "type": "string",
          "x-samplevalue": "January"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LegalAddr": {
          "$ref": "#/definitions/companyInfoPatchReqLegalAddr"
        },
        "LegalName": {
          "type": "string",
          "x-samplevalue": "Larry's Bakery"
        },
        "MetaData": {
          "$ref": "#/definitions/companyInfoPatchReqMetaData"
        },
        "NameValue": {
          "items": {
            "$ref": "#/definitions/companyInfoPatchReqNameValue"
          },
          "type": "array"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/companyInfoPatchReqPrimaryPhone"
        },
        "SupportedLanguages": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "3"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "CompanyName",
        "CompanyAddr"
      ],
      "title": "companyInfoPatchReq",
      "type": "object"
    },
    "companyInfoEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "quickbooks+oauth2@cloud-elements.com"
        }
      },
      "title": "Email",
      "type": "object"
    },
    "salesReceiptsPostReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/salesReceiptsPostReqCurrencyRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPostReqLine"
          },
          "type": "array"
        }
      },
      "required": [
        "Line"
      ],
      "title": "salesReceiptsPostReq",
      "type": "object"
    },
    "companyInfoPatchReqCompanyAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "CompanyAddr",
      "type": "object"
    },
    "salesReceiptsPostRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRef": {
          "$ref": "#/definitions/salesReceiptsPostResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPostResCustomField"
          },
          "type": "array"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/salesReceiptsPostResDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1063"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "181"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/salesReceiptsPostResMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "ShipFromAddr": {
          "$ref": "#/definitions/salesReceiptsPostResShipFromAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-29"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/salesReceiptsPostResTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "salesReceiptsPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "companyInfoCompanyAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Denver"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CO"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4155"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "3858 Walnut Street 235"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "80205"
        }
      },
      "title": "CompanyAddr",
      "type": "object"
    },
    "estimates": {
      "items": {
        "$ref": "#/definitions/estimatesObject"
      },
      "type": "array"
    },
    "invoicesTxnTaxDetailTaxLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 26.82
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "TaxLineDetail"
        },
        "TaxLineDetail": {
          "$ref": "#/definitions/invoicesTxnTaxDetailTaxLineTaxLineDetail"
        }
      },
      "type": "object"
    },
    "timeActivitiesPutReq": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/timeActivitiesPutReqCustomerRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Updated descirption"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesPutReqEmployeeRef"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 75
        },
        "Hours": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "3"
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesPutReqItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesPutReqMetaData"
        },
        "Minutes": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-16"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "NameOf",
        "SyncToken"
      ],
      "title": "timeActivitiesPutReq",
      "type": "object"
    },
    "salesReceiptsGetAllCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "classesObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "France",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5000000000000138317",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/classesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "France",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SubClass": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "classes",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "changesGetEstimateShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "19"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.3989376"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "38921 S. Boise Ave"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1443935"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94304"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "salesReceiptsPostResLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "depositsPutResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T02:10:05-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T02:10:33-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "timeActivitiesPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T23:34:31-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T23:34:31-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "classesPutRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "France"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5000000000000138317"
        },
        "MetaData": {
          "$ref": "#/definitions/classesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "France"
        },
        "SubClass": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "classesPutRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "classesPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "France"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5000000000000138317"
        },
        "MetaData": {
          "$ref": "#/definitions/classesPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "France"
        },
        "SubClass": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Name",
        "SyncToken"
      ],
      "title": "classesPutReq",
      "type": "object"
    },
    "vendorCreditsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "paymentsLineLineExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "txnId"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "70"
        }
      },
      "type": "object"
    },
    "depositsGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "taxAgencies": {
      "items": {
        "$ref": "#/definitions/taxAgenciesObject"
      },
      "type": "array"
    },
    "depositsGetByIDLineDepositLineDetail": {
      "properties": {
        "PaymentMethodRef": {
          "$ref": "#/definitions/depositsGetByIDLineDepositLineDetailPaymentMethodRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "vendorCreditsGetAllAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "33"
        }
      },
      "title": "APAccountRef",
      "type": "object"
    },
    "estimatesCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "invoicesCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "type": "object"
    },
    "depositsGetAllObject": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/depositsGetAllCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsGetAllDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/depositsGetAllMetaData"
        },
        "PrivateNote": {
          "type": "string",
          "x-samplevalue": "Opening Balance"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 600
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-19",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "depositsGetAll",
      "type": "object"
    },
    "refundReceiptsGetAllBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "pyescakes@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "timeActivitiesEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "John Johnson"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "depositsGetAllDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "creditMemosPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsPostResLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/salesReceiptsPostResLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsPostResLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsPostResLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "vendorsPatchReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "109"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "ledgerAccountsPutRes": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability"
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Description added during update."
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "33"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgerAccountsPutResMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "billPaymentsPutReqCheckPayment": {
      "properties": {
        "BankAccountRef": {
          "$ref": "#/definitions/billPaymentsPutReqCheckPaymentBankAccountRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchReqPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "vendorCreditsPostResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Books by Bessie"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "30"
        }
      },
      "title": "VendorRef",
      "type": "object"
    },
    "vendorCreditsPostResLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Bank Charges"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "paymentsPostReqLineLineEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/paymentsPostReqLineLineExAny"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "billPaymentsPutResCheckPayment": {
      "properties": {
        "BankAccountRef": {
          "$ref": "#/definitions/billPaymentsPutResCheckPaymentBankAccountRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        }
      },
      "type": "object"
    },
    "creditMemosPutResCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "billsObject": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/billsAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billsCurrencyRef"
        },
        "DueDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-06"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "25"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billsLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billsLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/billsMetaData"
        },
        "SalesTermRef": {
          "$ref": "#/definitions/billsSalesTermRef"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 103.55
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-11-06"
        },
        "VendorRef": {
          "$ref": "#/definitions/billsVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "itemsPutReqParentRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "parent.name",
          "x-samplevalue": "Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "parent.id",
          "x-samplevalue": "36"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqLineItemBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchResAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "employeesObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        }
      },
      "type": "object"
    },
    "billsPostReqVendorRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "46"
        }
      },
      "type": "object"
    },
    "timeActivitiesPutReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "refundReceiptsPatchRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/refundReceiptsPatchResBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/refundReceiptsPatchResBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/refundReceiptsPatchResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPatchResCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/refundReceiptsPatchResCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/refundReceiptsPatchResCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsPatchResDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1020"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPatchResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/refundReceiptsPatchResMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/refundReceiptsPatchResPaymentMethodRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "ShipAddr": {
          "$ref": "#/definitions/refundReceiptsPatchResShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-21"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/refundReceiptsPatchResTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "refundReceiptsPatchRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "billsPostReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/billsPostReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "double",
          "type": "number",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 103.55
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Weekly Gardening Service"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsPatchResLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "refundReceiptsPatchReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/refundReceiptsPatchReqBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/refundReceiptsPatchReqBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPatchReqCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/refundReceiptsPatchReqCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/refundReceiptsPatchReqCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsPatchReqDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1020"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/refundReceiptsPatchReqMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/refundReceiptsPatchReqPaymentMethodRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "ShipAddr": {
          "$ref": "#/definitions/refundReceiptsPatchReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-17"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/refundReceiptsPatchReqTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Line",
        "DepositToAccountRef"
      ],
      "title": "refundReceiptsPatchReq",
      "type": "object"
    },
    "refundReceiptsPostResLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "purchaseOrdersGetByIdLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "126"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "depositsPutResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "purchasesPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "salesReceiptsPostResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "salesReceiptsPatchReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "invoicesPostReqTxnTaxDetailTaxLineTaxLineDetailTaxRateRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": [
            {
              "alias": "taxRate",
              "path": "TxnTaxDetail.TaxLine[*].TaxLineDetail.TaxRateRef.value | [0]"
            }
          ],
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "billPaymentsPostResCheckPaymentBankAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "58"
        }
      },
      "title": "BankAccountRef",
      "type": "object"
    },
    "paymentsPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        }
      },
      "type": "object"
    },
    "purchasesPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "salesReceiptsPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsPostReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "preferencesProductAndServicesPrefs": {
      "properties": {
        "ForPurchase": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "ForSales": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "QuantityOnHand": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "QuantityWithPriceAndRate": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "ProductAndServicesPrefs",
      "type": "object"
    },
    "invoicesLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 275
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/invoicesLineSalesItemLineDetail"
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "purchaseOrdersGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "billsLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].customer.name",
          "x-samplevalue": "Travis Waldron"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].customer.id",
          "x-samplevalue": "26"
        }
      },
      "type": "object"
    },
    "billPaymentsPostReqCheckPayment": {
      "properties": {
        "BankAccountRef": {
          "$ref": "#/definitions/billPaymentsPostReqCheckPaymentBankAccountRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        }
      },
      "title": "CheckPayment",
      "type": "object"
    },
    "salesReceiptsGetByIdBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Diego@Rodriguez.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "billsObjectVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "46"
        }
      },
      "type": "object"
    },
    "preferencesSalesFormsPrefsCustomFieldCustomField": {
      "properties": {
        "BooleanValue": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "SalesFormsPrefs.SalesCustomName1"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "purchaseOrdersGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "billPaymentsPutResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "PG&E"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "48"
        }
      },
      "type": "object"
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "purchasesPatchResAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Visa"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "42"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "journalEntriesPatchReqLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesPatchReqLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Debit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "refundReceiptsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "vendorCreditsPatchResLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Bank Charges"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "billPaymentsGetById": {
      "properties": {
        "CreditCardPayment": {
          "$ref": "#/definitions/billPaymentsGetByIdCreditCardPayment"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billPaymentsGetByIdCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "6"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "77"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billPaymentsGetByIdLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/billPaymentsGetByIdMetaData"
        },
        "PayType": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 114.09
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-22"
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsGetByIdVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "purchaseOrdersPatchReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "billPaymentsPutResCheckPaymentBankAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-alias": "checkBankAccount",
          "x-samplevalue": "35"
        }
      },
      "type": "object"
    },
    "ledgerAccountsObject": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Description added during update."
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "33"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgerAccountsMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "paymentsPutReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Red Rock Diner"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "20"
        }
      },
      "type": "object"
    },
    "paymentsPostReqLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].invoice.id",
          "x-samplevalue": "70"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Invoice"
        }
      },
      "type": "object"
    },
    "taxRatesGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsPatchResLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "62"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Deposit"
        }
      },
      "title": "LinkedTxn",
      "type": "object"
    },
    "preferencesOtherPrefs": {
      "properties": {
        "NameValue": {
          "items": {
            "$ref": "#/definitions/preferencesOtherPrefsNameValue"
          },
          "type": "array"
        }
      },
      "title": "OtherPrefs",
      "type": "object"
    },
    "timeActivitiesPostReqItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Lighting"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "purchaseOrdersPostResShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        }
      },
      "type": "object"
    },
    "billsAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "billsPutReq": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/billsPutReqAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billsPutReqCurrencyRef"
        },
        "DueDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-06"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "25"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billsPutReqLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billsPutReqLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/billsPutReqMetaData"
        },
        "SalesTermRef": {
          "$ref": "#/definitions/billsPutReqSalesTermRef"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 103.55
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "billDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-11-06"
        },
        "VendorRef": {
          "$ref": "#/definitions/billsPutReqVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "VendorRef"
      ],
      "type": "object"
    },
    "timeActivitiesGetByIdItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Hours"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "vendorCreditsGetAllLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Bank Charges"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "billPaymentsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:57:18-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T09:18:19-08:00"
        }
      },
      "type": "object"
    },
    "billsPostReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/billsPostReqLineAccountBasedExpenseLineDetailAccountRef"
        }
      },
      "type": "object"
    },
    "billPaymentsPutReq": {
      "properties": {
        "CheckPayment": {
          "$ref": "#/definitions/billPaymentsPutReqCheckPayment"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "77"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billPaymentsPutReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/billPaymentsPutReqMetaData"
        },
        "PayType": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "PrivateNote": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "A new private note"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 114.09
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-22"
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsPutReqVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "type": "object"
    },
    "preferencesAccountingInfoPrefs": {
      "properties": {
        "BookCloseDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2018-12-31"
        },
        "ClassTrackingPerTxn": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ClassTrackingPerTxnLine": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "CustomerTerminology": {
          "type": "string",
          "x-samplevalue": "Customers"
        },
        "DepartmentTerminology": {
          "type": "string",
          "x-samplevalue": "Location"
        },
        "FirstMonthOfFiscalYear": {
          "type": "string",
          "x-samplevalue": "January"
        },
        "TaxForm": {
          "type": "string",
          "x-samplevalue": "6"
        },
        "TaxYearMonth": {
          "type": "string",
          "x-samplevalue": "January"
        },
        "TrackDepartments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "UseAccountNumbers": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "AccountingInfoPrefs",
      "type": "object"
    },
    "billPaymentsPutRes": {
      "properties": {
        "CheckPayment": {
          "$ref": "#/definitions/billPaymentsPutResCheckPayment"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billPaymentsPutResCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "6"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "77"
        },
        "MetaData": {
          "$ref": "#/definitions/billPaymentsPutResMetaData"
        },
        "PayType": {
          "type": "string",
          "x-alias": "paymentMethod",
          "x-samplevalue": "Check"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 114.09
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-22"
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsPutResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "billsObjectLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/billsObjectLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "double",
          "type": "number",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 103.55
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Lumber"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "taxRatesGetByIDAgencyRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "AgencyRef",
      "type": "object"
    },
    "journalCodesPutReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "2121"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "test"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "xsaxww"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "dwdq"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "purchasesPatchResLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Meals and Entertainment"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "13"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "ledgerAccountsPutResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "journalEntriesGetAllLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesGetAllLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Credit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "transfersGetAllObject": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 120
        },
        "CurrencyRef": {
          "$ref": "#/definitions/transfersGetAllCurrencyRef"
        },
        "FromAccountRef": {
          "$ref": "#/definitions/transfersGetAllFromAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "182",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/transfersGetAllMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "ToAccountRef": {
          "$ref": "#/definitions/transfersGetAllToAccountRef"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "transfersGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "purchaseOrdersGetAllLineItemBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "vendorsObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalOutstandingAmount",
          "x-samplevalue": 274
        },
        "BalanceWithJobs": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 274
        },
        "BillAddr": {
          "$ref": "#/definitions/vendorsObjectBillAddr"
        },
        "BillWithParent": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "DefaultTaxCodeRef": {
          "$ref": "#/definitions/vendorsObjectDefaultTaxCodeRef"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "1"
        },
        "Job": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "MetaData": {
          "$ref": "#/definitions/vendorsObjectMetaData"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "Notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Note added via Update operation."
        },
        "PreferredDeliveryMethod": {
          "type": "string",
          "x-samplevalue": "Print"
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/vendorsObjectPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/vendorsObjectPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "ShipAddr": {
          "$ref": "#/definitions/vendorsObjectShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "vendorCreditsPostResLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "invoicesPostReqTxnTaxDetailTaxLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 26.82
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "TaxLineDetail"
        },
        "TaxLineDetail": {
          "$ref": "#/definitions/invoicesPostReqTxnTaxDetailTaxLineTaxLineDetail"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "salesReceiptsPostResShipFromAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "106"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "123 Sierra Way"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "San Pablo, CA  87999 US"
        }
      },
      "title": "ShipFromAddr",
      "type": "object"
    },
    "companyInfosObject": {
      "properties": {
        "CompanyAddr": {
          "$ref": "#/definitions/companyInfosCompanyAddr"
        },
        "CompanyName": {
          "type": "string",
          "x-samplevalue": "Larry's Bakery"
        },
        "CompanyStartDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-06-05"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CustomerCommunicationAddr": {
          "$ref": "#/definitions/companyInfosCustomerCommunicationAddr"
        },
        "Email": {
          "$ref": "#/definitions/companyInfosEmail"
        },
        "FiscalYearStartMonth": {
          "type": "string",
          "x-samplevalue": "January"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LegalAddr": {
          "$ref": "#/definitions/companyInfosLegalAddr"
        },
        "LegalName": {
          "type": "string",
          "x-samplevalue": "Larry's Bakery"
        },
        "MetaData": {
          "$ref": "#/definitions/companyInfosMetaData"
        },
        "NameValue": {
          "items": {
            "$ref": "#/definitions/companyInfosNameValue"
          },
          "type": "array"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/companyInfosPrimaryPhone"
        },
        "SupportedLanguages": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "companyInfos",
      "type": "object"
    },
    "invoicesPostReqTxnTaxDetailTxnTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetAllObject": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "BillAddr": {
          "$ref": "#/definitions/salesReceiptsGetAllBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/salesReceiptsGetAllBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/salesReceiptsGetAllCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetAllCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/salesReceiptsGetAllCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/salesReceiptsGetAllCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/salesReceiptsGetAllDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1014"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "47",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetAllLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetAllLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/salesReceiptsGetAllMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-19",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/salesReceiptsGetAllTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "salesReceiptsGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "changesGetEstimateMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:42:38-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:43:20-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "transfersGetAllToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "refundReceiptsPostResLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/refundReceiptsPostResLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsPostResLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/refundReceiptsPostResLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "refundReceiptsGetAllTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "itemsPutReqIncomeAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "40140 Construction Income:Materials Income"
        },
        "value": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "77"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "15"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "vendorCreditsPatchReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Bank Charges"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "invoicesObjectLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "5"
        }
      },
      "type": "object"
    },
    "timeActivitiesGetAllObject": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "HasBeenBilled",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "CustomerRef": {
          "$ref": "#/definitions/timeActivitiesGetAllCustomerRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Garden Lighting"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesGetAllEmployeeRef"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 15
        },
        "Hours": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesGetAllItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesGetAllMetaData"
        },
        "Minutes": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-21",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "timeActivitiesGetAll",
      "type": "object"
    },
    "customersDefaultTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "timeActivitiesGetByIdEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Emily Platt"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "55"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "timeActivitiesPutReqEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "John Johnson"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "billPaymentsGetAllLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].billNumber",
          "x-samplevalue": "234"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "customersObjectPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersPostReqLineItemBasedExpenseLineDetail"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "depositsGetByIDDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "customersPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "invoicesPutReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-samplevalue": 362.07
        },
        "BillAddr": {
          "$ref": "#/definitions/invoicesPutReqBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/invoicesPutReqBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/invoicesPutReqCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/invoicesPutReqCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/invoicesPutReqCustomerRef"
        },
        "Deposit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1037"
        },
        "DueDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-10-19"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "130"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/invoicesPutReqLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/invoicesPutReqLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/invoicesPutReqMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "SalesTermRef": {
          "$ref": "#/definitions/invoicesPutReqSalesTermRef"
        },
        "ShipAddr": {
          "$ref": "#/definitions/invoicesPutReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 362.07
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "invoiceDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-19"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/invoicesPutReqTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "CustomerRef"
      ],
      "type": "object"
    },
    "companyCurrenciesPostReq": {
      "properties": {
        "Code": {
          "type": "string",
          "x-samplevalue": "GBP"
        }
      },
      "title": "companyCurrenciesPostReq",
      "type": "object"
    },
    "customersObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "vendorsObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "ledgeraccountsPostRes": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/ledgeraccountsPostResCurrencyRef"
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "33"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgeraccountsPostResMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPatchResCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "purchaseOrdersPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "creditMemosPutReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "99"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "creditMemosPutReqBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "98"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "billsPutReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "46"
        }
      },
      "type": "object"
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "purchasesGetAllRemitToAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "37"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.445013"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "42 Main St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1391443"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94303"
        }
      },
      "title": "RemitToAddr",
      "type": "object"
    },
    "ledgeraccountsPostReq": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/ledgeraccountsPostReqCurrencyRef"
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgeraccountsPostReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "salesReceiptsPostReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "depositsPatchReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/depositsPatchReqCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsPatchReqDepositToAccountRef"
        },
        "ExchangeRate": {
          "type": "string"
        },
        "GlobalTaxCalculation": {
          "enum": [
            "TaxExcluded",
            "TaxInclusive",
            "NotApplicable"
          ],
          "type": "string"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/depositsPatchReqMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2200
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "TxnSource": {
          "type": "string"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "depositsPatchReq",
      "type": "object"
    },
    "itemsObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": false
        },
        "Description": {
          "type": "string",
          "x-alias": "inventoryStockDescription",
          "x-samplevalue": "Naga Test"
        },
        "ExpenseAccountRef": {
          "$ref": "#/definitions/itemsExpenseAccountRef"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Hardware:Naga Test (deleted)",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "869"
        },
        "IncomeAccountRef": {
          "$ref": "#/definitions/itemsIncomeAccountRef"
        },
        "Level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "MetaData": {
          "$ref": "#/definitions/itemsMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Naga Test (deleted)",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "ParentRef": {
          "$ref": "#/definitions/itemsParentRef"
        },
        "PurchaseCost": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 0
        },
        "SubItem": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Taxable": {
          "type": "boolean",
          "x-alias": "taxable",
          "x-samplevalue": true
        },
        "TrackQtyOnHand": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Type": {
          "type": "string",
          "x-alias": "type",
          "x-samplevalue": "Service",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 38
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsGetAllDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "vendorsPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "attachmentsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-11-17T11:05:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-11-17T11:05:15-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsGetBYIdLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "vendorCreditsGetAllLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/vendorCreditsGetAllLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "bulkDownloadRequestDocsHubDetails": {
      "properties": {
        "instanceId": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "path": {
          "type": "string",
          "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
        }
      },
      "title": "docsHubDetails",
      "type": "object"
    },
    "changesGetEstimateLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/changesGetEstimateLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/changesGetEstimateLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 275
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "purchasesPatchReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Meals and Entertainment"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "13"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "depositsPostRes": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/depositsPostResCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsPostResDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "149"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsPostResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/depositsPostResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-22"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "depositsPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "companyInfoLegalAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Denver"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CO"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4155"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "3858 Walnut Street 235"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "80205"
        }
      },
      "title": "LegalAddr",
      "type": "object"
    },
    "depositsPostReq": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/depositsPostReqCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsPostReqDepositToAccountRef"
        },
        "ExchangeRate": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsPostReqLine"
          },
          "type": "array"
        }
      },
      "required": [
        "Line"
      ],
      "title": "depositsPostReq",
      "type": "object"
    },
    "vendorCreditsPatchResLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/vendorCreditsPatchResLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/vendorCreditsPatchResLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/vendorCreditsPatchResLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "ledgeraccountsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "customersPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "billsVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "46"
        }
      },
      "type": "object"
    },
    "classesPostRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "vdsvdsd"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5000000000000138321"
        },
        "MetaData": {
          "$ref": "#/definitions/classesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "vdsvdsd"
        },
        "SubClass": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "classesPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "paymentsPutReqDepositToAccountRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "bankAccount",
          "x-samplevalue": "4"
        }
      },
      "type": "object"
    },
    "classesPostReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "France"
        },
        "ParentRef": {
          "$ref": "#/definitions/classesPostReqParentRef"
        }
      },
      "required": [
        "Name"
      ],
      "title": "classesPostReq",
      "type": "object"
    },
    "vendorsObjectPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "itemsObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:07:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:08:36-08:00"
        }
      },
      "type": "object"
    },
    "paymentsPutReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 55
        },
        "LineEx": {
          "$ref": "#/definitions/paymentsPutReqLineLineEx"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/paymentsPutReqLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "journalEntriesGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "billPaymentsPostReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Patton Hardware Supplies"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "11",
          "x-required": true
        }
      },
      "title": "VendorRef",
      "type": "object",
      "required": [
        "value"
      ]
    },
    "purchasesPostReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPostReqLineAccountBasedExpenseLineDetailAccountRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "refundReceiptsPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "billsObjectLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "118"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "BillPaymentCheck"
        }
      },
      "type": "object"
    },
    "purchasesGetByIdPurchaseExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/purchasesGetByIdPurchaseExAnyValue"
        }
      },
      "title": "any",
      "type": "object"
    },
    "refundReceiptsPostResLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Refund - Pest control was ineffective"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsPostResLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "salesReceiptsGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "salesReceiptsGetByIdDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Undeposited Funds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "purchasesGetByIdPurchaseEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/purchasesGetByIdPurchaseExAny"
          },
          "type": "array"
        }
      },
      "title": "PurchaseEx",
      "type": "object"
    },
    "purchasesGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-23T12:51:46-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-23T12:51:46-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "journalEntriesPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "ewsdxew"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "cdcew"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "invoicesObjectTxnTaxDetailTaxLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 26.82
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "TaxLineDetail"
        },
        "TaxLineDetail": {
          "$ref": "#/definitions/invoicesObjectTxnTaxDetailTaxLineTaxLineDetail"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetAllLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "purchasesGetByIdLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Meals and Entertainment"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "13"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "vendorCreditsPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "companyInfosNameValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "NeoEnabled"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "true"
        }
      },
      "title": "NameValue",
      "type": "object"
    },
    "transfersPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "billsObjectLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "salesReceiptsPostResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsPostResLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "journalCodesObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE",
            "<",
            ">",
            "<=",
            ">="
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/journalCodesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "VT",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalCodes",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "refundReceiptsGetAllLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "salesReceiptsGetAllBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "321 Channing"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "Palo Alto, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "vendorCreditsPostReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/vendorCreditsPostReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "customersObjectBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchasesGetAllObject": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesGetAllAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchasesGetAllCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "75"
        },
        "EntityRef": {
          "$ref": "#/definitions/purchasesGetAllEntityRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "115",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchasesGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchasesGetAllMetaData"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "Check",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "PurchaseEx": {
          "$ref": "#/definitions/purchasesGetAllPurchaseEx"
        },
        "RemitToAddr": {
          "$ref": "#/definitions/purchasesGetAllRemitToAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 228.75
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-23",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Id"
      ],
      "title": "purchasesGetAll",
      "type": "object"
    },
    "purchaseOrdersPostResLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersPostResLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersPostResLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "invoicesBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Familiystore@intuit.com"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        }
      },
      "type": "object"
    },
    "vendorCreditsPostReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Books by Bessie"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "30"
        }
      },
      "title": "VendorRef",
      "type": "object"
    },
    "refundReceiptsGetAllLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/refundReceiptsGetAllLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsGetAllLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/refundReceiptsGetAllLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "purchaseOrdersPostReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetAllLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "companyInfoPatchReqCustomerCommunicationAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "CustomerCommunicationAddr",
      "type": "object"
    },
    "ledgeraccountsGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "journalEntriesPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "purchaseOrdersPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "invoicesObjectLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 275
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/invoicesObjectLineSalesItemLineDetail"
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "taxRatesGetByIDMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "itemsPostReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": false
        },
        "Description": {
          "type": "string",
          "x-alias": "inventoryStockDescription",
          "x-samplevalue": "Naga Test"
        },
        "ExpenseAccountRef": {
          "$ref": "#/definitions/itemsPostReqExpenseAccountRef"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Hardware:Naga Test (deleted)"
        },
        "IncomeAccountRef": {
          "$ref": "#/definitions/itemsPostReqIncomeAccountRef"
        },
        "Level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "MetaData": {
          "$ref": "#/definitions/itemsPostReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Naga Test (deleted)"
        },
        "ParentRef": {
          "$ref": "#/definitions/itemsPostReqParentRef"
        },
        "PurchaseCost": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 0
        },
        "SubItem": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Taxable": {
          "type": "boolean",
          "x-alias": "taxable",
          "x-samplevalue": true
        },
        "TrackQtyOnHand": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Type": {
          "type": "string",
          "x-alias": "type",
          "x-samplevalue": "Service"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 38
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "type": "object"
    },
    "billsLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "118"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "BillPaymentCheck"
        }
      },
      "type": "object"
    },
    "invoicesPostReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "25"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94303"
        }
      },
      "type": "object"
    },
    "paymentsObjectLineLineExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/paymentsObjectLineLineExAnyValue"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "invoicesPostReqBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "95"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Russ Sonnenschein"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        }
      },
      "type": "object"
    },
    "departmentsObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Sales Department",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/departmentsMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Sales Department",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SubDepartment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "departments",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "journalEntriesPostResLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Truck:Depreciation"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "39"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "salesReceiptsPatchReqLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 337.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Custom Design"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsPatchReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "creditMemosLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "invoicesPutReqLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": [
            {
              "alias": "parentDocumentNumber",
              "path": "LinkedTxn[*].TxnId | [0]"
            }
          ],
          "x-samplevalue": "100"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Estimate"
        }
      },
      "type": "object"
    },
    "changesGetEstimateCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "vendorCreditsPostReqLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "changesGetEstimateCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "vendorsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "taxServicePostReqTaxRateDetails": {
      "properties": {
        "RateValue": {
          "type": "string",
          "x-samplevalue": "8"
        },
        "TaxAgencyId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TaxApplicableOn": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "TaxRateName": {
          "type": "string",
          "x-samplevalue": "myNewTaxRateName"
        }
      },
      "title": "TaxRateDetails",
      "type": "object"
    },
    "salesReceiptsPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "depositsGetByIDLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 460.4
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsGetByIDLineDepositLineDetail"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/depositsGetByIDLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "billPaymentsGetByIdVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "PG&E"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "48"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "changesGetEstimateLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 275
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/changesGetEstimateLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "salesReceiptsGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "taxServicePostRes": {
      "properties": {
        "TaxCode": {
          "type": "string",
          "x-samplevalue": "MyTaxCodeName"
        },
        "TaxCodeId": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "TaxRateDetails": {
          "items": {
            "$ref": "#/definitions/taxServicePostResTaxRateDetails"
          },
          "type": "array"
        }
      },
      "title": "taxServicePostRes",
      "type": "object"
    },
    "changesGetEstimateTxnTaxDetailTxnTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "TxnTaxCodeRef",
      "type": "object"
    },
    "taxServicePostReq": {
      "properties": {
        "TaxCode": {
          "type": "string",
          "x-samplevalue": "MyTaxCodeName"
        },
        "TaxRateDetails": {
          "items": {
            "$ref": "#/definitions/taxServicePostReqTaxRateDetails"
          },
          "type": "array"
        }
      },
      "required": [
        "TaxCode",
        "TaxRateDetails"
      ],
      "title": "taxServicePostReq",
      "type": "object"
    },
    "paymentsObjectLineLineEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/paymentsObjectLineLineExAny"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "creditMemosPutReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchasesPostResLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesPostResLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "BulkUploadResponse": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance Id of the bulk job",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetAllLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "refundReceiptsPostResBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "73"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7489277"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Karen Pye"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "South Orange, NJ  07079"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2609903"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "timeActivities": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/timeActivitiesCustomerRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Updated descirption"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesEmployeeRef"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 75
        },
        "Hours": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "3"
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesMetaData"
        },
        "Minutes": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-16"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "timeActivities",
      "type": "object"
    },
    "refundReceiptsPatchResBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "pyescakes@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "ledgeraccountsPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-12T10:12:02-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-13T15:35:13-07:00"
        }
      },
      "type": "object"
    },
    "timeActivitiesGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:22:56-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:22:56-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsPostResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Undeposited Funds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "vendorsPostReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "exchangeRatesGetAll": {
      "properties": {
        "AsOfDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2016-06-21"
        },
        "MetaData": {
          "$ref": "#/definitions/exchangeRatesGetAllMetaData"
        },
        "Rate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SourceCurrencyCode": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "TargetCurrencyCode": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "exchangeRatesGetAll",
      "type": "object"
    },
    "departmentsPostReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Marketing Department"
        }
      },
      "required": [
        "Name"
      ],
      "title": "departmentsPostReq",
      "type": "object"
    },
    "salesReceiptsGetByIdLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Gardening"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "6"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "salesReceiptsPatchReqDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "classesGetById": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "SaiCharan"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5000000000000138318"
        },
        "MetaData": {
          "$ref": "#/definitions/classesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "SaiCharan"
        },
        "SubClass": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "classesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "transfersGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:35:17-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "changesGetCustomerDefaultTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "DefaultTaxCodeRef",
      "type": "object"
    },
    "salesReceiptsGetByIdCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "purchaseOrdersGetAllCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostResPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "timeActivitiesItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Design"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "vendorsPostReq": {
      "properties": {
        "BillAddr": {
          "$ref": "#/definitions/vendorsPostReqBillAddr"
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "Notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Note added via Update operation."
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/vendorsPostReqPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/vendorsPostReqPrimaryPhone"
        },
        "ShipAddr": {
          "$ref": "#/definitions/vendorsPostReqShipAddr"
        },
        "Suffix": {
          "type": "string",
          "x-samplevalue": "Jr"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.salutation",
          "x-samplevalue": "Mr"
        }
      },
      "required": [
        "Title"
      ],
      "type": "object"
    },
    "paymentsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "customersObjectShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "109"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "invoicesPutReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "billPaymentsGetAllCreditCardPaymentCCAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Mastercard"
        },
        "value": {
          "type": "string",
          "x-alias": "ccBankAccount",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "journalCodesPostReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "VT"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        }
      },
      "required": [
        "Name"
      ],
      "title": "journalCodesPostReq",
      "type": "object"
    },
    "billsObjectCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "journalCodesPostRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "MetaData": {
          "$ref": "#/definitions/journalCodesPostResMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "VT"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "time": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2015-12-16T11:01:37.346-07:00"
        }
      },
      "title": "journalCodesPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "journalEntriesPostResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "nov portion of rider insurance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesPostResLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "depositsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T21:48:58-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T21:48:58-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchasesPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsGetAllBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "73"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7489277"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Karen Pye"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "South Orange, NJ  07079"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2609903"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "purchasesPatchReqPurchaseExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "TxnType"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "value",
      "type": "object"
    },
    "transfersPatchResToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "preferencesSalesFormsPrefs": {
      "properties": {
        "AllowDeposit": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AllowDiscount": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AllowEstimates": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AllowServiceDate": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "AllowShipping": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "AutoApplyCredit": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AutoApplyPayments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/preferencesSalesFormsPrefsCustomField"
          },
          "type": "array"
        },
        "CustomTxnNumbers": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "DefaultCustomerMessage": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        },
        "DefaultDiscountAccount": {
          "type": "string",
          "x-samplevalue": "86"
        },
        "DefaultTerms": {
          "$ref": "#/definitions/preferencesSalesFormsPrefsDefaultTerms"
        },
        "ETransactionAttachPDF": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ETransactionEnabledStatus": {
          "type": "string",
          "x-samplevalue": "NotApplicable"
        },
        "ETransactionPaymentEnabled": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "EmailCopyToCompany": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IPNSupportEnabled": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "UsingPriceLevels": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "SalesFormsPrefs",
      "type": "object"
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "transfersPatchReqToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "purchaseOrdersPatchReqShipAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "107"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "Jeff Chin"
        },
        "Line2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-samplevalue": "Jeff's Jalopies"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "12 Willow Rd."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Menlo Park, CA  94305"
        },
        "Line5": {
          "type": "string",
          "x-samplevalue": "Jalopies@intuit.com (650) 555-8989"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetAllLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Gardening"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "6"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "journalEntriesPostReqLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Opening Bal Equity"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "39"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "creditMemosPostReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "departmentsPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Marketing Department"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "MetaData": {
          "$ref": "#/definitions/departmentsPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Support Department"
        },
        "SubDepartment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Name",
        "SyncToken"
      ],
      "title": "departmentsPutReq",
      "type": "object"
    },
    "creditMemosPutResLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "refundReceiptsPostResLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "10"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "purchasesPatchReqPurchaseEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/purchasesPatchReqPurchaseExAny"
          },
          "type": "array"
        }
      },
      "title": "PurchaseEx",
      "type": "object"
    },
    "purchaseOrdersPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "billPaymentsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "estimatesLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/estimatesLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/estimatesLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "billsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-11-06T15:37:25-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-02-09T10:11:11-08:00"
        }
      },
      "type": "object"
    },
    "depositsPutResLineDepositLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsPutResLineDepositLineDetailAccountRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "creditMemosPutRes": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "BillAddr": {
          "$ref": "#/definitions/creditMemosPutResBillAddr"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosPutResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/creditMemosPutResCustomField"
          },
          "type": "array"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosPutResCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1039"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "147"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosPutResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/creditMemosPutResMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "ShipAddr": {
          "$ref": "#/definitions/creditMemosPutResShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-31"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/creditMemosPutResTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "creditMemosPutRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "billsPutReqLineAccountBasedExpenseLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Job Expenses:Job Materials:Decks and Patios"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].account",
          "x-samplevalue": "64"
        }
      },
      "type": "object"
    },
    "creditMemosGetById": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "BillAddr": {
          "$ref": "#/definitions/creditMemosGetByIdBillAddr"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosGetByIdCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/creditMemosGetByIdCustomField"
          },
          "type": "array"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosGetByIdCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1061"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "173"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosGetByIdLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/creditMemosGetByIdMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-27"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/creditMemosGetByIdTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "creditMemosGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "creditMemosPostReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosPostReqLineSalesItemLineDetailItemRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "depositsGetAllLineDepositLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Opening Balance Equity"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "34"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "vendorCreditsPostResLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/vendorCreditsPostResLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "invoicesPostReqTxnTaxDetail": {
      "properties": {
        "TaxLine": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqTxnTaxDetailTaxLine"
          },
          "type": "array"
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-alias": "taxAmount",
          "x-samplevalue": 26.82
        },
        "TxnTaxCodeRef": {
          "$ref": "#/definitions/invoicesPostReqTxnTaxDetailTxnTaxCodeRef"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetAllLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/salesReceiptsGetAllLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsGetAllLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsGetAllLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "purchaseOrdersGetAllLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "billsCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "journalCodesPutRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Test"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalCodesPutRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "changesGetCustomerBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Palo Alto"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.443231"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "321 Channing"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1561846"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94303"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "preferencesEmailMessagesPrefsSalesReceiptMessage": {
      "properties": {
        "Message": {
          "type": "string",
          "x-samplevalue": "Your sales receipt is attached.\nThank you for your business - we appreciate it very much.\n\nSincerely,\nCraig's Design and Landscaping Services"
        },
        "Subject": {
          "type": "string",
          "x-samplevalue": "Sales Receipt from Craig's Design and Landscaping Services"
        }
      },
      "title": "SalesReceiptMessage",
      "type": "object"
    },
    "refundReceiptsPostResCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "15"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "departmentsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2013-08-13T11:52:48-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2013-08-13T11:52:48-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "creditMemosPutReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "BillAddr": {
          "$ref": "#/definitions/creditMemosPutReqBillAddr"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosPutReqCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/creditMemosPutReqCustomField"
          },
          "type": "array"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosPutReqCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1039"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosPutReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/creditMemosPutReqMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "ShipAddr": {
          "$ref": "#/definitions/creditMemosPutReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-31"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/creditMemosPutReqTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Line",
        "SyncToken"
      ],
      "title": "creditMemosPutReq",
      "type": "object"
    },
    "salesReceiptsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T23:18:03-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T23:18:03-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "budgetsGetAllBudgetDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "billsPutReqSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "invoicesObjectSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "vendorsBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "depositsPatchReqLineDepositLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Unapplied Cash Payment Income"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "87"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "timeActivitiesPostReq": {
      "properties": {
        "CustomerRef": {
          "$ref": "#/definitions/timeActivitiesPostReqCustomerRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Garden Lighting"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesPostReqEmployeeRef"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 15
        },
        "Hours": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesPostReqItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesPostReqMetaData"
        },
        "Minutes": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-17"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "NameOf",
        "EmployeeRef"
      ],
      "title": "timeActivitiesPostReq",
      "type": "object"
    },
    "billPaymentsGetByIdLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].billNumber",
          "x-samplevalue": "234"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "attachmentsAttachableRef": {
      "properties": {
        "EntityRef": {
          "$ref": "#/definitions/attachmentsAttachableRefEntityRef"
        },
        "IncludeOnSend": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "AttachableRef",
      "type": "object"
    },
    "timeActivitiesPostRes": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/timeActivitiesPostResCustomerRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Garden Lighting"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesPostResEmployeeRef"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Hours": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "8"
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesPostResItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesPostResMetaData"
        },
        "Minutes": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-17"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "timeActivitiesPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "journalCodesPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "CustomField": {
          "$ref": "#/definitions/journalCodesPutReqCustomField"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "An updated description"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "2"
        },
        "MetaData": {
          "$ref": "#/definitions/journalCodesPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "VT"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalCodesPutReq",
      "type": "object"
    },
    "billPaymentsPutReqLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].billNumber",
          "x-samplevalue": "234"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Bill"
        }
      },
      "type": "object"
    },
    "billsObjectSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "invoicesCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "StringValue": {
          "type": "string",
          "x-samplevalue": "102"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T01:02:31-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T01:02:31-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "vendorsPatchReqBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchasesGetByIdLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesGetByIdLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchasesGetByIdLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "estimatesBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "103"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "depositsPatchReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "journalEntriesGetById": {
      "properties": {
        "Adjustment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesGetByIdCurrencyRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "3"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "178"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesGetByIdLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/journalEntriesGetByIdMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-27"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalEntriesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "creditMemosGetByIdLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "refundReceiptsPatchReqBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "pyescakes@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "timeActivitiesPostResEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Emily Platt"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "55"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "billsPostReq": {
      "properties": {
        "Line": {
          "items": {
            "$ref": "#/definitions/billsPostReqLine"
          },
          "type": "array"
        },
        "VendorRef": {
          "$ref": "#/definitions/billsPostReqVendorRef"
        }
      },
      "required": [
        "VendorRef"
      ],
      "type": "object"
    },
    "transfersPatchResFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "BulkQuery": {
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "instance_id": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "creditMemosGetByIdLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosGetByIdLineSalesItemLineDetailItemRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/creditMemosGetByIdLineSalesItemLineDetailTaxCodeRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "paymentsPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 55
        },
        "LineEx": {
          "$ref": "#/definitions/paymentsPostReqLineLineEx"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/paymentsPostReqLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "journalEntriesPatchReqLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Truck:Depreciation"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "39"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "budgetsGetAllBudgetDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/budgetsGetAllBudgetDetailAccountRef"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BudgetDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-01-01"
        }
      },
      "title": "BudgetDetail",
      "type": "object"
    },
    "billPaymentsPostReqCreditCardPayment": {
      "properties": {
        "CCAccountRef": {
          "$ref": "#/definitions/billPaymentsPostReqCreditCardPaymentCCAccountRef"
        }
      },
      "title": "CreditCardPayment",
      "type": "object"
    },
    "purchaseOrdersPostResLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "purchasesPostResAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Visa"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "42"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "journalEntriesGetByIdLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Truck:Depreciation"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "39"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "billsPutReqLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/billsPutReqLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/billsPutReqLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/billsPutReqLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "type": "object"
    },
    "purchasesPatchResLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "itemsPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": false
        },
        "Description": {
          "type": "string",
          "x-alias": "inventoryStockDescription",
          "x-samplevalue": "Naga Test"
        },
        "ExpenseAccountRef": {
          "$ref": "#/definitions/itemsPutReqExpenseAccountRef"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Hardware:Naga Test (deleted)"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "869"
        },
        "IncomeAccountRef": {
          "$ref": "#/definitions/itemsPutReqIncomeAccountRef"
        },
        "Level": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "MetaData": {
          "$ref": "#/definitions/itemsPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Naga Test (deleted)"
        },
        "ParentRef": {
          "$ref": "#/definitions/itemsPutReqParentRef"
        },
        "PurchaseCost": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 0
        },
        "SubItem": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Taxable": {
          "type": "boolean",
          "x-alias": "taxable",
          "x-samplevalue": true
        },
        "TrackQtyOnHand": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Type": {
          "type": "string",
          "x-alias": "type",
          "x-samplevalue": "Service"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 38
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "Type",
        "Name"
      ],
      "type": "object"
    },
    "vendorCreditsPatchReqLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "vendorsShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "109"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItemBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Cool Cars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "journalCodesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T22:44:24-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T22:44:24-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchasesGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2020-01-02T01:51:21-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "invoicesLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": [
            {
              "alias": "parentDocumentNumber",
              "path": "LinkedTxn[*].TxnId | [0]"
            }
          ],
          "x-samplevalue": "100"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Estimate"
        }
      },
      "type": "object"
    },
    "itemsIncomeAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "40140 Construction Income:Materials Income"
        },
        "value": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "77"
        }
      },
      "type": "object"
    },
    "paymentsPostReqDepositToAccountRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "bankAccount",
          "x-samplevalue": "4"
        }
      },
      "type": "object"
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "journalEntriesGetAllObject": {
      "properties": {
        "Adjustment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CurrencyRef": {
          "$ref": "#/definitions/journalEntriesGetAllCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "8"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/journalEntriesGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/journalEntriesGetAllMetaData"
        },
        "PrivateNote": {
          "type": "string",
          "x-samplevalue": "Opening Balance"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-20"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "journalEntriesGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "invoicesPutReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/invoicesPutReqLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].quantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/invoicesPutReqLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.price",
          "x-samplevalue": 275
        }
      },
      "type": "object"
    },
    "billsObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-11-06T15:37:25-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-02-09T10:11:11-08:00"
        }
      },
      "type": "object"
    },
    "itemsObjectIncomeAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "40140 Construction Income:Materials Income"
        },
        "value": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "77"
        }
      },
      "type": "object"
    },
    "paymentsPostReq": {
      "properties": {
        "CustomerRef": {
          "$ref": "#/definitions/paymentsPostReqCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/paymentsPostReqDepositToAccountRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/paymentsPostReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentsPostReqMetaData"
        },
        "ProcessPayment": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 65
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "paymentDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-01-16"
        },
        "UnappliedAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "TotalAmt",
        "CustomerRef"
      ],
      "type": "object"
    },
    "refundReceiptsPostResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "companyCurrenciesObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "JPY"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "MetaData": {
          "$ref": "#/definitions/companyCurrenciesMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Japanese Yen"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "companyCurrencies",
      "type": "object"
    },
    "creditMemosGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "billsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-11-06T15:37:25-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-02-09T10:11:11-08:00"
        }
      },
      "type": "object"
    },
    "journalEntriesPostResLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesPostResLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Debit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "billsLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "depositsGetByIDMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-23T13:00:56-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-23T13:00:56-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "vendorCreditsGetAllLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "purchasesPatchResLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPatchResLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchasesPatchResLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "transfersPatchReqFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "purchaseOrdersPostResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "employeesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        }
      },
      "type": "object"
    },
    "salesReceiptsGetByIdBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "321 Channing"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "Palo Alto, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "salesReceiptsPatchResBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Diego@Rodriguez.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "purchaseOrdersPatchResLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllObject": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "BillAddr": {
          "$ref": "#/definitions/creditMemosGetAllBillAddr"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/creditMemosGetAllCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/creditMemosGetAllCustomField"
          },
          "type": "array"
        },
        "CustomerRef": {
          "$ref": "#/definitions/creditMemosGetAllCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1062",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "174",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/creditMemosGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/creditMemosGetAllMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-27",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/creditMemosGetAllTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "creditMemosGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "vendorsPatchReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalOutstandingAmount",
          "x-samplevalue": 274
        },
        "BalanceWithJobs": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 274
        },
        "BillAddr": {
          "$ref": "#/definitions/vendorsPatchReqBillAddr"
        },
        "BillWithParent": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "CompanyName": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "FamilyName": {
          "type": "string",
          "x-samplevalue": "Lauterbach"
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "GivenName": {
          "type": "string",
          "x-samplevalue": "Amy"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "1"
        },
        "Job": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "MetaData": {
          "$ref": "#/definitions/vendorsPatchReqMetaData"
        },
        "MiddleName": {
          "type": "string",
          "x-samplevalue": "Michelle"
        },
        "PreferredDeliveryMethod": {
          "type": "string",
          "x-samplevalue": "Print"
        },
        "PrimaryEmailAddr": {
          "$ref": "#/definitions/vendorsPatchReqPrimaryEmailAddr"
        },
        "PrimaryPhone": {
          "$ref": "#/definitions/vendorsPatchReqPrimaryPhone"
        },
        "PrintOnCheckName": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "ShipAddr": {
          "$ref": "#/definitions/vendorsPatchReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "5"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken"
      ],
      "type": "object"
    },
    "refundReceiptsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchaseOrdersGetAllVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "billsPutReqLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].customer.name",
          "x-samplevalue": "Travis Waldron"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].customer.id",
          "x-samplevalue": "26"
        }
      },
      "type": "object"
    },
    "billsPutReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/billsPutReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "double",
          "type": "number",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 103.55
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Lumber"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "vendorCreditsPatchReqLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "TAX"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "customersPutReqPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "depositsGetByIDCashBack": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsGetByIDCashBackAccountRef"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "Memo": {
          "type": "string",
          "x-samplevalue": "Money to savings"
        }
      },
      "title": "CashBack",
      "type": "object"
    },
    "depositsGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 600
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsGetAllLineDepositLineDetail"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "DepositLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "Line",
      "type": "object"
    },
    "vendorCreditsGetAllObject": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/vendorCreditsGetAllAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "CurrencyRef": {
          "$ref": "#/definitions/vendorCreditsGetAllCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "183"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/vendorCreditsGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/vendorCreditsGetAllMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-23"
        },
        "VendorRef": {
          "$ref": "#/definitions/vendorCreditsGetAllVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "vendorCreditsGetAll",
      "type": "object"
    },
    "invoicesObjectTxnTaxDetailTaxLineTaxLineDetail": {
      "properties": {
        "NetAmountTaxable": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 335.25
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "TaxPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxRateRef": {
          "$ref": "#/definitions/invoicesObjectTxnTaxDetailTaxLineTaxLineDetailTaxRateRef"
        }
      },
      "type": "object"
    },
    "invoicesObjectTxnTaxDetailTaxLineTaxLineDetailTaxRateRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": [
            {
              "alias": "taxRate",
              "path": "TxnTaxDetail.TaxLine[*].TaxLineDetail.TaxRateRef.value | [0]"
            }
          ],
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "invoicesTxnTaxDetailTaxLineTaxLineDetailTaxRateRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": [
            {
              "alias": "taxRate",
              "path": "TxnTaxDetail.TaxLine[*].TaxLineDetail.TaxRateRef.value | [0]"
            }
          ],
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "creditMemosPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "7"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "salesReceiptsPostResLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "vendorCreditsPostReqLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "employeesPrimaryAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "address.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "address.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "116"
        },
        "Line1": {
          "type": "string",
          "x-alias": "address.line1",
          "x-samplevalue": "45 N. Elm Street"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "address.postalCode",
          "x-samplevalue": "93242"
        }
      },
      "type": "object"
    },
    "timeActivitiesPostResItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Lighting"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "8"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "invoicesPostReqCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "type": "object"
    },
    "customersObjectDefaultTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "timeActivitiesGetById": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "EmployeeRef": {
          "$ref": "#/definitions/timeActivitiesGetByIdEmployeeRef"
        },
        "EndTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T18:00:00-08:00"
        },
        "HourlyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "6"
        },
        "ItemRef": {
          "$ref": "#/definitions/timeActivitiesGetByIdItemRef"
        },
        "MetaData": {
          "$ref": "#/definitions/timeActivitiesGetByIdMetaData"
        },
        "NameOf": {
          "type": "string",
          "x-samplevalue": "Employee"
        },
        "StartTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T09:00:00-08:00"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Taxable": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "timeActivitiesGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "paymentMethodsPutRes": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentMethodsPutResMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Cash"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "NON_CREDIT_CARD"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "paymentMethodsPutRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "paymentMethodsPutReq": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "MetaData": {
          "$ref": "#/definitions/paymentMethodsPutReqMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "American Express"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "CREDIT_CARD"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "paymentMethodsPutReq",
      "type": "object"
    },
    "refundReceiptsPostReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsPostReqLineSalesItemLineDetailItemRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "billPaymentsPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200,
          "x-required": true
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billPaymentsPostReqLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "title": "Line",
      "type": "object",
      "required": [
        "Amount"
      ]
    },
    "purchaseOrdersPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "refundReceiptsPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "paymentMethodsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsPatchReqBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "49"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Dylan Sollfrank"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "purchaseOrdersPostReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "purchasesPatchResPurchaseExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "TxnType"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "value",
      "type": "object"
    },
    "companyInfoPatchReqEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "donotreply@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "Email",
      "type": "object"
    },
    "itemsPostReqParentRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "parent.name",
          "x-samplevalue": "Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "parent.id",
          "x-samplevalue": "36"
        }
      },
      "type": "object"
    },
    "creditMemosGetByIdLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Concrete"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "journalCodesPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-10-30T11:06:19-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-10-30T11:06:19-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "changesGetEstimateCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Paulsen Medical Supplies"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "18"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "invoicesPutReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "5"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYId": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/refundReceiptsGetBYIdBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/refundReceiptsGetBYIdBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/refundReceiptsGetBYIdCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/refundReceiptsGetBYIdCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1020"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "66"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsGetBYIdLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/refundReceiptsGetBYIdMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/refundReceiptsGetBYIdPaymentMethodRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "ShipAddr": {
          "$ref": "#/definitions/refundReceiptsGetBYIdShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-21"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/refundReceiptsGetBYIdTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "refundReceiptsGetBYId",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "csdcds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1223"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "creditMemosGetAllLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosGetAllLineSalesItemLineDetailItemRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/creditMemosGetAllLineSalesItemLineDetailTaxCodeRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "depositsPostReqLineDepositLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsPostReqLineDepositLineDetailAccountRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "purchasesPostResLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/purchasesPostResLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchasesPostResLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "purchasesPostResPurchaseExAnyValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "TxnType"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "54"
        }
      },
      "title": "value",
      "type": "object"
    },
    "estimatesLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Pest Control Services"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "DiscountLineDetail": {
          "$ref": "#/definitions/estimatesLineDiscountLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/estimatesLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "taxCodesGetByIdSalesTaxRateListTaxRateDetail": {
      "properties": {
        "TaxOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxRateRef": {
          "$ref": "#/definitions/taxCodesGetByIdSalesTaxRateListTaxRateDetailTaxRateRef"
        },
        "TaxTypeApplicable": {
          "type": "string",
          "x-samplevalue": "TaxOnAmount"
        }
      },
      "title": "TaxRateDetail",
      "type": "object"
    },
    "salesReceiptsGetByIdTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "creditMemosLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "vendorsPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "itemsPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:07:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:08:36-08:00"
        }
      },
      "type": "object"
    },
    "billsLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/billsLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "double",
          "type": "number",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 103.55
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Lumber"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "refundReceiptsPatchResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "billsPutReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "journalEntriesPatchResLineJournalEntryLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/journalEntriesPatchResLineJournalEntryLineDetailAccountRef"
        },
        "PostingType": {
          "type": "string",
          "x-samplevalue": "Debit"
        }
      },
      "title": "JournalEntryLineDetail",
      "type": "object"
    },
    "transfersPostResToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "creditMemosPutReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosPutReqLineSalesItemLineDetailItemRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/creditMemosPutReqLineSalesItemLineDetailTaxCodeRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "estimatesObject": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "BillAddr": {
          "$ref": "#/definitions/estimatesBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/estimatesBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/estimatesCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/estimatesCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/estimatesCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1001",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "177"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/estimatesLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/estimatesMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "ShipAddr": {
          "$ref": "#/definitions/estimatesShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 31.5,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-03-26",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "TxnStatus": {
          "type": "string",
          "x-samplevalue": "Pending"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/estimatesTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "estimates",
      "type": "object"
    },
    "changesGetEstimateBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Medical@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "salesReceiptsPatchResDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Undeposited Funds"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "itemsPostReqExpenseAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "50100 Cost of Goods Sold"
        },
        "value": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "79"
        }
      },
      "type": "object"
    },
    "creditMemosPostReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "CoolCars"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqLineItemBasedExpenseLineDetailCustomerRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersPatchReqLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "invoicesPutReqTxnTaxDetail": {
      "properties": {
        "TaxLine": {
          "items": {
            "$ref": "#/definitions/invoicesPutReqTxnTaxDetailTaxLine"
          },
          "type": "array"
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-alias": "taxAmount",
          "x-samplevalue": 26.82
        },
        "TxnTaxCodeRef": {
          "$ref": "#/definitions/invoicesPutReqTxnTaxDetailTxnTaxCodeRef"
        }
      },
      "type": "object"
    },
    "vendorCreditsPostResLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/vendorCreditsPostResLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/vendorCreditsPostResLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/vendorCreditsPostResLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "title": "AccountBasedExpenseLineDetail",
      "type": "object"
    },
    "changesGetEstimateTxnTaxDetail": {
      "properties": {
        "TaxLine": {
          "items": {
            "$ref": "#/definitions/changesGetEstimateTxnTaxDetailTaxLine"
          },
          "type": "array"
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TxnTaxCodeRef": {
          "$ref": "#/definitions/changesGetEstimateTxnTaxDetailTxnTaxCodeRef"
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "taxRatesGetAllObject": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "AgencyRef": {
          "$ref": "#/definitions/taxRatesGetAllAgencyRef"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Sales Tax",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "DisplayType": {
          "type": "string",
          "x-samplevalue": "ReadOnly",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "MetaData": {
          "$ref": "#/definitions/taxRatesGetAllMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "AZ State tax",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "RateValue": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 7.1,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SpecialTaxType": {
          "type": "string",
          "x-samplevalue": "NONE",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "taxRatesGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "refundReceiptsGetAllCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "15"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchaseOrdersGetAllLineItemBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "NON"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "journalEntriesGetAllLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Notes Payable"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "44"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "refundReceiptsPatchResLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Refund - Pest control was ineffective"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsPatchResLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "depositsPostResLineDepositLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsPostResLineDepositLineDetailAccountRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "refundReceiptsGetAllObject": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "BillAddr": {
          "$ref": "#/definitions/refundReceiptsGetAllBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/refundReceiptsGetAllBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/refundReceiptsGetAllCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/refundReceiptsGetAllCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/refundReceiptsGetAllCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/refundReceiptsGetAllCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/refundReceiptsGetAllDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1020"
        },
        "FreeFormAddress": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "66",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/refundReceiptsGetAllLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/refundReceiptsGetAllMetaData"
        },
        "PaymentMethodRef": {
          "$ref": "#/definitions/refundReceiptsGetAllPaymentMethodRef"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-21",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/refundReceiptsGetAllTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "refundReceiptsGetAll",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "timeActivitiesPostReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Rondonuwu Fruit and Vegi"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "21"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "refundReceiptsPatchResCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "15"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "depositsGetAllLineDepositLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/depositsGetAllLineDepositLineDetailAccountRef"
        }
      },
      "title": "DepositLineDetail",
      "type": "object"
    },
    "purchasesGetAllPurchaseEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/purchasesGetAllPurchaseExAny"
          },
          "type": "array"
        }
      },
      "title": "PurchaseEx",
      "type": "object"
    },
    "refundReceiptsGetBYIdBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "pyescakes@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "purchaseOrdersGetAllVendorAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "92"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Julie Norton"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "4528 Country Road"
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "type": "object"
    },
    "ledgeraccountsPostReqCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "itemsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:07:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:08:36-08:00"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostRes": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersPostResAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersPostResCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "191"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersPostResMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersPostResShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "VendorAddr": {
          "$ref": "#/definitions/purchaseOrdersPostResVendorAddr"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersPostResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "invoicesLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/invoicesLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].quantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/invoicesLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.price",
          "x-samplevalue": 275
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReq": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqAPAccountRef"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqCustomField"
          },
          "type": "array"
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1005"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "191"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/purchaseOrdersPostReqMetaData"
        },
        "POStatus": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "Open"
        },
        "ShipAddr": {
          "$ref": "#/definitions/purchaseOrdersPostReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 25
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "VendorAddr": {
          "$ref": "#/definitions/purchaseOrdersPostReqVendorAddr"
        },
        "VendorRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "APAccountRef",
        "VendorRef"
      ],
      "type": "object"
    },
    "billPaymentsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:57:18-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T09:18:19-08:00"
        }
      },
      "type": "object"
    },
    "purchasesGetByIdLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "purchasesGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "creditMemosGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosGetAllLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "billPaymentsPutReqCheckPaymentBankAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-alias": "checkBankAccount",
          "x-samplevalue": "35"
        }
      },
      "type": "object"
    },
    "billPaymentsPostResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Patton Hardware Supplies"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "11"
        }
      },
      "title": "VendorRef",
      "type": "object"
    },
    "BulkJobList": {
      "title": "BulkJobList",
      "properties": {
        "record_count": {
          "x-samplevalue": 41,
          "format": "int32",
          "type": "integer"
        },
        "job_query": {
          "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type": "string"
        },
        "job_reset_attempt": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "completion_time": {
          "x-samplevalue": 1542829827804,
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "x-samplevalue": "COMPLETED",
          "type": "string"
        },
        "notification_url": {
          "type": "string"
        },
        "job_direction": {
          "x-samplevalue": "DOWNLOAD",
          "type": "string"
        },
        "error_count": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "job_state": {
          "type": "string"
        },
        "createdDate": {
          "x-samplevalue": 1542829826619,
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "x-samplevalue": 1722,
          "format": "int32",
          "type": "integer"
        },
        "instanceId": {
          "x-samplevalue": 123453,
          "format": "int32",
          "type": "integer"
        },
        "object_name": {
          "x-samplevalue": "systemuser",
          "type": "string"
        },
        "fileFormat": {
          "x-samplevalue": "csv",
          "type": "string"
        }
      },
      "type": "object"
    },
    "companyInfoPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-06-05T13:55:54-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-06T08:51:50-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "creditMemosGetByIdCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "salesReceiptsGetByIdLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Weekly Gardening Service"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/salesReceiptsGetByIdLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "invoicesPutReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 275
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/invoicesPutReqLineSalesItemLineDetail"
        }
      },
      "type": "object"
    },
    "paymentsMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        }
      },
      "type": "object"
    },
    "preferencesEmailMessagesPrefs": {
      "properties": {
        "EstimateMessage": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefsEstimateMessage"
        },
        "InvoiceMessage": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefsInvoiceMessage"
        },
        "SalesReceiptMessage": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefsSalesReceiptMessage"
        },
        "StatementMessage": {
          "$ref": "#/definitions/preferencesEmailMessagesPrefsStatementMessage"
        }
      },
      "title": "EmailMessagesPrefs",
      "type": "object"
    },
    "transfersGetByIdCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "refundReceiptsPatchReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "15"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "changesGetCustomerMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T16:52:08-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T16:52:08-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "changesGetCustomerShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "11"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4559621"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "1045 Main St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.429939"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "purchaseOrdersGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:03:23-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T04:10:54-08:00"
        }
      },
      "type": "object"
    },
    "invoicesPutReqCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "24"
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-16T14:59:48-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-16T14:59:48-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "estimatesLineDiscountLineDetail": {
      "properties": {
        "DiscountAccountRef": {
          "$ref": "#/definitions/estimatesLineDiscountLineDetailDiscountAccountRef"
        },
        "DiscountPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        }
      },
      "title": "DiscountLineDetail",
      "type": "object"
    },
    "customersObjectPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "invoicesPutReqTxnTaxDetailTaxLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 26.82
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "TaxLineDetail"
        },
        "TaxLineDetail": {
          "$ref": "#/definitions/invoicesPutReqTxnTaxDetailTaxLineTaxLineDetail"
        }
      },
      "type": "object"
    },
    "purchasesPatchResPurchaseExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/purchasesPatchResPurchaseExAnyValue"
        }
      },
      "title": "any",
      "type": "object"
    },
    "changesGetCustomerWebAddr": {
      "properties": {
        "URI": {
          "type": "string",
          "x-samplevalue": "http://gevelberphotography.com"
        }
      },
      "title": "WebAddr",
      "type": "object"
    },
    "taxAgenciesObject": {
      "properties": {
        "DisplayName": {
          "type": "string",
          "x-samplevalue": "Arizona Dept. of Revenue"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/taxAgenciesMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TaxTrackedOnPurchases": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "TaxTrackedOnSales": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "taxAgencies",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "journalEntriesPatchReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T21:58:29-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-29T21:58:29-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "itemsPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:07:15-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-16T11:08:36-08:00"
        }
      },
      "type": "object"
    },
    "depositsGetByID": {
      "properties": {
        "CashBack": {
          "$ref": "#/definitions/depositsGetByIDCashBack"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/depositsGetByIDCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsGetByIDDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "121"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsGetByIDLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/depositsGetByIDMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 868.15
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-23"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "depositsGetByID",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "purchasesGetAllEntityRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Hicks Hardware"
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Vendor"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "41"
        }
      },
      "title": "EntityRef",
      "type": "object"
    },
    "salesReceiptsGetByIdCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Diego Rodriguez"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "purchasesPostResPurchaseEx": {
      "properties": {
        "any": {
          "items": {
            "$ref": "#/definitions/purchasesPostResPurchaseExAny"
          },
          "type": "array"
        }
      },
      "title": "PurchaseEx",
      "type": "object"
    },
    "salesReceiptsGetByIdLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Landscaping Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "45"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "purchasesGetAllPurchaseExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/purchasesGetAllPurchaseExAnyValue"
        }
      },
      "title": "any",
      "type": "object"
    },
    "purchaseOrdersGetByIdLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Pump"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "11"
        }
      },
      "type": "object"
    },
    "creditMemosMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-26T20:46:36-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsGetAllLineSalesItemLineDetailItemAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Landscaping Services"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "45"
        }
      },
      "title": "ItemAccountRef",
      "type": "object"
    },
    "invoicesObjectLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "paymentsPutReqLineLineExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/paymentsPutReqLineLineExAnyValue"
        }
      },
      "type": "object"
    },
    "companyInfoPatchReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-samplevalue": "(650)944-4444"
        }
      },
      "title": "PrimaryPhone",
      "type": "object"
    },
    "creditMemosPutReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "refundReceiptsPatchResBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "73"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7489277"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Karen Pye"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "South Orange, NJ  07079"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2609903"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "billPaymentsPostReqCreditCardPaymentCCAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "MyCC"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "100"
        }
      },
      "title": "CCAccountRef",
      "type": "object"
    },
    "invoicesPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 275
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/invoicesPostReqLineSalesItemLineDetail"
        }
      },
      "type": "object"
    },
    "customersPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-11T16:48:43-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-01T10:14:15-07:00"
        }
      },
      "type": "object"
    },
    "invoicesPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        }
      },
      "type": "object"
    },
    "ledgeraccountsGetById": {
      "properties": {
        "AccountSubType": {
          "type": "string",
          "x-samplevalue": "AccountsPayable"
        },
        "AccountType": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "Accounts Payable"
        },
        "Active": {
          "type": "boolean",
          "x-alias": "active",
          "x-samplevalue": true
        },
        "Classification": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "Liability"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/ledgeraccountsGetByIdCurrencyRef"
        },
        "CurrentBalance": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": -1091.23
        },
        "CurrentBalanceWithSubAccounts": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -1091.23
        },
        "FullyQualifiedName": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "33"
        },
        "MetaData": {
          "$ref": "#/definitions/ledgeraccountsGetByIdMetaData"
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "SubAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "refundReceiptsGetBYIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T15:35:07-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "billsObjectLineAccountBasedExpenseLineDetail": {
      "properties": {
        "AccountRef": {
          "$ref": "#/definitions/billsObjectLineAccountBasedExpenseLineDetailAccountRef"
        },
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "Billable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/billsObjectLineAccountBasedExpenseLineDetailCustomerRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/billsObjectLineAccountBasedExpenseLineDetailTaxCodeRef"
        }
      },
      "type": "object"
    },
    "estimatesShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "104"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "salesReceiptsPatchReqLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Design"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "salesReceiptsGetAllTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "billPaymentsGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 200
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billPaymentsGetAllLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdVendorAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "92"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4530553"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Julie Norton"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "4528 Country Road"
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1178261"
        }
      },
      "type": "object"
    },
    "refundReceiptsPatchResShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "South Orange"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "NJ"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "15"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7633073"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2426072"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "07079"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "vendorsDefaultTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "creditMemosGetByIdBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4300318"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.4336537"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "estimatesPostReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "BillAddr": {
          "$ref": "#/definitions/estimatesBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/estimatesBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/estimatesCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/estimatesCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/estimatesCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1001"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/estimatesLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/estimatesMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "ShipAddr": {
          "$ref": "#/definitions/estimatesShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 31.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-03-26"
        },
        "TxnStatus": {
          "type": "string",
          "x-samplevalue": "Pending"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/estimatesTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "Line",
        "CustomerRef"
      ],
      "title": "estimates",
      "type": "object"
    },
    "companyInfosEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "donotreply@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "Email",
      "type": "object"
    },
    "changesGetCustomerMobile": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-samplevalue": "(973) 555-2234"
        }
      },
      "title": "Mobile",
      "type": "object"
    },
    "purchaseOrdersGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Fountain Pump"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersGetAllLineItemBasedExpenseLineDetail"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "depositsPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "DepositLineDetail": {
          "$ref": "#/definitions/depositsPostReqLineDepositLineDetail"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "DepositLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "refundReceiptsPatchReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/refundReceiptsPatchReqLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 2.5
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/refundReceiptsPatchReqLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "vendorCreditsPatchRes": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/vendorCreditsPatchResAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "CurrencyRef": {
          "$ref": "#/definitions/vendorCreditsPatchResCurrencyRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "183"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/vendorCreditsPatchResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/vendorCreditsPatchResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-12-23"
        },
        "VendorRef": {
          "$ref": "#/definitions/vendorCreditsPatchResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "vendorCreditsPatchRes",
      "type": "object"
    },
    "billPaymentsPostReqCheckPaymentBankAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "58"
        }
      },
      "title": "BankAccountRef",
      "type": "object"
    },
    "salesReceiptsGetByIdLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "62"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Deposit"
        }
      },
      "title": "LinkedTxn",
      "type": "object"
    },
    "vendorCreditsPatchReq": {
      "properties": {
        "APAccountRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqAPAccountRef"
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "CurrencyRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqCurrencyRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/vendorCreditsPatchReqLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/vendorCreditsPatchReqMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 90
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-12-23"
        },
        "VendorRef": {
          "$ref": "#/definitions/vendorCreditsPatchReqVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "vendorCreditsPatchReq",
      "type": "object"
    },
    "invoicesObjectBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Familiystore@intuit.com"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostResCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "purchaseOrdersPostReqVendorAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "92"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Julie Norton"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Norton Lumber and Building Materials"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "4528 Country Road"
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        }
      },
      "type": "object"
    },
    "vendorsPostReqBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "preferencesSalesFormsPrefsDefaultTerms": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "3"
        }
      },
      "title": "DefaultTerms",
      "type": "object"
    },
    "billsPutReqLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "118"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "BillPaymentCheck"
        }
      },
      "type": "object"
    },
    "billsPutReqAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "33"
        }
      },
      "type": "object"
    },
    "refundReceiptsPostReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 420
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsPostReqLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "purchaseOrdersPatchResVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Hicks Hardware"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "41"
        }
      },
      "type": "object"
    },
    "purchasesPatchReqPurchaseExAny": {
      "properties": {
        "declaredType": {
          "type": "string",
          "x-samplevalue": "com.intuit.schema.finance.v3.NameValue"
        },
        "globalScope": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "name": {
          "type": "string",
          "x-samplevalue": "{http://schema.intuit.com/finance/v3}NameValue"
        },
        "nil": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "scope": {
          "type": "string",
          "x-samplevalue": "javax.xml.bind.JAXBElement$GlobalScope"
        },
        "typeSubstituted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "value": {
          "$ref": "#/definitions/purchasesPatchReqPurchaseExAnyValue"
        }
      },
      "title": "any",
      "type": "object"
    },
    "billPaymentsGetAllCreditCardPayment": {
      "properties": {
        "CCAccountRef": {
          "$ref": "#/definitions/billPaymentsGetAllCreditCardPaymentCCAccountRef"
        }
      },
      "type": "object"
    },
    "creditMemosBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "98"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "journalEntriesPatchResLineJournalEntryLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Truck:Depreciation"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "39"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "salesReceiptsPatchResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "invoicesPostReqBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Familiystore@intuit.com"
        }
      },
      "type": "object"
    },
    "invoicesPutReqSalesTermRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "paymentTerms.id",
          "x-samplevalue": "3"
        }
      },
      "type": "object"
    },
    "invoicesCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "customer.name",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "value": {
          "type": "string",
          "x-alias": "customer.id",
          "x-samplevalue": "24"
        }
      },
      "type": "object"
    },
    "purchasesGetAllLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchasesGetAllLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchasesGetAllLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 125
        }
      },
      "title": "ItemBasedExpenseLineDetail",
      "type": "object"
    },
    "customersPostReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "estimatesPutReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "BillAddr": {
          "$ref": "#/definitions/estimatesBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/estimatesBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/estimatesCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/estimatesCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/estimatesCustomerRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1001"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "177"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/estimatesLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/estimatesMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "ShipAddr": {
          "$ref": "#/definitions/estimatesShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 31.5
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2015-03-26"
        },
        "TxnStatus": {
          "type": "string",
          "x-samplevalue": "Pending"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/estimatesTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "CustomerRef"
      ],
      "title": "estimates",
      "type": "object"
    },
    "purchasesPostReqAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Visa"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "42"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "refundReceiptsPatchReqBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "73"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7489277"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Karen Pye"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "South Orange, NJ  07079"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2609903"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "salesReceiptsPatchResLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/salesReceiptsPatchResLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsPatchResLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsPatchResLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "changesGetCustomerPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Diego@Rodriguez.com",
          "x-sub-format": "email"
        }
      },
      "title": "PrimaryEmailAddr",
      "type": "object"
    },
    "estimatesLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "vendorCreditsGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "creditMemosGetByIdLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 50
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/creditMemosGetByIdLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "companyCurrenciesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-06-19T09:20:44-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-06-19T09:20:44-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "paymentsObjectMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-01-16T15:08:12-08:00"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchResLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResLineItemBasedExpenseLineDetailCustomerRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersPatchResLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "depositsPatchReqDepositToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "DepositToAccountRef",
      "type": "object"
    },
    "salesReceiptsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:40:52-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "salesReceiptsGetById": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "BillAddr": {
          "$ref": "#/definitions/salesReceiptsGetByIdBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/salesReceiptsGetByIdBillEmail"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdCurrencyRef"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetByIdCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/salesReceiptsGetByIdCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdCustomerRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdDepositToAccountRef"
        },
        "DocNumber": {
          "type": "string",
          "x-samplevalue": "1014"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "47"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetByIdLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/salesReceiptsGetByIdLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/salesReceiptsGetByIdMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 140
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-08-19"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/salesReceiptsGetByIdTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "salesReceiptsGetById",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "changesGetCustomerParentRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "22"
        }
      },
      "title": "ParentRef",
      "type": "object"
    },
    "transfersGetByIdFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "invoicesPostReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-19T13:16:17-07:00"
        }
      },
      "type": "object"
    },
    "refundReceiptsGetBYIdLine": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 87.5
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Refund - Pest control was ineffective"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "SalesItemLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "SalesItemLineDetail": {
          "$ref": "#/definitions/refundReceiptsGetBYIdLineSalesItemLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "refundReceiptsPatchReqPaymentMethodRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "2"
        }
      },
      "title": "PaymentMethodRef",
      "type": "object"
    },
    "invoicesPutReqBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Familiystore@intuit.com"
        }
      },
      "type": "object"
    },
    "depositsGetByIDCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "refundReceiptsPostResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "purchaseOrdersPatchReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersPatchReqLineItemBasedExpenseLineDetail"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "type": "object"
    },
    "refundReceiptsGetAllCustomerMemo": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "CustomerMemo",
      "type": "object"
    },
    "vendorCreditsGetAllVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Books by Bessie"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "30"
        }
      },
      "title": "VendorRef",
      "type": "object"
    },
    "invoicesLineSalesItemLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].product.name",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "5"
        }
      },
      "type": "object"
    },
    "paymentsObjectLineLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-alias": "lines[*].invoice.id",
          "x-samplevalue": "70"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Invoice"
        }
      },
      "type": "object"
    },
    "changesGetEstimateLinkedTxn": {
      "properties": {
        "TxnId": {
          "type": "string",
          "x-samplevalue": "130"
        },
        "TxnType": {
          "type": "string",
          "x-samplevalue": "Invoice"
        }
      },
      "title": "LinkedTxn",
      "type": "object"
    },
    "billPaymentsPutReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "PG&E"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "48"
        }
      },
      "type": "object"
    },
    "purchasesPostReqLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesPostReqLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "refundReceiptsPatchReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "South Orange"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "NJ"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "15"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7633073"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2426072"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "07079"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "companyInfo": {
      "properties": {
        "CompanyAddr": {
          "$ref": "#/definitions/companyInfoCompanyAddr"
        },
        "CompanyName": {
          "type": "string",
          "x-samplevalue": "CE Ref QBFile Single Currency"
        },
        "CompanyStartDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2017-07-07"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CustomerCommunicationAddr": {
          "$ref": "#/definitions/companyInfoCustomerCommunicationAddr"
        },
        "Email": {
          "$ref": "#/definitions/companyInfoEmail"
        },
        "FiscalYearStartMonth": {
          "type": "string",
          "x-samplevalue": "January"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "LegalAddr": {
          "$ref": "#/definitions/companyInfoLegalAddr"
        },
        "LegalName": {
          "type": "string",
          "x-samplevalue": "CE Ref QBFile Single Currency"
        },
        "MetaData": {
          "$ref": "#/definitions/companyInfoMetaData"
        },
        "NameValue": {
          "items": {
            "$ref": "#/definitions/companyInfoNameValue"
          },
          "type": "array"
        },
        "SupportedLanguages": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "54"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "companyInfo",
      "type": "object"
    },
    "salesReceiptsGetAllCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "journalEntriesPatchReqLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "nov portion of rider insurance"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "JournalEntryLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "JournalEntryLineDetail": {
          "$ref": "#/definitions/journalEntriesPatchReqLineJournalEntryLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "journalEntriesPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "purchasesGetAllLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 125
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Rock Fountain"
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesGetAllLineItemBasedExpenseLineDetail"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "companyInfosLegalAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "LegalAddr",
      "type": "object"
    },
    "customersBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-samplevalue": "Bayshore"
        },
        "Country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-samplevalue": "USA"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "2"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "4581 Finch St."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "INVALID"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "billingAddress.postalCode",
          "x-samplevalue": "94326"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqLineItemBasedExpenseLineDetail": {
      "properties": {
        "BillableStatus": {
          "type": "string",
          "x-samplevalue": "NotBillable"
        },
        "CustomerRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqLineItemBasedExpenseLineDetailCustomerRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqLineItemBasedExpenseLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/purchaseOrdersPostReqLineItemBasedExpenseLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 300
        }
      },
      "type": "object"
    },
    "billPaymentsGetByIdLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 200
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/billPaymentsGetByIdLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "creditMemosCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "refundReceiptsPostResBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "pyescakes@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "vendorCreditsPatchReqAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "33"
        }
      },
      "title": "APAccountRef",
      "type": "object"
    },
    "purchaseOrdersPatchResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        }
      },
      "type": "object"
    },
    "depositsGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-19T12:09:00-07:00",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-19T12:09:00-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "purchasesPostResLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "creditMemosLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/creditMemosLineSalesItemLineDetailItemRef"
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/creditMemosLineSalesItemLineDetailTaxCodeRef"
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "vendorCreditsPostReqAPAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Accounts Payable (A/P)"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "33"
        }
      },
      "title": "APAccountRef",
      "type": "object"
    },
    "timeActivitiesGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:55:25-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-21T11:55:25-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "companyInfoNameValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "NeoEnabled"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "true"
        }
      },
      "title": "NameValue",
      "type": "object"
    },
    "bulkDownloadRequest": {
      "properties": {
        "apiLimit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "continueFromJobId": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "docsHubDetails": {
          "$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
        },
        "filterDateField": {
          "type": "string",
          "x-samplevalue": "lastModifiedDate"
        },
        "filterNulls": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "format": {
          "enum": [
            "application/json",
            "txt/csv",
            "application/jsonl"
          ],
          "type": "string",
          "x-samplevalue": "application/json"
        },
        "from": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-06T13:22:17-08:00"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 107
        },
        "notificationUrl": {
          "type": "string",
          "x-samplevalue": "https://myreceiver.com/whatever"
        },
        "objectName": {
          "type": "string",
          "x-samplevalue": "accounts"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "query": {
          "$ref": "#/definitions/bulkDownloadRequestQuery"
        },
        "selectFields": {
          "type": "string",
          "x-samplevalue": "a,b,c"
        },
        "to": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-10T13:22:17-08:00"
        },
        "where": {
          "type": "string",
          "x-samplevalue": "name='Alex' and gender='male'"
        }
      },
      "required": [
        "objectName",
        "format"
      ],
      "title": "bulkDownloadRequest",
      "type": "object"
    },
    "preferencesEmailMessagesPrefsInvoiceMessage": {
      "properties": {
        "Message": {
          "type": "string",
          "x-samplevalue": "Your invoice is attached.  Please remit payment at your earliest convenience.\nThank you for your business - we appreciate it very much.\n\nSincerely,\nCraig's Design and Landscaping Services"
        },
        "Subject": {
          "type": "string",
          "x-samplevalue": "Invoice from Craig's Design and Landscaping Services"
        }
      },
      "title": "InvoiceMessage",
      "type": "object"
    },
    "customersPutReqPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "contact.phone",
          "x-samplevalue": "(650) 555-3311"
        }
      },
      "type": "object"
    },
    "timeActivitiesPutReqItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Design"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "4"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "vendorCreditsPostResMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-30T00:47:39-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "companyCurrenciesPutReq": {
      "properties": {
        "Code": {
          "type": "string",
          "x-samplevalue": "GBP"
        }
      },
      "title": "companyCurrenciesPutReq",
      "type": "object"
    },
    "invoicesObjectLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/invoicesObjectLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].quantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/invoicesObjectLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.price",
          "x-samplevalue": 275
        }
      },
      "type": "object"
    },
    "salesReceiptsPatchResTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "invoicesTxnTaxDetail": {
      "properties": {
        "TaxLine": {
          "items": {
            "$ref": "#/definitions/invoicesTxnTaxDetailTaxLine"
          },
          "type": "array"
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-alias": "taxAmount",
          "x-samplevalue": 26.82
        },
        "TxnTaxCodeRef": {
          "$ref": "#/definitions/invoicesTxnTaxDetailTxnTaxCodeRef"
        }
      },
      "type": "object"
    },
    "timeActivitiesGetAllCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Rondonuwu Fruit and Vegi"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "21"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "changesGetEstimateTxnTaxDetailTaxLineTaxLineDetail": {
      "properties": {
        "NetAmountTaxable": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 335.25
        },
        "PercentBased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "TaxPercent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxRateRef": {
          "$ref": "#/definitions/changesGetEstimateTxnTaxDetailTaxLineTaxLineDetailTaxRateRef"
        }
      },
      "title": "TaxLineDetail",
      "type": "object"
    },
    "transfersPostResFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "companyCurrencies": {
      "items": {
        "$ref": "#/definitions/companyCurrenciesObject"
      },
      "type": "array"
    },
    "timeActivitiesPostReqEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Emily Platt"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "55"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "paymentMethodsGetById": {
      "properties": {
        "Active": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "MetaData": {
          "$ref": "#/definitions/paymentMethodsGetByIdMetaData"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Cash"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "NON_CREDIT_CARD"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "paymentMethodsGetById",
      "type": "object"
    },
    "refundReceiptsPatchResCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "employeesObjectPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "234-525-1234"
        }
      },
      "type": "object"
    },
    "employeesPutReqMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-07-24T09:34:35-07:00"
        }
      },
      "type": "object"
    },
    "creditMemosShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "99"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "taxServicePostResTaxRateDetails": {
      "properties": {
        "RateValue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "TaxAgencyId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TaxApplicableOn": {
          "type": "string",
          "x-samplevalue": "Sales"
        },
        "TaxRateId": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "TaxRateName": {
          "type": "string",
          "x-samplevalue": "myNewTaxRateName"
        }
      },
      "title": "TaxRateDetails",
      "type": "object"
    },
    "billPaymentsPostReq": {
      "properties": {
        "CheckPayment": {
          "$ref": "#/definitions/billPaymentsPostReqCheckPayment"
        },
        "CreditCardPayment": {
          "$ref": "#/definitions/billPaymentsPostReqCreditCardPayment"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billPaymentsPostReqCurrencyRef"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/billPaymentsPostReqLine"
          },
          "type": "array",
          "x-required": true
        },
        "PayType": {
          "enum": [
            "Check",
            "CreditCard"
          ],
          "type": "string",
          "x-samplevalue": "Check",
          "x-required": true
        },
        "PrivateNote": {
          "type": "string",
          "x-samplevalue": "RC 94"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200,
          "x-required": true
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsPostReqVendorRef",
          "x-required": true
        }
      },
      "title": "billPaymentsPostReq",
      "type": "object",
      "required": [
        "Line",
        "PayType",
        "TotalAmt",
        "VendorRef"
      ]
    },
    "billPaymentsPostRes": {
      "properties": {
        "CheckPayment": {
          "$ref": "#/definitions/billPaymentsPostResCheckPayment"
        },
        "CurrencyRef": {
          "$ref": "#/definitions/billPaymentsPostResCurrencyRef"
        },
        "ExchangeRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "23146"
        },
        "MetaData": {
          "$ref": "#/definitions/billPaymentsPostResMetaData"
        },
        "PayType": {
          "type": "string",
          "x-samplevalue": "Check"
        },
        "PrivateNote": {
          "type": "string",
          "x-samplevalue": "RC 94"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2021-01-06"
        },
        "VendorRef": {
          "$ref": "#/definitions/billPaymentsPostResVendorRef"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "billPaymentsPostRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "taxCodesGetAllMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-22T12:17:04-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "transfersPostReqFromAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Checking"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "35"
        }
      },
      "title": "FromAccountRef",
      "type": "object"
    },
    "itemsPutReqExpenseAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "50100 Cost of Goods Sold"
        },
        "value": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "79"
        }
      },
      "type": "object"
    },
    "paymentsLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].amount",
          "x-samplevalue": 55
        },
        "LineEx": {
          "$ref": "#/definitions/paymentsLineLineEx"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/paymentsLineLinkedTxn"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "purchasesPatchResLine": {
      "properties": {
        "AccountBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchasesPatchResLineAccountBasedExpenseLineDetail"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "AccountBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "Line",
      "type": "object"
    },
    "changesGetObject": {
      "properties": {
        "Customer": {
          "items": {
            "$ref": "#/definitions/changesGetCustomer"
          },
          "type": "array"
        },
        "Estimate": {
          "items": {
            "$ref": "#/definitions/changesGetEstimate"
          },
          "type": "array"
        },
        "maxResults": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 44
        },
        "startPosition": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "title": "changesGet",
      "type": "object"
    },
    "purchaseOrdersPatchReqCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "type": "object"
    },
    "salesReceiptsPostResTxnTaxDetail": {
      "properties": {
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "TxnTaxDetail",
      "type": "object"
    },
    "purchasesGetAllLineItemBasedExpenseLineDetailItemRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Rock Fountain"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "5"
        }
      },
      "title": "ItemRef",
      "type": "object"
    },
    "purchaseOrdersPatchResLine": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].totalAmount",
          "x-samplevalue": 25
        },
        "DetailType": {
          "type": "string",
          "x-samplevalue": "ItemBasedExpenseLineDetail"
        },
        "Id": {
          "type": "string",
          "x-alias": "lines[*].id",
          "x-samplevalue": "1"
        },
        "ItemBasedExpenseLineDetail": {
          "$ref": "#/definitions/purchaseOrdersPatchResLineItemBasedExpenseLineDetail"
        },
        "LineNum": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        }
      },
      "type": "object"
    },
    "invoicesPutReqTxnTaxDetailTxnTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "invoicesPostReqLineSalesItemLineDetail": {
      "properties": {
        "ItemRef": {
          "$ref": "#/definitions/invoicesPostReqLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].quantity",
          "x-samplevalue": 1
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/invoicesPostReqLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.price",
          "x-samplevalue": 275
        }
      },
      "type": "object"
    },
    "companyInfosCustomerCommunicationAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Mountain View"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "US"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "2500 Garcia Ave"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94043"
        }
      },
      "title": "CustomerCommunicationAddr",
      "type": "object"
    },
    "salesReceiptsGetByIdLineSalesItemLineDetail": {
      "properties": {
        "ItemAccountRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdLineSalesItemLineDetailItemAccountRef"
        },
        "ItemRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdLineSalesItemLineDetailItemRef"
        },
        "Qty": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "TaxCodeRef": {
          "$ref": "#/definitions/salesReceiptsGetByIdLineSalesItemLineDetailTaxCodeRef"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 35
        }
      },
      "title": "SalesItemLineDetail",
      "type": "object"
    },
    "timeActivitiesGetAllEmployeeRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Emily Platt"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "55"
        }
      },
      "title": "EmployeeRef",
      "type": "object"
    },
    "creditMemosGetAllCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "transfersGetByIdToAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Savings"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "36"
        }
      },
      "title": "ToAccountRef",
      "type": "object"
    },
    "invoicesPostReqLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "creditMemosGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T01:02:29-08:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2019-12-27T01:02:29-08:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "invoicesTxnTaxDetailTxnTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "2"
        }
      },
      "type": "object"
    },
    "attachmentsAttachableRefEntityRef": {
      "properties": {
        "type": {
          "type": "string",
          "x-samplevalue": "Invoice"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "95"
        }
      },
      "title": "EntityRef",
      "type": "object"
    },
    "invoicesPutReqShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-samplevalue": "Middlefield"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-alias": "shippingAddress.id",
          "x-samplevalue": "25"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": "shippingAddress.postalCode",
          "x-samplevalue": "94303"
        }
      },
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "depositsPutResLineDepositLineDetailAccountRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Unapplied Cash Payment Income"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "87"
        }
      },
      "title": "AccountRef",
      "type": "object"
    },
    "refundReceiptsGetBYIdShipAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "South Orange"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "NJ"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "15"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7633073"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2426072"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "07079"
        }
      },
      "title": "ShipAddr",
      "type": "object"
    },
    "refundReceiptsGetAllCustomField": {
      "properties": {
        "DefinitionId": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Crew #"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "StringType"
        }
      },
      "title": "CustomField",
      "type": "object"
    },
    "employeesPrimaryPhone": {
      "properties": {
        "FreeFormNumber": {
          "type": "string",
          "x-alias": "phone",
          "x-samplevalue": "234-525-1234"
        }
      },
      "type": "object"
    },
    "depositsPostResCurrencyRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "United States Dollar"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "USD"
        }
      },
      "title": "CurrencyRef",
      "type": "object"
    },
    "vendorCreditsPatchResLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Amy's Bird Sanctuary"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "title": "CustomerRef",
      "type": "object"
    },
    "estimatesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-03-26T13:25:05-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2015-03-26T13:25:05-07:00"
        }
      },
      "title": "MetaData",
      "type": "object",
      "x-primary-key": [
        "Id"
      ]
    },
    "invoicesPostReq": {
      "properties": {
        "ApplyTaxAfterDiscount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Balance": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-samplevalue": 362.07
        },
        "BillAddr": {
          "$ref": "#/definitions/invoicesPostReqBillAddr"
        },
        "BillEmail": {
          "$ref": "#/definitions/invoicesPostReqBillEmail"
        },
        "CustomField": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqCustomField"
          },
          "type": "array"
        },
        "CustomerMemo": {
          "$ref": "#/definitions/invoicesPostReqCustomerMemo"
        },
        "CustomerRef": {
          "$ref": "#/definitions/invoicesPostReqCustomerRef"
        },
        "Deposit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DocNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "1037"
        },
        "DueDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-10-19"
        },
        "EmailStatus": {
          "type": "string",
          "x-samplevalue": "NotSet"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqLine"
          },
          "type": "array"
        },
        "LinkedTxn": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqLinkedTxn"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/invoicesPostReqMetaData"
        },
        "PrintStatus": {
          "type": "string",
          "x-samplevalue": "NeedToPrint"
        },
        "SalesTermRef": {
          "$ref": "#/definitions/invoicesPostReqSalesTermRef"
        },
        "ShipAddr": {
          "$ref": "#/definitions/invoicesPostReqShipAddr"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "0"
        },
        "TotalAmt": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-samplevalue": 362.07
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-alias": "invoiceDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2014-09-19"
        },
        "TxnTaxDetail": {
          "$ref": "#/definitions/invoicesPostReqTxnTaxDetail"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "required": [
        "SyncToken",
        "CustomerRef"
      ],
      "type": "object"
    },
    "estimatesBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Cool_Cars@intuit.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "depositsPutRes": {
      "properties": {
        "CurrencyRef": {
          "$ref": "#/definitions/depositsPutResCurrencyRef"
        },
        "DepositToAccountRef": {
          "$ref": "#/definitions/depositsPutResDepositToAccountRef"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "190"
        },
        "Line": {
          "items": {
            "$ref": "#/definitions/depositsPutResLine"
          },
          "type": "array"
        },
        "MetaData": {
          "$ref": "#/definitions/depositsPutResMetaData"
        },
        "SyncToken": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TotalAmt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 2200
        },
        "TxnDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2019-12-30"
        },
        "domain": {
          "type": "string",
          "x-samplevalue": "QBO"
        },
        "sparse": {
          "type": "boolean",
          "x-samplevalue": false
        }
      },
      "title": "depositsPutRes",
      "x-primary-key": [
        "Id"
      ],
      "type": "object"
    },
    "salesReceiptsGetAllBillEmail": {
      "properties": {
        "Address": {
          "type": "string",
          "x-samplevalue": "Diego@Rodriguez.com",
          "x-sub-format": "email"
        }
      },
      "title": "BillEmail",
      "type": "object"
    },
    "refundReceiptsGetBYIdLineSalesItemLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-samplevalue": "NON"
        }
      },
      "title": "TaxCodeRef",
      "type": "object"
    },
    "billsPutReqLineAccountBasedExpenseLineDetailTaxCodeRef": {
      "properties": {
        "value": {
          "type": "string",
          "x-alias": "lines[*].taxCode",
          "x-samplevalue": "TAX"
        }
      },
      "type": "object"
    },
    "invoicesPutReqBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-alias": "billingAddress.id",
          "x-samplevalue": "95"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4238562"
        },
        "Line1": {
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-samplevalue": "Russ Sonnenschein"
        },
        "Line2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-samplevalue": "Sonnenschein Family Store"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "5647 Cypress Hill Ave."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "Middlefield, CA  94303"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.1141681"
        }
      },
      "type": "object"
    },
    "billsObjectLineAccountBasedExpenseLineDetailCustomerRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "lines[*].customer.name",
          "x-samplevalue": "Travis Waldron"
        },
        "value": {
          "type": "string",
          "x-alias": "lines[*].customer.id",
          "x-samplevalue": "26"
        }
      },
      "type": "object"
    },
    "creditMemosGetAllBillAddr": {
      "properties": {
        "City": {
          "type": "string",
          "x-samplevalue": "Half Moon Bay"
        },
        "CountrySubDivisionCode": {
          "type": "string",
          "x-samplevalue": "CA"
        },
        "Id": {
          "type": "string",
          "x-samplevalue": "4"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "37.4300318"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "65 Ocean Dr."
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-122.4336537"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "94213"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "paymentMethodsGetByIdMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2017-08-15T14:42:05-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "billPaymentsGetAllVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "PG&E"
        },
        "value": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "48"
        }
      },
      "type": "object"
    },
    "vendorsPatchReqPrimaryEmailAddr": {
      "properties": {
        "Address": {
          "type": "string",
          "x-alias": "contact.email",
          "x-samplevalue": "Birds@Intuit.com"
        }
      },
      "type": "object"
    },
    "preferencesOtherPrefsNameValue": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "SalesFormsPrefs.DefaultCustomerMessage"
        },
        "Value": {
          "type": "string",
          "x-samplevalue": "Thank you for your business and have a great day!"
        }
      },
      "title": "NameValue",
      "type": "object"
    },
    "taxAgenciesMetaData": {
      "properties": {
        "CreateTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-18T12:17:04-07:00"
        },
        "LastUpdatedTime": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-09-18T12:17:04-07:00"
        }
      },
      "title": "MetaData",
      "type": "object"
    },
    "refundReceiptsGetBYIdBillAddr": {
      "properties": {
        "Id": {
          "type": "string",
          "x-samplevalue": "73"
        },
        "Lat": {
          "type": "string",
          "x-samplevalue": "40.7489277"
        },
        "Line1": {
          "type": "string",
          "x-samplevalue": "Karen Pye"
        },
        "Line2": {
          "type": "string",
          "x-samplevalue": "Pye's Cakes"
        },
        "Line3": {
          "type": "string",
          "x-samplevalue": "350 Mountain View Dr."
        },
        "Line4": {
          "type": "string",
          "x-samplevalue": "South Orange, NJ  07079"
        },
        "Long": {
          "type": "string",
          "x-samplevalue": "-74.2609903"
        }
      },
      "title": "BillAddr",
      "type": "object"
    },
    "vendorCreditsPatchReqVendorRef": {
      "properties": {
        "name": {
          "type": "string",
          "x-samplevalue": "Books by Bessie"
        },
        "value": {
          "type": "string",
          "x-samplevalue": "30"
        }
      },
      "title": "VendorRef",
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "QuickBooks Online Rest",
    "x-element-hub": "finance",
    "x-element-key": "quickbooksonlinerest",
    "title": "quickbooksonlinerest",
    "x-element-id": 21998,
    "version": "api-v2",
    "description": "Add a QuickBooks Online Rest Instance to connect your existing QuickBooks Online account to the Finance Hub, allowing you to manage your customers, employees, invoices, purchase orders etc. across multiple Finance Elements. You will need your QuickBooks Online account information to add an instance."
  },
  "tags": [
    {
      "name": "Attachments"
    },
    {
      "name": "Bill Payments"
    },
    {
      "name": "Bills"
    },
    {
      "name": "Budgets"
    },
    {
      "name": "Bulk"
    },
    {
      "name": "Changes"
    },
    {
      "name": "Classes"
    },
    {
      "name": "Company Currencies"
    },
    {
      "name": "Company Info"
    },
    {
      "name": "Credit Memos"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Departments"
    },
    {
      "name": "Deposits"
    },
    {
      "name": "Employees"
    },
    {
      "name": "Estimates"
    },
    {
      "name": "Exchange Rates"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Items"
    },
    {
      "name": "Journal Codes"
    },
    {
      "name": "Journal Entries"
    },
    {
      "name": "Ledger Accounts"
    },
    {
      "name": "Me"
    },
    {
      "name": "Object Name"
    },
    {
      "name": "Objects"
    },
    {
      "name": "Payment Methods"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Ping"
    },
    {
      "name": "Preferences"
    },
    {
      "name": "Purchase Orders"
    },
    {
      "name": "Purchases"
    },
    {
      "name": "Refund Receipts"
    },
    {
      "name": "Sales Receipts"
    },
    {
      "name": "Tax Agencies"
    },
    {
      "name": "Tax Codes"
    },
    {
      "name": "Tax Rates"
    },
    {
      "name": "Tax Service"
    },
    {
      "name": "Time Activities"
    },
    {
      "name": "Transfers"
    },
    {
      "name": "Vendor Credits"
    },
    {
      "name": "Vendors"
    }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Add a QuickBooks Online Rest Instance to connect your existing QuickBooks Online Rest account",
  "externalDocs": {
    "description": "SAP Open Connectors Documentation",
    "url": "https://help.openconnectors.ext.hana.ondemand.com/home/catalog"
  }
}