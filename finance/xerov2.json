{
  "basePath": "/elements/api-v2",
  "paths": {
    "/accounts": {
      "post": {
        "summary": "Create an account",
        "operationId": "createAccount",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/accountsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/accountsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Accounts"
        ]
      },
      "get": {
        "summary": "Search for accounts",
        "operationId": "getAccounts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accountsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all accounts are returned. To search accounts whose Name starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: name like 'H%', name like '%H' and name like 'H'.To search for accounts over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Accounts"
        ]
      }
    },
    "/accounts/{id}": {
      "patch": {
        "summary": "Update an account",
        "operationId": "updateAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/accountsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/accountsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Accounts"
        ]
      },
      "get": {
        "summary": "Search for accounts",
        "operationId": "getAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/accountsGerByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Accounts"
        ]
      },
      "delete": {
        "summary": "Delete an account",
        "operationId": "deleteAccountById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Accounts"
        ]
      }
    },
    "/bulk/download": {
      "post": {
        "summary": "Create a new bulk download job (asynchronous)",
        "operationId": "createBulkDownload",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/bulkDownloadRequest"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/jobs": {
      "get": {
        "operationId": "getBulkJobs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkJobList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Fetch all the bulk jobs for an instance",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Cancel an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the errors of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "Bulk"
        ],
        "produces": [
          "text/csv",
          "application/json",
          "application/jsonl"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" :&lt;path for the sub resource&gt;, \"format\": &lt;json/csv&gt;, \"callback-payload\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/contacts": {
      "post": {
        "summary": "Create a contact",
        "operationId": "createContact",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/contactsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/contactsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "get": {
        "summary": "Search for contacts",
        "operationId": "getContacts",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/contactsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for contacts last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all contacts are returned. To search contacts whose Name starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: name like 'H%', name like '%H' and name like 'H'.To search for contacts over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/contacts/{id}": {
      "patch": {
        "summary": "Update a contact",
        "operationId": "updateContactById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/contactsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/contactsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Contacts"
        ]
      },
      "get": {
        "summary": "Retrieve a contact",
        "operationId": "getContactById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/contactsGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Contacts"
        ]
      }
    },
    "/credit-notes": {
      "post": {
        "operationId": "createCreditNote",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditNotesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/creditNotesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Credit Notes"
        ],
        "summary": "Create a credit note"
      },
      "get": {
        "operationId": "getCreditNotes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/creditNotesGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for credit notes last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all credit-notes are returned. To search credit notes whose type starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: type like 'H%', type like '%H' and type like 'H'.To search for credit-notes over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2022-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credit Notes"
        ],
        "summary": "Search for credit notes"
      }
    },
    "/credit-notes/{id}": {
      "patch": {
        "operationId": "updateCreditNoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditNotesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/creditNotesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Credit Notes"
        ],
        "summary": "Update a credit note"
      },
      "get": {
        "operationId": "getCreditNoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/creditNotesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Credit Notes"
        ],
        "summary": "Retrieve a credit note"
      }
    },
    "/employees": {
      "post": {
        "summary": "Create an employee",
        "operationId": "createEmployee",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "get": {
        "summary": "Search for employees",
        "operationId": "getEmployees",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employeesGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for employees last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all employees are returned. To search employees whose FirstName starts with 'Har', ends with 'Har' and contains 'Har' then search expressions will be the following: firstname like 'Har%', firstname like '%Har' and firstname like 'Har'.To search for employees over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/employees/{id}": {
      "patch": {
        "summary": "Updates the Employee information",
        "operationId": "updateEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Employee ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/employeesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The Employee body",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "get": {
        "summary": "Retrieve an employee",
        "operationId": "getEmployeeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/employeesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/invoices": {
      "post": {
        "summary": "Create an invoice",
        "operationId": "createInvoice",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoicesGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for invoices last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all invoices are returned. To search invoices whose type starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: type like 'H%', type like '%H' and type like 'H'.To search for invoices over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').To search for invoices over a range of Date the search expression will be Date IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}": {
      "patch": {
        "summary": "Update an invoice",
        "operationId": "updateInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Retrieve an invoice",
        "operationId": "getInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "delete": {
        "summary": "Delete an invoice",
        "operationId": "deleteInvoiceById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/items": {
      "post": {
        "summary": "Create an item",
        "operationId": "createItem",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Search for items",
        "operationId": "getItems",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itemsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for items last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all items are returned. To search items whose Name starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: name like 'H%', name like '%H' and name like 'H'.To search for items over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/items/{id}": {
      "patch": {
        "summary": "Update an item",
        "operationId": "updateItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Retrieve an item",
        "operationId": "getItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "delete": {
        "summary": "Delete an item",
        "operationId": "deleteItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/journals": {
      "get": {
        "summary": "Search for journals",
        "operationId": "getJournals",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/journalsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for journals last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all journals are returned. To search journals whose sourcetype starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: sourcetype like 'H%', sourcetype like '%H' and sourcetype like 'H'.To search for journals over a range of CreatedDateUTC the search expression will be CreatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or CreatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "nextPage",
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "type": "string",
            "required": false
          }
        ],
        "tags": [
          "Journals"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/organisations": {
      "get": {
        "summary": "Search for organisations",
        "operationId": "getOrganisations",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/organisationsGetAllRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Organisations"
        ]
      }
    },
    "/payments": {
      "post": {
        "summary": "Create a payment",
        "operationId": "createPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Search for payments",
        "operationId": "getPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/paymentsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for payments last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all payments are returned. To search payments whose paymenttype starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: paymenttype like 'H%', paymenttype like '%H' and paymenttype like 'H'.To search for payments over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{id}": {
      "get": {
        "summary": "Retrieve a payment",
        "operationId": "getPaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "summary": "Delete a payment",
        "operationId": "deletePaymentById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "Ping"
        ]
      }
    },
    "/purchase-orders": {
      "post": {
        "operationId": "createPurchaseOrder",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Create a purchase order"
      },
      "get": {
        "operationId": "getPurchaseOrders",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/purchaseOrdersGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for purchase orders with status the search expression is status='DRAFT' .",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Search for purchase orders"
      }
    },
    "/purchase-orders/{id}": {
      "patch": {
        "operationId": "updatePurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/purchaseOrdersPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Update a purchase order"
      },
      "get": {
        "operationId": "getPurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/purchaseOrdersGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Retrieve a purchase order"
      },
      "delete": {
        "operationId": "deletePurchaseOrderById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Purchase Orders"
        ],
        "summary": "Delete a purchase order"
      }
    },
    "/sales-quotes": {
      "post": {
        "operationId": "createSalesQuote",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The salesQuotesPostReq body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Create a sales quote"
      },
      "get": {
        "operationId": "getSalesQuotes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/salesQuotesGetResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, For Example to search for sales quote by quote number, the search expression is QuoteNumber='QU-0001' and by status of the quote status='DRAFT'",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Search for sales quotes"
      }
    },
    "/sales-quotes/{id}": {
      "patch": {
        "operationId": "updateSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The id ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Update a sales quote"
      },
      "get": {
        "operationId": "getSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Quote ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ],
        "summary": "Retrieve a sales quote"
      }
    },
    "/tax-rates": {
      "patch": {
        "operationId": "updateTaxRates",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxRatesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxRatesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Tax Rates"
        ],
        "summary": "Update a tax rate"
      },
      "post": {
        "operationId": "createTaxRate",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxRatesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxRatesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Tax Rates"
        ],
        "summary": "Create a tax rate"
      },
      "get": {
        "operationId": "getTaxRates",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxRatesGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for tax rates with Name'Gst taxes', the search expression will be Name='Gst taxes'. When this parameter is omitted, all tax-rates are returned",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tax Rates"
        ],
        "summary": "Search for tax rates"
      }
    },
    "/transactions": {
      "post": {
        "summary": "Create a transaction",
        "operationId": "createTransaction",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transactionsPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/transactionsPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The Transaction Request Body.",
            "required": true
          }
        ],
        "tags": [
          "Transactions"
        ]
      },
      "get": {
        "summary": "Search for transactions",
        "operationId": "getTransactions",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transactionsGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all accounts are returned. To search accounts whose Name starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: name like 'H%', name like '%H' and name like 'H'.To search for accounts over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set. For example to specify the results in ascending order based on name use orderBy=name. To get results in descending order use orderBy=name desc.",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Retrieve a transaction",
        "operationId": "getTransactionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transactionsGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Transaction Id.",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Transactions"
        ]
      },
      "delete": {
        "summary": "Delete a transactions",
        "operationId": "deleteTransactionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Transaction Id.",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Transactions"
        ]
      },
      "put": {
        "summary": "Update a transaction",
        "operationId": "replaceTransactionById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/transactionsPutRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The Transaction Id.",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/transactionsPutReq"
            },
            "in": "body",
            "name": "body",
            "description": "The Transaction Request Body.",
            "required": true
          }
        ],
        "tags": [
          "Transactions"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "Search for users",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/usersGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example, to search for accounts last modified on or after 'Jan 15, 2014', the search expression will be ifmodifiedsince='2014-01-15T00:00:00.000Z'. When this parameter is omitted, all accounts are returned. To search accounts whose Name starts with 'H', ends with 'H' and contains 'H' then search expressions will be following: name like 'H%', name like '%H' and name like 'H'.To search for accounts over a range of UpdatedDateUTC the search expression will be UpdatedDateUTC IN ('2020-07-11T15:49:24','2021-07-11T15:50:24') or UpdatedDateUTC IN ('2020-07-11','2021-07-11').",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "orderBy",
            "description": "Specifies the order of the result set. For example to specify the results in ascending order based on name use orderBy=name. To get results in descending order use orderBy=name desc.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Search for object name"
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Create an object name"
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Delete an object name"
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Retrieve an object name"
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Update an object name"
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Update an object name"
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Search for child object name"
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Create an object name"
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Delete an child object name"
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Retrieve an child object name"
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Update an child object name"
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "tags": [
          "Object Name"
        ],
        "summary": "Update an child object name"
      }
    }
  },
  "host": "hostname",
  "schemes": [
    "https"
  ],
  "definitions": {
    "creditNotesPatchReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "creditNotesGetAllResObject": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/creditNotesGetAllResAllocations"
          },
          "type": "array"
        },
        "BrandingThemeID": {
          "items": {
            "$ref": "#/definitions/creditNotesGetAllResBrandingThemeID"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesGetAllResContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "7df8949c-b71f-40c0-bbcf-39f2f450f286"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "AUD",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-07T00:00:00",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "DueDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesGetAllResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290777947340+0000)/"
        }
      },
      "title": "creditNotesGetAllRes",
      "type": "object",
      "x-primary-key": [
        "CreditNoteID"
      ]
    },
    "transactionsPostReqBankAccount": {
      "properties": {
        "AccountId": {
          "type": "string",
          "x-samplevalue": "08ca6c9f-35dc-424b-9556-bd854c0d4fa6"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "1912"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "itemsGetAllResPurchaseDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "400"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "transactionsPutResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "transactionsPutResContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "creditNotesPostResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "453"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Internal DVD drive couldn't be supplied, backorder (Oliver laptop)"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/creditNotesPostResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "invoicesPostResPrepaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdResBrandingThemeID": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "title": "BrandingThemeID",
      "type": "object"
    },
    "transactionsPutResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "transactionsPostResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostResLineItemsTrackingOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "salesQuotesPostResQuotes": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Branding Theme Id",
          "x-samplevalue": "597704e4-a0ac-4af0-90bc-721929f8139d"
        },
        "Contact": {
          "$ref": "#/definitions/salesQuotesPostResQuotesContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-alias": "currency",
          "x-displayName": "Currency Rate",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-02-27T00:00:00"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000"
        },
        "ExpiryDateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-03-15T00:00:00"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostResQuotesLineItems"
          },
          "type": "array"
        },
        "QuoteID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Quote Id",
          "x-samplevalue": "248dc7e9-74cf-4e6e-afe1-2c37daad84c8"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-0001"
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "DRAFT"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book"
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale"
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Updated Date Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396317"
        }
      },
      "type": "object"
    },
    "contactsPostReqPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "employeesGetAllResExternalLink": {
      "properties": {
        "Description": {
          "type": "string",
          "x-samplevalue": "Go to external link"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResCreditNotesAllocations": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetByIdResCreditNotesAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "contactsGetAllResPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResContactPhones": {
      "properties": {
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "purchaseOrdersGetByIdRes": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersGetByIdResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-21T00:00:00"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-22T00:00:00"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "ExpectedArrivalDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-28T00:00:00"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdResLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "44d3f8a4-7031-45e8-b252-e92914e43c7e"
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-alias": "subTotal",
          "x-samplevalue": 1000
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 1150
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxAmount",
          "x-samplevalue": 150
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "PURCHASEORDER"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1385147725247+0000)/"
        }
      },
      "x-primary-key": [
        "PurchaseOrderID"
      ],
      "type": "object"
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "itemsGetAllResObject": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsTrackedAsInventory": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ItemID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "19b79d12-0ae1-496e-9649-cbd04b15c7c5"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsGetAllResPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsGetAllResSalesDetails"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1488338552390+0000)/"
        }
      },
      "x-primary-key": [
        "ItemID"
      ],
      "type": "object"
    },
    "purchaseOrdersPatchReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchResQuotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Email Address"
        },
        "Name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-displayName": "Name",
          "x-samplevalue": "asdcf@dfcsad"
        }
      },
      "type": "object"
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "salesQuotesGetByIdResQuotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Email Address"
        },
        "Name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-displayName": "Name",
          "x-samplevalue": "asdcf@dfcsad"
        }
      },
      "type": "object"
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "contactsPatchReqPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "salesQuotesGetByIdRes": {
      "properties": {
        "DateTimeUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date Time Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396406"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Id",
          "x-samplevalue": "b6eb0c61-31be-45a7-b50d-77815171ff80"
        },
        "ProviderName": {
          "type": "string",
          "x-alias": "name",
          "x-displayName": "Provider Name",
          "x-samplevalue": "CEDev2"
        },
        "Quotes": {
          "items": {
            "$ref": "#/definitions/salesQuotesGetByIdResQuotes"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT"
        },
        "SummarizeErrors": {
          "type": "boolean",
          "x-displayName": "Summarizeerrors",
          "x-samplevalue": true
        }
      },
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "taxRatesPostResTaxComponents": {
      "properties": {
        "IsCompound": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "IsNonRecoverable": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "Rate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        }
      },
      "title": "TaxComponents",
      "type": "object"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "transactionsPostReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "1200"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "type": "string",
          "x-samplevalue": "123"
        },
        "Quantity": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "NONE"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-samplevalue": "100"
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "purchaseOrdersPatchReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "invoicesPostResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "e2f2f732-e92a-4f3a9c4d-ee4da0182a13"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1488391422297+0000)/"
        }
      },
      "type": "object"
    },
    "invoicesPostResOverpaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPostResOverpaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesPostResCreditNotes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPostResCreditNotesAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPostResCreditNotesContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "CN-0002"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2016-12-16T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 86.96
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 13.04
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCRECCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290168061547+0000)/"
        }
      },
      "type": "object"
    },
    "paymentsPostReqPrepayment": {
      "properties": {
        "PrepaymentID": {
          "type": "string",
          "x-samplevalue": "262c3049-cbf2-4b4b-9fca-60d55b076e35"
        }
      },
      "type": "object"
    },
    "creditNotesGetAllResAllocations": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/creditNotesGetAllResAllocationsInvoice"
        }
      },
      "title": "Allocations",
      "type": "object"
    },
    "transactionsPostResContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "itemsPostReq": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing"
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "InventoryAssetAccountCode": {
          "type": "string",
          "x-alias": "assetAccount",
          "x-samplevalue": "630"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsPostReqPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsPostReqSalesDetails"
        }
      },
      "required": [
        "InventoryAssetAccountCode",
        "Code"
      ],
      "type": "object"
    },
    "paymentsGetAllResInvoiceLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "transactionsGetByIdResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "creditNotesPatchReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "6011"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "invoicesPatchReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResPrepaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchReqContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460"
        }
      },
      "type": "object"
    },
    "creditNotesPostResAllocations": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/creditNotesPostResAllocationsInvoice"
        }
      },
      "title": "Allocations",
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdRes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/creditNotesGetByIdResAllocations"
          },
          "type": "array"
        },
        "BrandingThemeID": {
          "items": {
            "$ref": "#/definitions/creditNotesGetByIdResBrandingThemeID"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesGetByIdResContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "7df8949c-b71f-40c0-bbcf-39f2f450f286"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "AUD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-07T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesGetByIdResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290777947340+0000)/"
        }
      },
      "title": "creditNotesGetByIdRes",
      "x-primary-key": [
        "CreditNoteID"
      ],
      "type": "object"
    },
    "invoicesGetAllResContactPhones": {
      "properties": {
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "salesQuotesGetResObject": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Branding Theme Id",
          "x-samplevalue": "597704e4-a0ac-4af0-90bc-721929f8139d",
          "x-searchable": false
        },
        "Contact": {
          "$ref": "#/definitions/salesQuotesGetResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD",
          "x-searchable": false
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-alias": "currency",
          "x-displayName": "Currency Rate",
          "x-samplevalue": 1,
          "x-searchable": false
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000",
          "x-searchable": false
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-02-27T00:00:00",
          "x-searchable": false
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000",
          "x-searchable": false
        },
        "ExpiryDateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-03-15T00:00:00",
          "x-searchable": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE",
          "x-searchable": false
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesGetResLineItems"
          },
          "type": "array"
        },
        "QuoteID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Quote Id",
          "x-samplevalue": "bfef2ba4-8a9d-4d91-86bf-3b42383184df"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-1068",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092",
          "x-searchable": false
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5,
          "x-searchable": false
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book",
          "x-searchable": false
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days",
          "x-searchable": false
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale",
          "x-searchable": false
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5,
          "x-searchable": false
        },
        "TotalDiscount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Discount",
          "x-samplevalue": 0,
          "x-searchable": false
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0,
          "x-searchable": false
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Updated Date Utc",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2021-02-11T19:05:36.700Z"
        }
      },
      "x-primary-key": [
        "QuoteID"
      ],
      "type": "object"
    },
    "creditNotesPostResAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "673dd7cc-beb7-4697-83d4-0c47cb400cc2"
        }
      },
      "title": "Invoice",
      "type": "object"
    },
    "transactionsPutResBankAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "organisationsGetAllResPaymentTermsSales": {
      "properties": {
        "Day": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 20
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "OFFOLLOWINGMONTH"
        }
      },
      "title": "Sales",
      "type": "object"
    },
    "BulkUploadResponse": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance Id of the bulk job",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.email",
              "description": "invoices.customer.contact.email maps to EmailAddress when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.email",
              "description": "bills.vendor.contact.email maps to EmailAddress when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "john.smith@gmail.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.firstName",
              "description": "invoices.customer.contact.firstName maps to FirstName when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.firstName",
              "description": "bills.vendor.contact.firstName maps to FirstName when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "John"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.lastName",
              "description": "invoices.customer.contact.lastName maps to LastName when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.lastName",
              "description": "bills.vendor.contact.lastName maps to LastName when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Smith"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.paymentTerms",
              "description": "invoices.paymentTerms maps to PaymentTerms when value of field Type is ACCREC"
            },
            {
              "alias": "bills.paymentTerms",
              "description": "bills.paymentTerms maps to PaymentTerms when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "invoicesPostReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "DiscountRate": {
          "type": "string",
          "x-samplevalue": "20"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "20"
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "invoicesPostResPrepaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "invoicesPatchResCreditNotes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResCreditNotesAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPatchResCreditNotesContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "CN-0002"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2016-12-16T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 86.96
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 13.04
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCRECCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290168061547+0000)/"
        }
      },
      "type": "object"
    },
    "creditNotesPatchResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "453"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Internal DVD drive couldn't be supplied, backorder (Oliver laptop)"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "invoicesPatchResCreditNotesAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactBalancesAccountsPayable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "1aa3bf00-a5fe-420f-b4b3-d64349a13108"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].taxAmount",
          "x-samplevalue": 150
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "transactionsPutResContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "transactionsPutReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "purchaseOrdersGetByIdResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "1aa3bf00-a5fe-420f-b4b3-d64349a13108"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].taxAmount",
          "x-samplevalue": 150
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "invoicesGetAllResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressLine2": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line2",
              "description": "invoices.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line2",
              "description": "bills.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "14 Boulevard Quay"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResPrepaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetByIdResPrepaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesPatchResCreditNotesAllocations": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPatchResCreditNotesAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResContactAddresses"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        }
      },
      "type": "object"
    },
    "contactsPostResPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPostResPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "transactionsPutReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "bulkDownloadRequestQuery": {
      "properties": {
        "anyKey": {
          "type": "string",
          "x-samplevalue": "anyValue"
        }
      },
      "title": "query",
      "type": "object"
    },
    "creditNotesPatchResAllocations": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/creditNotesPatchResAllocationsInvoice"
        }
      },
      "title": "Allocations",
      "type": "object"
    },
    "invoicesGetAllResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "e2f2f732-e92a-4f3a9c4d-ee4da0182a13"
        }
      },
      "type": "object"
    },
    "taxRatesPostReqTaxComponents": {
      "properties": {
        "IsCompound": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "IsNonRecoverable": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "State Tax"
        },
        "Rate": {
          "type": "string",
          "x-samplevalue": "7.5"
        }
      },
      "title": "TaxComponents",
      "type": "object"
    },
    "contactsPatchResPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPatchResPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "paymentsPostReqInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.lines[*].invoice.id",
              "description": "ar-payments.lines[*].invoice.id maps to Invoice.InvoiceID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.lines[*].bill.id",
              "description": "ap-payments.lines[*].bill.id maps to Invoice.InvoiceID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "transactionsPostReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "invoicesPostResCreditNotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Test Apply Credit Note"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "invoicesGetAllResOverpaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "transactionsPostResContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "paymentsPostResInvoiceContactBalancesAccountsReceivable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceLineItems": {
      "properties": {
        "AccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/paymentsGetAllResInvoiceLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "organisationsGetAllResPaymentTerms": {
      "properties": {
        "Bills": {
          "$ref": "#/definitions/organisationsGetAllResPaymentTermsBills"
        },
        "Sales": {
          "$ref": "#/definitions/organisationsGetAllResPaymentTermsSales"
        }
      },
      "title": "PaymentTerms",
      "type": "object"
    },
    "invoicesPostReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        }
      },
      "type": "object"
    },
    "contactsGetByIdResPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "transactionsPostReq": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsPostReqBankAccount"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsPostReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "0.7500"
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-22"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "enum": [
            "Exclusive",
            "Inclusive",
            "NoTax"
          ],
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-description": "Only supported for SPEND and RECEIVE transactions."
        },
        "Status": {
          "enum": [
            "AUTHORISED",
            "DELETED"
          ],
          "type": "string",
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "enum": [
            "RECEIVE",
            "RECEIVE-OVERPAYMENT",
            "RECEIVE-PREPAYMENT",
            "SPEND",
            "SPEND-OVERPAYMENT",
            "SPEND-PREPAYMENT",
            "RECEIVE-TRANSFER",
            "SPEND-TRANSFER"
          ],
          "type": "string",
          "x-samplevalue": "RECEIVE"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "title": "transactionsPostReq",
      "type": "object"
    },
    "transactionsPutReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "purchaseOrdersPatchResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "transactionsPostRes": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsPostResBankAccount"
        },
        "BankTransactionID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsPostResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2020-04-23T08:32:51.153Z"
        },
        "ExternalLinkProviderName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsPostResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "transactionsPostRes",
      "type": "object"
    },
    "purchaseOrdersGetAllResObject": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersGetAllResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD",
          "x-searchable": false
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": false
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/",
          "x-searchable": false
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-21T00:00:00"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-22T00:00:00"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "ExpectedArrivalDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-28T00:00:00"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": false
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllResLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "44d3f8a4-7031-45e8-b252-e92914e43c7e",
          "x-searchable": false
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001",
          "x-searchable": false
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-alias": "subTotal",
          "x-samplevalue": 1000
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 1150
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxAmount",
          "x-samplevalue": 150,
          "x-searchable": false
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "PURCHASEORDER",
          "x-searchable": false
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1385147725247+0000)/"
        }
      },
      "x-primary-key": [
        "PurchaseOrderID"
      ],
      "type": "object"
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "journalsGetAllResJournalLinesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesGetAllResPrepayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResPrepaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetAllResPrepaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "PrepaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-PREPAYMENT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResOverpayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResOverpaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetByIdResOverpaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "OverpaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-OVERPAYMENT"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-03-29T23:43:01.097"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchReqLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    },
    "creditNotesGetAllResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "d0cd2c4f-18a0-4f7c-a32a-2db00f29d298"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "PC Complete"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine2": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine3": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine4": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Region": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "taxRatesPatchRes": {
      "properties": {
        "CanApplyToAssets": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToEquity": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToExpenses": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToLiabilities": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToRevenue": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "DisplayTaxRate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        },
        "EffectiveRate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "15% GST on Expenses"
        },
        "ReportTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TaxComponents": {
          "items": {
            "$ref": "#/definitions/taxRatesPatchResTaxComponents"
          },
          "type": "array"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        }
      },
      "title": "taxRatesPatchRes",
      "type": "object"
    },
    "purchaseOrdersPatchResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1488391422297+0000)/"
        }
      },
      "type": "object"
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "itemsPostResSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "invoicesPostReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "contactsPatchReqSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactBalancesAccountsReceivable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "transactionsGetByIdResContactAddresses": {
      "properties": {
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Region": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "invoicesPostReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "contactsPostReqSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPostReqSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "transactionsGetByIdResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "paymentsPostResInvoiceLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "invoicesGetByIdResCreditNotesAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "transactionsPutResContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "creditNotesPostResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "d0cd2c4f-18a0-4f7c-a32a-2db00f29d298"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "PC Complete"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "paymentsPostResInvoiceContactBalances": {
      "properties": {
        "AccountsPayable": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactBalancesAccountsPayable"
        },
        "AccountsReceivable": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactBalancesAccountsReceivable"
        }
      },
      "type": "object"
    },
    "transactionsPutResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/transactionsPutResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "transactionsPostResLineItemsTrackingOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesGetAllResPrepaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "1234567890"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DDI"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "contactsPatchResAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "Andrea"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactBalancesAccountsReceivable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "paymentsGetAllResObject": {
      "properties": {
        "Account": {
          "$ref": "#/definitions/paymentsGetAllResAccount"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.amount",
              "description": "ar-payments.amount maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.amount",
              "description": "ap-payments.amount maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        },
        "BankAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.paymentDate",
              "description": "ar-payments.paymentDate maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.paymentDate",
              "description": "ap-payments.paymentDate maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": 0
        },
        "HasAccount": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Invoice": {
          "$ref": "#/definitions/paymentsGetAllResInvoice"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.id",
              "description": "ar-payments.id maps to PaymentID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.id",
              "description": "ap-payments.id maps to PaymentID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.status",
              "description": "ar-payments.status maps to Status when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.status",
              "description": "ap-payments.status maps to Status when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.modifiedDate",
              "description": "ar-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.modifiedDate",
              "description": "ap-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "PaymentID"
      ],
      "type": "object"
    },
    "contactsGetByIdResPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResOverpaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetByIdResOverpaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "employeesPatchReq": {
      "properties": {
        "ExternalLink": {
          "$ref": "#/definitions/employeesPatchReqExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "type": "object"
    },
    "employeesPatchRes": {
      "properties": {
        "EmployeeID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "6515d052-b3f7-4de4-b0a3-e4c12caba8b2"
        },
        "ExternalLink": {
          "$ref": "#/definitions/employeesPatchResExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1519351730117+0000)/"
        }
      },
      "x-primary-key": [
        "EmployeeID"
      ],
      "type": "object"
    },
    "BulkQuery": {
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "instance_id": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReq": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "BrandingThemeID"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesPatchReqContact",
          "x-required": true
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-03-29"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqLineItems"
          },
          "type": "array",
          "x-required": true
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT",
          "x-required": true
        }
      },
      "title": "creditNotesPatchReq",
      "type": "object",
      "required": [
        "Contact",
        "LineItems",
        "Type"
      ]
    },
    "transactionsPutReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "1200"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "type": "string",
          "x-samplevalue": "123"
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "Updated"
        },
        "Quantity": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "NONE"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-samplevalue": "100"
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "transactionsPostReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "contactsGetAllResContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "invoicesPatchResPrepaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPatchResPrepaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "salesQuotesGetResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Email Address"
        },
        "Name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-displayName": "Name",
          "x-samplevalue": "asdcf@dfcsad"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoiceContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/paymentsPostResInvoiceContactAddresses"
          },
          "type": "array"
        },
        "Balances": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactBalances"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.id",
              "description": "ar-payments.customer.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.id",
              "description": "ap-payments.vendor.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.name",
              "description": "ar-payments.customer.name maps to Invoice.Contact.Name when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.name",
              "description": "ap-payments.vendor.name maps to Invoice.Contact.Name when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactPaymentTerms"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/paymentsPostResInvoiceContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdResAllocations": {
      "properties": {
        "Amount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/creditNotesGetByIdResAllocationsInvoice"
        }
      },
      "title": "Allocations",
      "type": "object"
    },
    "invoicesGetByIdResPrepaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "organisationsGetAllResAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "3 Market Place"
        },
        "AddressLine2": {
          "type": "string",
          "x-samplevalue": "Twizel 7901"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "Bentley Rhythm Ace"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Twizel"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "New Zealand"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "7901"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "invoicesPatchReq": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPatchReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqLineItems"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "required": [
        "LineItems",
        "DueDate"
      ],
      "type": "object"
    },
    "contactsGetByIdRes": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844"
        },
        "BrandingTheme": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResBrandingTheme"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.id",
              "description": "customers.id maps to ContactID when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.id",
              "description": "vendors.id maps to ContactID when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "bd2270c3-8706-4c11-9cfb-000b551c3f51"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "Discount": {
          "type": "string",
          "x-samplevalue": "Discount"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.paymentTerms.name",
              "description": "customers.paymentTerms.name maps to PaymentTerms when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.paymentTerms.name",
              "description": "vendors.paymentTerms.name maps to PaymentTerms when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLDATE"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "TrackingCategoryName"
        },
        "TrackingOptionName": {
          "type": "string",
          "x-samplevalue": "TrackingOptionName"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.modifiedDate",
              "description": "customers.modifiedDate maps to UpdatedDateUTC when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.modifiedDate",
              "description": "vendors.modifiedDate maps to UpdatedDateUTC when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "/Date(1488391422280+0000)/"
        },
        "Website": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.webSite",
              "description": "customers.webSite maps to Website when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.webSite",
              "description": "vendors.webSite maps to Website when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Website"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "x-primary-key": [
        "ContactID"
      ],
      "type": "object"
    },
    "invoicesPatchRes": {
      "properties": {
        "AmountCredited": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "AmountDue": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountDue",
              "description": "invoices.totalAmountDue maps to AmountDue when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountDue",
              "description": "bills.totalAmountDue maps to AmountDue when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1025.00"
        },
        "AmountPaid": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountPaid",
              "description": "invoices.totalAmountPaid maps to AmountPaid when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountPaid",
              "description": "bills.totalAmountPaid maps to AmountPaid when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPatchResContact"
        },
        "CreditNotes": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResCreditNotes"
          },
          "type": "array"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "FullyPaidOnDate"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.id",
              "description": "invoices.id maps to InvoiceID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.id",
              "description": "bills.id maps to InvoiceID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "243216c5-369e-4056-ac67-05388f86dc81"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResLineItems"
          },
          "type": "array"
        },
        "Overpayments": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResOverpayments"
          },
          "type": "array"
        },
        "Payments": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResPayments"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Prepayments": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResPrepayments"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED"
        },
        "SubTotal": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.subTotal",
              "description": "invoices.subTotal maps to SubTotal when value of field Type is ACCREC"
            },
            {
              "alias": "bills.subTotal",
              "description": "bills.subTotal maps to SubTotal when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "Total": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.amount",
              "description": "invoices.amount maps to Total when value of field Type is ACCREC"
            },
            {
              "alias": "bills.amount",
              "description": "bills.amount maps to Total when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "2025.00"
        },
        "TotalDiscount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.discountAmount",
              "description": "invoices.discountAmount maps to TotalDiscount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.discountAmount",
              "description": "bills.discountAmount maps to TotalDiscount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "TotalDiscount"
        },
        "TotalTax": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.taxAmount",
              "description": "invoices.taxAmount maps to TotalTax when value of field Type is ACCREC"
            },
            {
              "alias": "bills.taxAmount",
              "description": "bills.taxAmount maps to TotalTax when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.modifiedDate",
              "description": "invoices.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCREC"
            },
            {
              "alias": "bills.modifiedDate",
              "description": "bills.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "x-primary-key": [
        "InvoiceID"
      ],
      "type": "object"
    },
    "invoicesPatchReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResOverpaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetAllResOverpaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "invoicesPostResOverpayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPostResOverpaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPostResOverpaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "OverpaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-OVERPAYMENT"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-03-29T23:43:01.097"
        }
      },
      "type": "object"
    },
    "transactionsPutResContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "invoicesGetByIdResCreditNotes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResCreditNotesAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetByIdResCreditNotesContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "CN-0002"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2016-12-16T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 86.96
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 13.04
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCRECCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290168061547+0000)/"
        }
      },
      "type": "object"
    },
    "creditNotesPatchRes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchResAllocations"
          },
          "type": "array"
        },
        "BrandingThemeID": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchResBrandingThemeID"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesPatchResContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "7df8949c-b71f-40c0-bbcf-39f2f450f286"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "AUD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-07T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290777947340+0000)/"
        }
      },
      "title": "creditNotesPatchRes",
      "x-primary-key": [
        "CreditNoteID"
      ],
      "type": "object"
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResPayments": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].lines[*].amount",
              "description": "invoices.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].lines[*].amount",
              "description": "bills.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].id",
              "description": "invoices.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].id",
              "description": "bills.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "0d666415-cf77-43fa-80c7-56775591d426"
        }
      },
      "type": "object"
    },
    "transactionsPostReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqLineItemsTrackingOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "paymentsGetByIdResInvoiceLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "itemsPostResPurchaseDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "400"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "invoicesGetAllResCreditNotes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResCreditNotesAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetAllResCreditNotesContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "CN-0002"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2016-12-16T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 86.96
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 13.04
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCRECCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290168061547+0000)/"
        }
      },
      "type": "object"
    },
    "paymentsPostRes": {
      "properties": {
        "Account": {
          "$ref": "#/definitions/paymentsPostResAccount"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.amount",
              "description": "ar-payments.amount maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.amount",
              "description": "ap-payments.amount maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        },
        "BankAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.paymentDate",
              "description": "ar-payments.paymentDate maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.paymentDate",
              "description": "ap-payments.paymentDate maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": 0
        },
        "HasAccount": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Invoice": {
          "$ref": "#/definitions/paymentsPostResInvoice"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.id",
              "description": "ar-payments.id maps to PaymentID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.id",
              "description": "ap-payments.id maps to PaymentID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.status",
              "description": "ar-payments.status maps to Status when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.status",
              "description": "ap-payments.status maps to Status when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.modifiedDate",
              "description": "ar-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.modifiedDate",
              "description": "ap-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "PaymentID"
      ],
      "type": "object"
    },
    "taxRatesPatchReqTaxComponents": {
      "properties": {
        "IsCompound": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "IsNonRecoverable": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "State Tax"
        },
        "Rate": {
          "type": "string",
          "x-samplevalue": "7.5"
        }
      },
      "title": "TaxComponents",
      "type": "object"
    },
    "paymentsPostReq": {
      "properties": {
        "Account": {
          "$ref": "#/definitions/paymentsPostReqAccount"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.amount",
              "description": "ar-payments.amount maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.amount",
              "description": "ap-payments.amount maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        },
        "CreditNote": {
          "x-conditionally-required-description": "This is required if InvoiceID, PrepaymentID, OverpaymentID  is not given",
          "$ref": "#/definitions/paymentsPostReqCreditNote"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.paymentDate",
              "description": "ar-payments.paymentDate maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.paymentDate",
              "description": "ap-payments.paymentDate maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": 0
        },
        "Invoice": {
          "$ref": "#/definitions/paymentsPostReqInvoice"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Overpayment": {
          "x-conditionally-required-description": "This is required if InvoiceID, CreditNoteID, PrepaymentID  is not given",
          "$ref": "#/definitions/paymentsPostReqOverpayment"
        },
        "Prepayment": {
          "x-conditionally-required-description": "This is required if InvoiceID, CreditNoteID, OverpaymentID  is not given",
          "$ref": "#/definitions/paymentsPostReqPrepayment"
        },
        "Reference": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.reference",
              "description": "ar-payments.reference maps to Reference when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.reference",
              "description": "ap-payments.reference maps to Reference when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "INV-0001"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.status",
              "description": "ar-payments.status maps to Status when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.status",
              "description": "ap-payments.status maps to Status when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        }
      },
      "required": [
        "Account",
        "Invoice"
      ],
      "type": "object"
    },
    "invoicesPostResPrepayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPostResPrepaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPostResPrepaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "PrepaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-PREPAYMENT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactBalancesAccountsPayable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "contactsPatchReqAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.bankAccount",
              "description": "ar-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.bankAccount",
              "description": "ap-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoice": {
      "properties": {
        "AmountDue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "AmountPaid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Contact": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DueDate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DueDateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.lines[*].invoice.id",
              "description": "ar-payments.lines[*].invoice.id maps to Invoice.InvoiceID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.lines[*].bill.id",
              "description": "ap-payments.lines[*].bill.id maps to Invoice.InvoiceID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/paymentsGetByIdResInvoiceLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "contactsGetByIdResPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "contactsPatchResPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "contactsGetAllResObject": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsGetAllResAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.id",
              "description": "customers.id maps to ContactID when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.id",
              "description": "vendors.id maps to ContactID when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "bd2270c3-8706-4c11-9cfb-000b551c3f51",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsGetAllResContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsGetAllResPhones"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.modifiedDate",
              "description": "customers.modifiedDate maps to UpdatedDateUTC when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.modifiedDate",
              "description": "vendors.modifiedDate maps to UpdatedDateUTC when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "/Date(1488391422280+0000)/"
        }
      },
      "x-primary-key": [
        "ContactID"
      ],
      "type": "object"
    },
    "contactsPatchReqPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "453"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Internal DVD drive couldn't be supplied, backorder (Oliver laptop)"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/creditNotesGetByIdResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "salesQuotesGetResLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "LineItemID": {
          "type": "string",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Item Id",
          "x-samplevalue": "9151273c-cb8e-4c09-ab33-171a493706ce"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-displayName": "Tax Amount",
          "x-samplevalue": 0
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "1aa3bf00-a5fe-420f-b4b3-d64349a13108"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].taxAmount",
          "x-samplevalue": 150
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "invoicesPatchResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressLine2": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line2",
              "description": "invoices.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line2",
              "description": "bills.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "14 Boulevard Quay"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResCreditNotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Test Apply Credit Note"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactBalances": {
      "properties": {
        "AccountsPayable": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactBalancesAccountsPayable"
        },
        "AccountsReceivable": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactBalancesAccountsReceivable"
        }
      },
      "type": "object"
    },
    "creditNotesGetAllResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "North"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "093af706-c2aa-4d97-a4ce-2d205a017eac"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "3f05cdf9-246b-46a2-bf6f-441da1b09b89"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "invoicesPostResCreditNotesAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "accountsPostRes": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "57b91382-5639-4c09-956f-7b54ca8249be"
        },
        "Class": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "ASSET"
        },
        "Code": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "string"
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account"
        },
        "ReportingCode": {
          "type": "string",
          "x-samplevalue": "ASS"
        },
        "ReportingCodeName": {
          "type": "string",
          "x-samplevalue": "Assets"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE"
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1572582478387+0000)/"
        }
      },
      "x-primary-key": [
        "AccountID"
      ],
      "type": "object"
    },
    "contactsPostReqSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "accountsPostReq": {
      "properties": {
        "BankAccountNumber": {
          "type": "string",
          "x-samplevalue": "121-121-1234567"
        },
        "BankAccountType": {
          "type": "string",
          "x-samplevalue": "BANK"
        },
        "Code": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "string"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "string"
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE"
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK"
        }
      },
      "required": [
        "Type",
        "Code",
        "BankAccountNumber",
        "Name"
      ],
      "type": "object"
    },
    "invoicesPatchResOverpaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "transactionsPutResLineItemsTrackingOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "usersGetAllResObject": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "developer+22@cloud-elements.com",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "Harsha",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "IsSubscriber": {
          "type": "boolean",
          "x-samplevalue": true,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Gangavarapu",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "OrganisationRole": {
          "type": "string",
          "x-samplevalue": "STANDARD"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2019-10-23T06:38:01.160Z"
        },
        "UserID": {
          "type": "string",
          "x-samplevalue": "f52ccb19-4929-4fb3-8d03-864fedc4abfc"
        }
      },
      "title": "usersGetAllRes",
      "type": "object",
      "x-primary-key": [
        "UserID"
      ]
    },
    "transactionsPostResBankAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "invoicesPatchResOverpayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResOverpaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPatchResOverpaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "OverpaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-OVERPAYMENT"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-03-29T23:43:01.097"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "DiscountRate": {
          "type": "string",
          "x-samplevalue": "20"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "20"
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "LineItemID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.id",
              "description": "invoices.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.id",
              "description": "bills.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "52208ff9-528a-4985-a9ad-b2b1d4210e38"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "employeesPatchReqExternalLink": {
      "properties": {
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchRes": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersPatchResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-21T00:00:00"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-22T00:00:00"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "ExpectedArrivalDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-28T00:00:00"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchResLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "44d3f8a4-7031-45e8-b252-e92914e43c7e"
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-alias": "subTotal",
          "x-samplevalue": 1000
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 1150
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxAmount",
          "x-samplevalue": 150
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "PURCHASEORDER"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1385147725247+0000)/"
        }
      },
      "x-primary-key": [
        "PurchaseOrderID"
      ],
      "type": "object"
    },
    "purchaseOrdersPatchReq": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersPatchReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED"
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoiceLineItems": {
      "properties": {
        "AccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/paymentsPostResInvoiceLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "transactionsPutReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesGetByIdResOverpaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "accountsGetAllResObject": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "57b91382-5639-4c09-956f-7b54ca8249be"
        },
        "AddToWatchlist": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "BankAccountNumber": {
          "type": "string",
          "x-samplevalue": "121-121-1234567"
        },
        "BankAccountType": {
          "type": "string",
          "x-samplevalue": "BANK",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Class": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "ASSET",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Code": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            ">",
            "<",
            ">=",
            "<="
          ]
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "ReportingCode": {
          "type": "string",
          "x-samplevalue": "ASS",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "ReportingCodeName": {
          "type": "string",
          "x-samplevalue": "Assets"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "SystemAccount": {
          "type": "string",
          "x-samplevalue": "CREDITORS",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1572582478387+0000)/"
        }
      },
      "x-primary-key": [
        "AccountID"
      ],
      "type": "object"
    },
    "transactionsPostReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "paymentsGetAllResInvoiceContactBalances": {
      "properties": {
        "AccountsPayable": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactBalancesAccountsPayable"
        },
        "AccountsReceivable": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactBalancesAccountsReceivable"
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com",
          "x-sub-format": "email"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "taxRatesPostReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Oakdale Sales Tax",
          "x-required": true
        },
        "ReportTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TaxComponents": {
          "items": {
            "$ref": "#/definitions/taxRatesPostReqTaxComponents"
          },
          "type": "array",
          "x-required": true
        }
      },
      "title": "taxRatesPostReq",
      "type": "object",
      "required": [
        "Name",
        "TaxComponents"
      ]
    },
    "organisationsGetAllResExternalLinks": {
      "properties": {
        "LinkType": {
          "type": "string",
          "x-samplevalue": "Facebook"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://facebook.com/Xero.Accounting"
        }
      },
      "title": "ExternalLinks",
      "type": "object"
    },
    "organisationsGetAllRes": {
      "properties": {
        "APIKey": {
          "type": "string",
          "x-samplevalue": "PV1PS57LYQ7VDJYTGCUI99A6YJI1WZ"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/organisationsGetAllResAddresses"
          },
          "type": "array"
        },
        "BaseCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "Class": {
          "type": "string",
          "x-samplevalue": "DEMO"
        },
        "CountryCode": {
          "type": "string",
          "x-samplevalue": "NZ"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1488338543217)/"
        },
        "DefaultPurchasesTax": {
          "type": "string",
          "x-samplevalue": "DefaultPurchasesTax"
        },
        "DefaultSalesTax": {
          "type": "string",
          "x-samplevalue": "DefaultSalesTax"
        },
        "Edition": {
          "type": "string",
          "x-samplevalue": "BUSINESS"
        },
        "EmployerIdentificationNumber": {
          "type": "string",
          "x-samplevalue": "EmployerIdentificationNumber"
        },
        "EndOfYearLockDate": {
          "type": "string",
          "x-samplevalue": "EndOfYearLockDate"
        },
        "ExternalLinks": {
          "items": {
            "$ref": "#/definitions/organisationsGetAllResExternalLinks"
          },
          "type": "array"
        },
        "FinancialYearEndDay": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 31
        },
        "FinancialYearEndMonth": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3
        },
        "IsDemoCompany": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LegalName": {
          "type": "string",
          "x-samplevalue": "Demo Company (NZ)"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Demo Company (NZ)"
        },
        "OrganisationEntityType": {
          "type": "string",
          "x-samplevalue": "COMPANY"
        },
        "OrganisationID": {
          "type": "string",
          "x-samplevalue": "c3d5e782-2153-4cda-bdb4-cec791ceb90d"
        },
        "OrganisationStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "OrganisationType": {
          "type": "string",
          "x-samplevalue": "COMPANY"
        },
        "PaymentTerms": {
          "$ref": "#/definitions/organisationsGetAllResPaymentTerms"
        },
        "PaysTax": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "PeriodLockDate": {
          "type": "string",
          "x-samplevalue": "/Date(1254268800000+0000)/"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/organisationsGetAllResPhones"
          },
          "type": "array"
        },
        "RegistrationNumber": {
          "type": "string",
          "x-samplevalue": "RegistrationNumber"
        },
        "SalesTaxBasis": {
          "type": "string",
          "x-samplevalue": "PAYMENTS"
        },
        "SalesTaxPeriod": {
          "type": "string",
          "x-samplevalue": "TWOMONTHS"
        },
        "ShortCode": {
          "type": "string",
          "x-samplevalue": "!23eYt"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "101-2-303"
        },
        "Timezone": {
          "type": "string",
          "x-samplevalue": "NEWZEALANDSTANDARDTIME"
        },
        "Version": {
          "type": "string",
          "x-samplevalue": "NZ"
        }
      },
      "title": "organisationsGetAllRes",
      "type": "object"
    },
    "creditNotesPatchResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "d0cd2c4f-18a0-4f7c-a32a-2db00f29d298"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "PC Complete"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "invoicesPatchResPayments": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].lines[*].amount",
              "description": "invoices.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].lines[*].amount",
              "description": "bills.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].id",
              "description": "invoices.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].id",
              "description": "bills.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "0d666415-cf77-43fa-80c7-56775591d426"
        }
      },
      "type": "object"
    },
    "taxRatesPostRes": {
      "properties": {
        "CanApplyToAssets": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToEquity": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToExpenses": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToLiabilities": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "CanApplyToRevenue": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "DisplayTaxRate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        },
        "EffectiveRate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "15% GST on Expenses"
        },
        "ReportTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TaxComponents": {
          "items": {
            "$ref": "#/definitions/taxRatesPostResTaxComponents"
          },
          "type": "array"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        }
      },
      "title": "taxRatesPostRes",
      "type": "object"
    },
    "creditNotesGetAllResAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "673dd7cc-beb7-4697-83d4-0c47cb400cc2"
        }
      },
      "title": "Invoice",
      "type": "object"
    },
    "transactionsPutReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqLineItemsTrackingOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactPaymentTerms": {
      "properties": {
        "Bills": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactPaymentTermsBills"
        },
        "Sales": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactPaymentTermsSales"
        }
      },
      "type": "object"
    },
    "creditNotesPatchResBrandingThemeID": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "title": "BrandingThemeID",
      "type": "object"
    },
    "invoicesPatchResContactPhones": {
      "properties": {
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "transactionsPostReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "employeesPostRes": {
      "properties": {
        "EmployeeID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "6515d052-b3f7-4de4-b0a3-e4c12caba8b2"
        },
        "ExternalLink": {
          "$ref": "#/definitions/employeesPostResExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1519351730117+0000)/"
        }
      },
      "x-primary-key": [
        "EmployeeID"
      ],
      "type": "object"
    },
    "employeesPostReq": {
      "properties": {
        "ExternalLink": {
          "$ref": "#/definitions/employeesPostReqExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "required": [
        "FirstName",
        "LastName"
      ],
      "type": "object"
    },
    "contactsPatchReqSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "invoicesPostReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.email",
              "description": "invoices.customer.contact.email maps to EmailAddress when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.email",
              "description": "bills.vendor.contact.email maps to EmailAddress when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "john.smith@gmail.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.firstName",
              "description": "invoices.customer.contact.firstName maps to FirstName when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.firstName",
              "description": "bills.vendor.contact.firstName maps to FirstName when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "John"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.contact.lastName",
              "description": "invoices.customer.contact.lastName maps to LastName when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.contact.lastName",
              "description": "bills.vendor.contact.lastName maps to LastName when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Smith"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.paymentTerms",
              "description": "invoices.paymentTerms maps to PaymentTerms when value of field Type is ACCREC"
            },
            {
              "alias": "bills.paymentTerms",
              "description": "bills.paymentTerms maps to PaymentTerms when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoiceContactPaymentTermsBills": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "contactsGetAllResAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "Andrea"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "paymentsPostReqCreditNote": {
      "properties": {
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "96df0dff-43ec-4899-a7d9-e9d63ef12b19"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "IN-007"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactPaymentTerms": {
      "properties": {
        "Bills": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactPaymentTermsBills"
        },
        "Sales": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactPaymentTermsSales"
        }
      },
      "type": "object"
    },
    "journalsGetAllResObject": {
      "properties": {
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1510091180510+0000)/"
        },
        "JournalDate": {
          "type": "string",
          "x-samplevalue": "/Date(1475625600000+0000)/"
        },
        "JournalID": {
          "type": "string",
          "x-samplevalue": "23ff0b88-a141-4770-8537-0dd505873b1e"
        },
        "JournalLines": {
          "items": {
            "$ref": "#/definitions/journalsGetAllResJournalLines"
          },
          "type": "array"
        },
        "JournalNumber": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 281
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT400-1"
        },
        "SourceID": {
          "type": "string",
          "x-samplevalue": "3047f972-b6d9-485d-adbc-adcb3a8ebeb4"
        },
        "SourceType": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        }
      },
      "title": "journalsGetAllRes",
      "type": "object",
      "x-primary-key": [
        "JournalID"
      ]
    },
    "accountsGerByIdRes": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "57b91382-5639-4c09-956f-7b54ca8249be"
        },
        "BankAccountType": {
          "type": "string",
          "x-samplevalue": "BANK"
        },
        "Class": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "ASSET"
        },
        "Code": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "string"
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account"
        },
        "ReportingCode": {
          "type": "string",
          "x-samplevalue": "ASS"
        },
        "ReportingCodeName": {
          "type": "string",
          "x-samplevalue": "Assets"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE"
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1572582478387+0000)/"
        }
      },
      "x-primary-key": [
        "AccountID"
      ],
      "type": "object"
    },
    "transactionsPostResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/transactionsPostResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "transactionsGetByIdResContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/transactionsGetByIdResContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/transactionsGetByIdResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "paymentsGetAllResInvoiceContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/paymentsGetAllResInvoiceContactAddresses"
          },
          "type": "array"
        },
        "Balances": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactBalances"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.id",
              "description": "ar-payments.customer.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.id",
              "description": "ap-payments.vendor.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.name",
              "description": "ar-payments.customer.name maps to Invoice.Contact.Name when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.name",
              "description": "ap-payments.vendor.name maps to Invoice.Contact.Name when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContactPaymentTerms"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/paymentsGetAllResInvoiceContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "invoicesPostResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "LineItemID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.id",
              "description": "invoices.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.id",
              "description": "bills.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "52208ff9-528a-4985-a9ad-b2b1d4210e38"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesPostResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "transactionsGetAllResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "683fb579-a1c8-4e8a-a09d-0a70813e5a28"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "9848012134"
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Harsha"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "invoicesGetAllResOverpayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResOverpaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetAllResOverpaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "OverpaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-OVERPAYMENT"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSS",
          "x-samplevalue": "2015-03-29T23:43:01.097"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressLine2": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line2",
              "description": "invoices.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line2",
              "description": "bills.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "14 Boulevard Quay"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/paymentsGetByIdResInvoiceContactAddresses"
          },
          "type": "array"
        },
        "Balances": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactBalances"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.id",
              "description": "ar-payments.customer.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.id",
              "description": "ap-payments.vendor.id maps to Invoice.Contact.ContactID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.customer.name",
              "description": "ar-payments.customer.name maps to Invoice.Contact.Name when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.vendor.name",
              "description": "ap-payments.vendor.name maps to Invoice.Contact.Name when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "$ref": "#/definitions/paymentsGetByIdResInvoiceContactPaymentTerms"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/paymentsGetByIdResInvoiceContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "invoicesPostResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressLine2": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line2",
              "description": "invoices.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line2",
              "description": "bills.billingAddress.line2 maps to Contact.Addresses[*].AddressLine2 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "14 Boulevard Quay"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "salesQuotesGetByIdResQuotes": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Branding Theme Id",
          "x-samplevalue": "597704e4-a0ac-4af0-90bc-721929f8139d"
        },
        "Contact": {
          "$ref": "#/definitions/salesQuotesGetByIdResQuotesContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-alias": "currency",
          "x-displayName": "Currency Rate",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-02-27T00:00:00"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000"
        },
        "ExpiryDateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-03-15T00:00:00"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesGetByIdResQuotesLineItems"
          },
          "type": "array"
        },
        "QuoteID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Quote Id",
          "x-samplevalue": "248dc7e9-74cf-4e6e-afe1-2c37daad84c8"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-0001"
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "DRAFT"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book"
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale"
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Updated Date Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396317"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "transactionsGetByIdRes": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsGetByIdResBankAccount"
        },
        "BankTransactionID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsGetByIdResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2020-04-29T07:40:26.441Z"
        },
        "ExternalLinkProviderName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsGetByIdResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2020-04-29T07:40:26.441Z"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "transactionsGetByIdRes",
      "type": "object"
    },
    "itemsGetByIdResSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "creditNotesPostReq": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "BrandingThemeID"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesPostReqContact",
          "x-required": true
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-03-29"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqLineItems"
          },
          "type": "array",
          "x-required": true
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT",
          "x-required": true
        }
      },
      "title": "creditNotesPostReq",
      "type": "object",
      "required": [
        "Contact",
        "LineItems",
        "Type"
      ]
    },
    "purchaseOrdersGetByIdResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceLineItems": {
      "properties": {
        "AccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/paymentsGetByIdResInvoiceLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "creditNotesPostRes": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/creditNotesPostResAllocations"
          },
          "type": "array"
        },
        "BrandingThemeID": {
          "items": {
            "$ref": "#/definitions/creditNotesPostResBrandingThemeID"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/creditNotesPostResContact"
        },
        "CreditNoteID": {
          "type": "string",
          "x-samplevalue": "7df8949c-b71f-40c0-bbcf-39f2f450f286"
        },
        "CreditNoteNumber": {
          "type": "string",
          "x-samplevalue": "03391"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "AUD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-07T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1486425600000+0000)/"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/creditNotesPostResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Reference Number"
        },
        "RemainingCredit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 218.9
        },
        "TotalTax": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCPAYCREDIT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1290777947340+0000)/"
        }
      },
      "title": "creditNotesPostRes",
      "x-primary-key": [
        "CreditNoteID"
      ],
      "type": "object"
    },
    "transactionsPutResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutResLineItemsTrackingOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "paymentsGetByIdRes": {
      "properties": {
        "Account": {
          "$ref": "#/definitions/paymentsGetByIdResAccount"
        },
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.amount",
              "description": "ar-payments.amount maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.amount",
              "description": "ap-payments.amount maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        },
        "BankAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.paymentDate",
              "description": "ar-payments.paymentDate maps to Amount when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.paymentDate",
              "description": "ap-payments.paymentDate maps to Amount when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": 0
        },
        "HasAccount": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasValidationErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Invoice": {
          "$ref": "#/definitions/paymentsGetByIdResInvoice"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.id",
              "description": "ar-payments.id maps to PaymentID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.id",
              "description": "ap-payments.id maps to PaymentID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "PaymentType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.status",
              "description": "ar-payments.status maps to Status when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.status",
              "description": "ap-payments.status maps to Status when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-alias": [
            {
              "alias": "ar-payments.modifiedDate",
              "description": "ar-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.modifiedDate",
              "description": "ap-payments.modifiedDate maps to UpdatedDateUTC when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": 0
        }
      },
      "x-primary-key": [
        "PaymentID"
      ],
      "type": "object"
    },
    "salesQuotesGetByIdResQuotesLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "LineItemID": {
          "type": "string",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Item Id",
          "x-samplevalue": "0e0747a3-47c6-47e7-bd20-c841bd80e3af"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-displayName": "Tax Amount",
          "x-samplevalue": 0
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    },
    "creditNotesGetAllResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "453"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Internal DVD drive couldn't be supplied, backorder (Oliver laptop)"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 19.9
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/creditNotesGetAllResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 199
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "transactionsPutReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "transactionsPostReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "itemsPatchReqPurchaseDetails": {
      "properties": {
        "COGSAccountCode": {
          "type": "string",
          "x-alias": "cogsAccount",
          "x-samplevalue": "300"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "invoicesPostResCreditNotesAllocations": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPostResCreditNotesAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesPostReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "creditNotesPostReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "720"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "MacBook - White"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1995
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "paymentsPostResInvoiceContactPaymentTerms": {
      "properties": {
        "Bills": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactPaymentTermsBills"
        },
        "Sales": {
          "$ref": "#/definitions/paymentsPostResInvoiceContactPaymentTermsSales"
        }
      },
      "type": "object"
    },
    "contactsPostReqPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPostReqPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "transactionsPostResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "journalsGetAllResJournalLines": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "255"
        },
        "AccountID": {
          "type": "string",
          "x-samplevalue": "dd517756-1b24-4db3-8aee-51d331039012"
        },
        "AccountName": {
          "type": "string",
          "x-samplevalue": "Historical Adjustment"
        },
        "AccountType": {
          "type": "string",
          "x-samplevalue": "CURRLIAB"
        },
        "Description": {
          "type": "string"
        },
        "GrossAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -4130.98
        },
        "JournalLineID": {
          "type": "string",
          "x-samplevalue": "2e38d2d7-d2e4-4894-89e4-bb25737cb677"
        },
        "NetAmount": {
          "format": "double",
          "type": "number",
          "x-samplevalue": -4130.98
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxName": {
          "type": "string",
          "x-samplevalue": "Tax Exempt"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "NONE"
        },
        "TrackingCategories": {
          "items": {
            "$ref": "#/definitions/journalsGetAllResJournalLinesTrackingCategories"
          },
          "type": "array"
        }
      },
      "title": "JournalLines",
      "type": "object"
    },
    "creditNotesPostReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "6011"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "contactsPatchReqPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostRes": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersPostResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-21T00:00:00"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-22T00:00:00"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "ExpectedArrivalDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2017-02-28T00:00:00"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "44d3f8a4-7031-45e8-b252-e92914e43c7e"
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-alias": "subTotal",
          "x-samplevalue": 1000
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 1150
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxAmount",
          "x-samplevalue": 150
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "PURCHASEORDER"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1385147725247+0000)/"
        }
      },
      "x-primary-key": [
        "PurchaseOrderID"
      ],
      "type": "object"
    },
    "purchaseOrdersPostReq": {
      "properties": {
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "FOH"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "7889a0ac-262a-40e3-8a63-9a769b1a18af"
        },
        "Contact": {
          "$ref": "#/definitions/purchaseOrdersPostReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-alias": "purchaseOrderDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487635200000+0000)/"
        },
        "DeliveryAddress": {
          "type": "string",
          "x-samplevalue": "23 Main Street\r\nCentral City\r\nMarineville\r\n1234\r\n"
        },
        "DeliveryDate": {
          "format": "date",
          "type": "string",
          "x-alias": "dueDate",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1487721600000+0000)/"
        },
        "DeliveryInstructions": {
          "type": "string",
          "x-samplevalue": "Deliver to reception. As agreed, table needs to be assembled prior to delivery."
        },
        "ExpectedArrivalDate": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "/Date(1488240000000+0000)/"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqLineItems"
          },
          "type": "array"
        },
        "PurchaseOrderNumber": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "PO-0001"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "710"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "BILLED"
        },
        "Telephone": {
          "type": "string",
          "x-samplevalue": "0800 1234 5678"
        }
      },
      "required": [
        "Contact"
      ],
      "type": "object"
    },
    "accountsPatchRes": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "57b91382-5639-4c09-956f-7b54ca8249be"
        },
        "BankAccountNumber": {
          "type": "string",
          "x-samplevalue": "121-121-1234567"
        },
        "BankAccountType": {
          "type": "string",
          "x-samplevalue": "BANK"
        },
        "Class": {
          "type": "string",
          "x-alias": "accCategory",
          "x-samplevalue": "ASSET"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account"
        },
        "ReportingCode": {
          "type": "string",
          "x-samplevalue": "ASS"
        },
        "ReportingCodeName": {
          "type": "string",
          "x-samplevalue": "Assets"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE"
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1572582478387+0000)/"
        }
      },
      "x-primary-key": [
        "AccountID"
      ],
      "type": "object"
    },
    "accountsPatchReq": {
      "properties": {
        "BankAccountNumber": {
          "type": "string",
          "x-samplevalue": "121-121-1234567"
        },
        "BankAccountType": {
          "type": "string",
          "x-samplevalue": "BANK"
        },
        "Code": {
          "type": "string",
          "x-alias": "account",
          "x-samplevalue": "string"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-samplevalue": "USD"
        },
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "string"
        },
        "EnablePaymentsToAccount": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Name": {
          "type": "string",
          "x-alias": "accName",
          "x-samplevalue": "Cheque Account"
        },
        "ShowInExpenseClaims": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "taxCode",
          "x-samplevalue": "NONE"
        },
        "Type": {
          "type": "string",
          "x-alias": "accSubCategory",
          "x-samplevalue": "BANK"
        }
      },
      "type": "object"
    },
    "invoicesPatchResPrepayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResPrepaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPatchResPrepaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "PrepaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-PREPAYMENT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        }
      },
      "type": "object"
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "contactsPostResBrandingTheme": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "type": "object"
    },
    "BulkJobList": {
      "title": "BulkJobList",
      "properties": {
        "record_count": {
          "x-samplevalue": 41,
          "format": "int32",
          "type": "integer"
        },
        "job_query": {
          "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type": "string"
        },
        "job_reset_attempt": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "completion_time": {
          "x-samplevalue": 1542829827804,
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "x-samplevalue": "COMPLETED",
          "type": "string"
        },
        "notification_url": {
          "type": "string"
        },
        "job_direction": {
          "x-samplevalue": "DOWNLOAD",
          "type": "string"
        },
        "error_count": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "job_state": {
          "type": "string"
        },
        "createdDate": {
          "x-samplevalue": 1542829826619,
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "x-samplevalue": 1722,
          "format": "int32",
          "type": "integer"
        },
        "instanceId": {
          "x-samplevalue": 123453,
          "format": "int32",
          "type": "integer"
        },
        "object_name": {
          "x-samplevalue": "systemuser",
          "type": "string"
        },
        "fileFormat": {
          "x-samplevalue": "csv",
          "type": "string"
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "invoicesPostReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "contactsPatchReqContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "salesQuotesPostRes": {
      "properties": {
        "DateTimeUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date Time Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396406"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Id",
          "x-samplevalue": "b6eb0c61-31be-45a7-b50d-77815171ff80"
        },
        "ProviderName": {
          "type": "string",
          "x-alias": "name",
          "x-displayName": "Provider Name",
          "x-samplevalue": "CEDev2"
        },
        "Quotes": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostResQuotes"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT"
        },
        "SummarizeErrors": {
          "type": "boolean",
          "x-displayName": "Summarizeerrors",
          "x-samplevalue": true
        }
      },
      "type": "object"
    },
    "invoicesPostResContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesPostResContactAddresses"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesPostResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        }
      },
      "type": "object"
    },
    "transactionsPostReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "salesQuotesPostReq": {
      "properties": {
        "Contact": {
          "$ref": "#/definitions/salesQuotesPostReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD"
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostReqLineItems"
          },
          "type": "array"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-1068"
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book"
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale"
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "720"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "MacBook - White"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1995
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "contactsPatchReq": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.paymentTerms.name",
              "description": "customers.paymentTerms.name maps to PaymentTerms when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.paymentTerms.name",
              "description": "vendors.paymentTerms.name maps to PaymentTerms when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLDATE"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPatchReqSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "TrackingCategoryName"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "type": "object"
    },
    "invoicesPatchResContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResContactAddresses"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        }
      },
      "type": "object"
    },
    "contactsPatchRes": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsPatchResAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844"
        },
        "BrandingTheme": {
          "items": {
            "$ref": "#/definitions/contactsPatchResBrandingTheme"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.id",
              "description": "customers.id maps to ContactID when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.id",
              "description": "vendors.id maps to ContactID when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "bd2270c3-8706-4c11-9cfb-000b551c3f51"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsPatchResContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "Discount": {
          "type": "string",
          "x-samplevalue": "Discount"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.paymentTerms.name",
              "description": "customers.paymentTerms.name maps to PaymentTerms when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.paymentTerms.name",
              "description": "vendors.paymentTerms.name maps to PaymentTerms when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLDATE"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsPatchResPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPatchResPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPatchResSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "TrackingCategoryName"
        },
        "TrackingOptionName": {
          "type": "string",
          "x-samplevalue": "TrackingOptionName"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.modifiedDate",
              "description": "customers.modifiedDate maps to UpdatedDateUTC when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.modifiedDate",
              "description": "vendors.modifiedDate maps to UpdatedDateUTC when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "/Date(1488391422280+0000)/"
        },
        "Website": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.webSite",
              "description": "customers.webSite maps to Website when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.webSite",
              "description": "vendors.webSite maps to Website when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Website"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "x-primary-key": [
        "ContactID"
      ],
      "type": "object"
    },
    "contactsGetByIdResBrandingTheme": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "type": "object"
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "contactsPostReqAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "employeesPostReqExternalLink": {
      "properties": {
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "invoicesPostResPrepaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPostResPrepaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesPatchResPrepaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResQuotesLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "LineItemID": {
          "type": "string",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Item Id",
          "x-samplevalue": "0e0747a3-47c6-47e7-bd20-c841bd80e3af"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-displayName": "Tax Amount",
          "x-samplevalue": 0
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoiceContactPaymentTermsSales": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "transactionsPostResContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "transactionsPostResContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "transactionsPutReqLineItemsTrackingOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesGetByIdRes": {
      "properties": {
        "AmountCredited": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "AmountDue": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountDue",
              "description": "invoices.totalAmountDue maps to AmountDue when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountDue",
              "description": "bills.totalAmountDue maps to AmountDue when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1025.00"
        },
        "AmountPaid": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountPaid",
              "description": "invoices.totalAmountPaid maps to AmountPaid when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountPaid",
              "description": "bills.totalAmountPaid maps to AmountPaid when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetByIdResContact"
        },
        "CreditNotes": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResCreditNotes"
          },
          "type": "array"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "FullyPaidOnDate"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.id",
              "description": "invoices.id maps to InvoiceID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.id",
              "description": "bills.id maps to InvoiceID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "243216c5-369e-4056-ac67-05388f86dc81"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResLineItems"
          },
          "type": "array"
        },
        "Overpayments": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResOverpayments"
          },
          "type": "array"
        },
        "Payments": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResPayments"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Prepayments": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResPrepayments"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED"
        },
        "SubTotal": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.subTotal",
              "description": "invoices.subTotal maps to SubTotal when value of field Type is ACCREC"
            },
            {
              "alias": "bills.subTotal",
              "description": "bills.subTotal maps to SubTotal when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "Total": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.amount",
              "description": "invoices.amount maps to Total when value of field Type is ACCREC"
            },
            {
              "alias": "bills.amount",
              "description": "bills.amount maps to Total when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "2025.00"
        },
        "TotalDiscount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.discountAmount",
              "description": "invoices.discountAmount maps to TotalDiscount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.discountAmount",
              "description": "bills.discountAmount maps to TotalDiscount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "TotalDiscount"
        },
        "TotalTax": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.taxAmount",
              "description": "invoices.taxAmount maps to TotalTax when value of field Type is ACCREC"
            },
            {
              "alias": "bills.taxAmount",
              "description": "bills.taxAmount maps to TotalTax when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.modifiedDate",
              "description": "invoices.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCREC"
            },
            {
              "alias": "bills.modifiedDate",
              "description": "bills.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "x-primary-key": [
        "InvoiceID"
      ],
      "type": "object"
    },
    "transactionsPutReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Addresses",
      "type": "object"
    },
    "purchaseOrdersPostReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "transactionsGetAllResBankAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-samplevalue": "08ca6c9f-35dc-424b-9556-bd854c0d4fa6"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "CapitalOneAccount"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "itemsPatchResPurchaseDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "400"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "creditNotesPostResBrandingThemeID": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "title": "BrandingThemeID",
      "type": "object"
    },
    "creditNotesGetAllResBrandingThemeID": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "title": "BrandingThemeID",
      "type": "object"
    },
    "purchaseOrdersPostReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "itemsPatchRes": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing"
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsTrackedAsInventory": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ItemID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "19b79d12-0ae1-496e-9649-cbd04b15c7c5"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsPatchResPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsPatchResSalesDetails"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1488338552390+0000)/"
        }
      },
      "x-primary-key": [
        "ItemID"
      ],
      "type": "object"
    },
    "salesQuotesPatchResQuotes": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Branding Theme Id",
          "x-samplevalue": "597704e4-a0ac-4af0-90bc-721929f8139d"
        },
        "Contact": {
          "$ref": "#/definitions/salesQuotesPatchResQuotesContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-alias": "currency",
          "x-displayName": "Currency Rate",
          "x-samplevalue": 1
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-02-27T00:00:00"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000"
        },
        "ExpiryDateString": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date String",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2021-03-15T00:00:00"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchResQuotesLineItems"
          },
          "type": "array"
        },
        "QuoteID": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Quote Id",
          "x-samplevalue": "248dc7e9-74cf-4e6e-afe1-2c37daad84c8"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-0001"
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "DRAFT"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book"
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale"
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Updated Date Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396317"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "employeesPostResExternalLink": {
      "properties": {
        "Description": {
          "type": "string",
          "x-samplevalue": "Go to external link"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "itemsPatchReq": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing"
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "InventoryAssetAccountCode": {
          "type": "string",
          "x-alias": "assetAccount",
          "x-samplevalue": "630"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsPatchReqPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsPatchReqSalesDetails"
        }
      },
      "required": [
        "InventoryAssetAccountCode",
        "Code"
      ],
      "type": "object"
    },
    "paymentsPostReqOverpayment": {
      "properties": {
        "OverpaymentID": {
          "type": "string",
          "x-samplevalue": "1ced4be7-ea6d-4f46-8279-4203e461de80"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "purchaseOrdersPostReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@gmail.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": "paymentTerms",
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-alias": "vendor.account",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "type": "object"
    },
    "paymentsPostReqAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.bankAccount",
              "description": "ar-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.bankAccount",
              "description": "ap-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "contactsPostResPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "North"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "093af706-c2aa-4d97-a4ce-2d205a017eac"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "3f05cdf9-246b-46a2-bf6f-441da1b09b89"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "invoicesPatchResOverpaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1401062400000+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2014-05-26T00:00:00"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesPatchResOverpaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "taxRatesGetAllResObject": {
      "properties": {
        "CanApplyToAssets": {
          "type": "string",
          "x-samplevalue": "true",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "CanApplyToEquity": {
          "type": "string",
          "x-samplevalue": "true",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "CanApplyToExpenses": {
          "type": "string",
          "x-samplevalue": "true",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "CanApplyToLiabilities": {
          "type": "string",
          "x-samplevalue": "true",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "CanApplyToRevenue": {
          "type": "string",
          "x-samplevalue": "false",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "DisplayTaxRate": {
          "type": "string",
          "x-samplevalue": "15.0000",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "EffectiveRate": {
          "type": "string",
          "x-samplevalue": "15.0000",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "15% GST on Expenses",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "ReportTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "TaxComponents": {
          "items": {
            "$ref": "#/definitions/taxRatesGetAllResTaxComponents"
          },
          "type": "array"
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        }
      },
      "title": "taxRatesGetAllRes",
      "type": "object"
    },
    "itemsPatchResSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "invoicesPatchResOverpaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "transactionsPostReqLineItemsTrackingOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesPostResOverpaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "journalsGetAllResJournalLinesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/journalsGetAllResJournalLinesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "TrackingCategories",
      "type": "object"
    },
    "taxRatesGetAllResTaxComponents": {
      "properties": {
        "IsCompound": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "IsNonRecoverable": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "Rate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        }
      },
      "title": "TaxComponents",
      "type": "object"
    },
    "invoicesPostResOverpaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com",
          "x-sub-format": "email"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "purchaseOrdersPostReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "itemsGetByIdRes": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing"
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsTrackedAsInventory": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ItemID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "19b79d12-0ae1-496e-9649-cbd04b15c7c5"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsGetByIdResPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsGetByIdResSalesDetails"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1488338552390+0000)/"
        }
      },
      "x-primary-key": [
        "ItemID"
      ],
      "type": "object"
    },
    "transactionsPutResContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactPaymentTermsSales": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "transactionsPostReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesPatchReqLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResOverpaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "itemsGetByIdResPurchaseDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "expenseAccount",
          "x-samplevalue": "400"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResQuotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Email Address"
        },
        "Name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-displayName": "Name",
          "x-samplevalue": "asdcf@dfcsad"
        }
      },
      "type": "object"
    },
    "invoicesPatchResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "LineItemID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.id",
              "description": "invoices.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.id",
              "description": "bills.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "52208ff9-528a-4985-a9ad-b2b1d4210e38"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesPatchResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "contactsPostReqPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "1234567890"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "creditNotesGetByIdResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "d0cd2c4f-18a0-4f7c-a32a-2db00f29d298"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "PC Complete"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "taxRatesPatchResTaxComponents": {
      "properties": {
        "IsCompound": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "IsNonRecoverable": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "Rate": {
          "type": "string",
          "x-samplevalue": "15.0000"
        }
      },
      "title": "TaxComponents",
      "type": "object"
    },
    "taxRatesPatchReq": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Oakdale Sales Tax",
          "x-required": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TaxComponents": {
          "items": {
            "$ref": "#/definitions/taxRatesPatchReqTaxComponents"
          },
          "type": "array",
          "x-required": true
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        }
      },
      "title": "taxRatesPatchReq",
      "type": "object",
      "required": [
        "Name",
        "TaxComponents"
      ]
    },
    "employeesGetAllResObject": {
      "properties": {
        "EmployeeID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "6515d052-b3f7-4de4-b0a3-e4c12caba8b2"
        },
        "ExternalLink": {
          "$ref": "#/definitions/employeesGetAllResExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1519351730117+0000)/"
        }
      },
      "x-primary-key": [
        "EmployeeID"
      ],
      "type": "object"
    },
    "contactsPatchResBrandingTheme": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "aefae6d5-7bbe-4e2e-aadc-302cd07a0fc1"
        },
        "CreatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1277835396270+0000)/"
        },
        "LogoUrl": {
          "type": "string",
          "x-samplevalue": "https://in.xero.com/logo?id=ZXcwS0lDQWlieUk2SUNJME5XVTBOekE0WlMxa09EWXlMVFF4TVRFdFlXSXpZUzFrWkRoalpEQXpPVEV6WlRFaUxBMEtJQ0FpWmlJNklDSXhOalJtWVRRelpDMWlOamsyTFRRNVlqSXRPR1F5TWkwMFpqTXlOamxtTnpWbU1XRWlEUXA5LVU0Zkh4TVNiYVRzPQ"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Standard"
        },
        "SortOrder": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "INVOICE"
        }
      },
      "type": "object"
    },
    "contactsGetByIdResContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "paymentsGetAllResInvoiceContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine2": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine3": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine4": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Region": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "invoicesPostReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "1234567890"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "creditNotesPostResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "North"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "093af706-c2aa-4d97-a4ce-2d205a017eac"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "3f05cdf9-246b-46a2-bf6f-441da1b09b89"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "invoicesGetAllResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "LineItemID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.id",
              "description": "invoices.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.id",
              "description": "bills.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "52208ff9-528a-4985-a9ad-b2b1d4210e38"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "itemsPostReqSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "paymentsGetByIdResInvoiceContactPaymentTermsBills": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "itemsPostReqPurchaseDetails": {
      "properties": {
        "COGSAccountCode": {
          "type": "string",
          "x-alias": "cogsAccount",
          "x-samplevalue": "300"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "purchaseTaxCode",
          "x-samplevalue": "NONE"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "cost",
          "x-samplevalue": 20
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactPaymentTermsSales": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "contactsPostResPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "04"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "64"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.phone",
              "description": "customers.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.phone",
              "description": "vendors.corporateAddress.phone maps to Phones.[*].PhoneNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "1111111"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResCreditNotesAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "transactionsGetAllResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "2200"
        },
        "Description": {
          "type": "string",
          "x-samplevalue": "Yearly Bank Account Fee"
        },
        "ItemCode": {
          "type": "string",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "682417c3-f16d-41b4-83e2-c3967128372d"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "NONE"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        }
      },
      "title": "LineItems",
      "type": "object"
    },
    "transactionsPutReqBankAccount": {
      "properties": {
        "AccountId": {
          "type": "string",
          "x-samplevalue": "08ca6c9f-35dc-424b-9556-bd854c0d4fa6"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "1912"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "organisationsGetAllResPhones": {
      "properties": {
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-samplevalue": "eaa28f49-6028-4b6e-bb12-d8f6278073fc"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@gmail.com",
          "x-sub-format": "email"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com",
          "x-sub-format": "email"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "itemsGetAllResSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResOverpaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "contactsGetByIdResAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "Andrea"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "itemsPatchReqSalesDetails": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-alias": "incomeAccount",
          "x-samplevalue": "200"
        },
        "TaxType": {
          "type": "string",
          "x-alias": "salesTaxCode",
          "x-samplevalue": "OUTPUT2"
        },
        "UnitPrice": {
          "format": "int32",
          "type": "integer",
          "x-alias": "price",
          "x-samplevalue": 40
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetAllResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "contactsGetByIdResSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsGetByIdResSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResPrepaymentsContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Mr Contact"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesGetByIdResPrepayments": {
      "properties": {
        "Allocations": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResPrepaymentsAllocations"
          },
          "type": "array"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetByIdResPrepaymentsContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "HasAttachments": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Inclusive"
        },
        "PrepaymentID": {
          "type": "string",
          "x-samplevalue": "aea95d78-ea48-456b-9b08-6bc012600072"
        },
        "RemainingCredit": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "PAID"
        },
        "SubTotal": {
          "type": "string",
          "x-samplevalue": "86.96"
        },
        "Total": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "TotalTax": {
          "type": "string",
          "x-samplevalue": "13.04"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "RECEIVE-PREPAYMENT"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@gmail.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": "paymentTerms",
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-alias": "vendor.account",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "type": "object"
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResObject": {
      "properties": {
        "AmountCredited": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "AmountDue": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountDue",
              "description": "invoices.totalAmountDue maps to AmountDue when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountDue",
              "description": "bills.totalAmountDue maps to AmountDue when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1025.00"
        },
        "AmountPaid": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountPaid",
              "description": "invoices.totalAmountPaid maps to AmountPaid when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountPaid",
              "description": "bills.totalAmountPaid maps to AmountPaid when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesGetAllResContact"
        },
        "CreditNotes": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResCreditNotes"
          },
          "type": "array"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "FullyPaidOnDate"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.id",
              "description": "invoices.id maps to InvoiceID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.id",
              "description": "bills.id maps to InvoiceID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "243216c5-369e-4056-ac67-05388f86dc81",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResLineItems"
          },
          "type": "array"
        },
        "Overpayments": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResOverpayments"
          },
          "type": "array"
        },
        "Payments": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResPayments"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Prepayments": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResPrepayments"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "SubTotal": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.subTotal",
              "description": "invoices.subTotal maps to SubTotal when value of field Type is ACCREC"
            },
            {
              "alias": "bills.subTotal",
              "description": "bills.subTotal maps to SubTotal when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "Total": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.amount",
              "description": "invoices.amount maps to Total when value of field Type is ACCREC"
            },
            {
              "alias": "bills.amount",
              "description": "bills.amount maps to Total when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "2025.00"
        },
        "TotalDiscount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.discountAmount",
              "description": "invoices.discountAmount maps to TotalDiscount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.discountAmount",
              "description": "bills.discountAmount maps to TotalDiscount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "TotalDiscount"
        },
        "TotalTax": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.taxAmount",
              "description": "invoices.taxAmount maps to TotalTax when value of field Type is ACCREC"
            },
            {
              "alias": "bills.taxAmount",
              "description": "bills.taxAmount maps to TotalTax when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.modifiedDate",
              "description": "invoices.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCREC"
            },
            {
              "alias": "bills.modifiedDate",
              "description": "bills.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "x-primary-key": [
        "InvoiceID"
      ],
      "type": "object"
    },
    "transactionsPostResContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "ContactPersons",
      "type": "object"
    },
    "salesQuotesPostReqLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    },
    "paymentsPostResAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.bankAccount",
              "description": "ar-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.bankAccount",
              "description": "ap-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoice": {
      "properties": {
        "AmountDue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "AmountPaid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Contact": {
          "$ref": "#/definitions/paymentsPostResInvoiceContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DueDate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DueDateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.lines[*].invoice.id",
              "description": "ar-payments.lines[*].invoice.id maps to Invoice.InvoiceID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.lines[*].bill.id",
              "description": "ap-payments.lines[*].bill.id maps to Invoice.InvoiceID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/paymentsPostResInvoiceLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "contactsPatchResSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPatchResSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "creditNotesPatchResAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "673dd7cc-beb7-4697-83d4-0c47cb400cc2"
        }
      },
      "title": "Invoice",
      "type": "object"
    },
    "paymentsPostResInvoiceContactBalancesAccountsPayable": {
      "properties": {
        "Outstanding": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Overdue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "purchaseOrdersGetByIdResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetByIdResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1488391422297+0000)/"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPatchReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPatchReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "contactsPatchResSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "transactionsPostResContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPostResContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "organisationsGetAllResPaymentTermsBills": {
      "properties": {
        "Day": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "OFCURRENTMONTH"
        }
      },
      "title": "Bills",
      "type": "object"
    },
    "creditNotesPatchReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "01-0123-0123456-00"
        },
        "ContactID": {
          "type": "string",
          "x-samplevalue": "eaa28f49-6028-4b6e-bb12-d8f6278073fc"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@gmail.com",
          "x-sub-format": "email"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "DAYSAFTERBILLMONTH"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "091"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com",
          "x-sub-format": "email"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "12-345-678"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "contactsPostResSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/contactsPostResSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "transactionsGetByIdResBankAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "BankAccount",
      "type": "object"
    },
    "invoicesGetByIdResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "e2f2f732-e92a-4f3a9c4d-ee4da0182a13"
        }
      },
      "type": "object"
    },
    "creditNotesPatchReqContactSalesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/creditNotesPatchReqContactSalesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "SalesTrackingCategories",
      "type": "object"
    },
    "salesQuotesPostReqContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "contact.email",
          "x-displayName": "Contact Id",
          "x-samplevalue": "92859ff2-ca7e-4267-9d8a-7efd237e8460"
        }
      },
      "type": "object"
    },
    "paymentsPostResInvoiceContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine2": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine3": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressLine4": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "City": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Country": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PostalCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Region": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResPayments": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].lines[*].amount",
              "description": "invoices.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].lines[*].amount",
              "description": "bills.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].id",
              "description": "invoices.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].id",
              "description": "bills.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "0d666415-cf77-43fa-80c7-56775591d426"
        }
      },
      "type": "object"
    },
    "invoicesPostResContactPhones": {
      "properties": {
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "bulkDownloadRequest": {
      "properties": {
        "apiLimit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "continueFromJobId": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "docsHubDetails": {
          "$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
        },
        "filterDateField": {
          "type": "string",
          "x-samplevalue": "lastModifiedDate"
        },
        "filterNulls": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "format": {
          "enum": [
            "application/json",
            "txt/csv",
            "application/jsonl"
          ],
          "type": "string",
          "x-samplevalue": "application/json"
        },
        "from": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-06T13:22:17-08:00"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 107
        },
        "notificationUrl": {
          "type": "string",
          "x-samplevalue": "https://myreceiver.com/whatever"
        },
        "objectName": {
          "type": "string",
          "x-samplevalue": "accounts"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "query": {
          "$ref": "#/definitions/bulkDownloadRequestQuery"
        },
        "selectFields": {
          "type": "string",
          "x-samplevalue": "a,b,c"
        },
        "to": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-10T13:22:17-08:00"
        },
        "where": {
          "type": "string",
          "x-samplevalue": "name='Alex' and gender='male'"
        }
      },
      "required": [
        "objectName",
        "format"
      ],
      "title": "bulkDownloadRequest",
      "type": "object"
    },
    "paymentsPostResInvoiceContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "employeesPatchResExternalLink": {
      "properties": {
        "Description": {
          "type": "string",
          "x-samplevalue": "Go to external link"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "employeesGetByIdRes": {
      "properties": {
        "EmployeeID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "6515d052-b3f7-4de4-b0a3-e4c12caba8b2"
        },
        "ExternalLink": {
          "$ref": "#/definitions/employeesGetByIdResExternalLink"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "firstName",
          "x-samplevalue": "Joey",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LastName": {
          "type": "string",
          "x-alias": "lastName",
          "x-samplevalue": "Bloggs",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Status": {
          "type": "string",
          "x-alias": "status",
          "x-samplevalue": "ACTIVE",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1519351730117+0000)/"
        }
      },
      "x-primary-key": [
        "EmployeeID"
      ],
      "type": "object"
    },
    "purchaseOrdersPatchReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "transactionsPostReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPostReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "invoicesPatchResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Activity/Workstream"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Onsite consultancy"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "e2f2f732-e92a-4f3a9c4d-ee4da0182a13"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResCreditNotesAllocations": {
      "properties": {
        "Amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1481846400000+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetAllResCreditNotesAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "invoicesPatchResPrepaymentsAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "87cfa39f-136c-4df9-a70d-bb80d8ddb975"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "INV-0001"
        }
      },
      "type": "object"
    },
    "invoicesGetByIdResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "200"
        },
        "Description": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].description",
              "description": "invoices.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].description",
              "description": "bills.lines[*].description maps to LineItems.[*].Description when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Onsite project management "
        },
        "LineAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].totalAmount",
              "description": "invoices.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].totalAmount",
              "description": "bills.lines[*].totalAmount maps to LineItems.[*].LineAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "LineItemID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.id",
              "description": "invoices.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.id",
              "description": "bills.lines[*].product.id maps to LineItems.[*].LineItemID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "52208ff9-528a-4985-a9ad-b2b1d4210e38"
        },
        "Quantity": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].quantity",
              "description": "invoices.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].quantity",
              "description": "bills.lines[*].quantity maps to LineItems.[*].Quantity when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1.0000"
        },
        "TaxAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxAmount",
              "description": "invoices.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxAmount",
              "description": "bills.lines[*].taxAmount maps to LineItems.[*].TaxAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "TaxType": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].taxCode",
              "description": "invoices.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].taxCode",
              "description": "bills.lines[*].taxCode maps to LineItems.[*].TaxType when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OUTPUT"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/invoicesGetByIdResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.lines[*].product.price",
              "description": "invoices.lines[*].product.price maps to LineItems.[*].UnitAmount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.lines[*].product.cost",
              "description": "bills.lines[*].product.cost maps to LineItems.[*].UnitAmount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        }
      },
      "type": "object"
    },
    "contactsPatchResPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "employeesGetByIdResExternalLink": {
      "properties": {
        "Description": {
          "type": "string",
          "x-samplevalue": "Go to external link"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://twitter.com/#!/search/Joey+Bloggs"
        }
      },
      "type": "object"
    },
    "contactsPatchResContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "itemsPostRes": {
      "properties": {
        "Code": {
          "type": "string",
          "x-alias": "externalId",
          "x-samplevalue": "UnTrackedThing"
        },
        "Description": {
          "type": "string",
          "x-alias": "salesDescription",
          "x-samplevalue": "I sell this untracked thing"
        },
        "IsPurchased": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSold": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsTrackedAsInventory": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "ItemID": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "19b79d12-0ae1-496e-9649-cbd04b15c7c5"
        },
        "Name": {
          "type": "string",
          "x-alias": "name",
          "x-samplevalue": "An Untracked Item"
        },
        "PurchaseDescription": {
          "type": "string",
          "x-alias": "purchaseDescription",
          "x-samplevalue": "I buy this untracked thing"
        },
        "PurchaseDetails": {
          "$ref": "#/definitions/itemsPostResPurchaseDetails"
        },
        "SalesDetails": {
          "$ref": "#/definitions/itemsPostResSalesDetails"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": "modifiedDate",
          "x-samplevalue": "/Date(1488338552390+0000)/"
        }
      },
      "x-primary-key": [
        "ItemID"
      ],
      "type": "object"
    },
    "creditNotesGetByIdResAllocationsInvoice": {
      "properties": {
        "InvoiceID": {
          "type": "string",
          "x-samplevalue": "673dd7cc-beb7-4697-83d4-0c47cb400cc2"
        }
      },
      "title": "Invoice",
      "type": "object"
    },
    "contactsPostResContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "creditNotesPatchResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "North"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "093af706-c2aa-4d97-a4ce-2d205a017eac"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "3f05cdf9-246b-46a2-bf6f-441da1b09b89"
        }
      },
      "title": "Tracking",
      "type": "object"
    },
    "purchaseOrdersPostReqContactContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "invoicesPostReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResAccount": {
      "properties": {
        "AccountID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.bankAccount",
              "description": "ar-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.bankAccount",
              "description": "ap-payments.bankAccount maps to Account.AccountID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "Code": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "800"
        },
        "PhoneNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "vendor.contact.phone",
              "path": "Contact.Phones[*].PhoneNumber | [0]"
            }
          ],
          "x-samplevalue": "124578"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DEFAULT"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoice": {
      "properties": {
        "AmountDue": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "AmountPaid": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Contact": {
          "$ref": "#/definitions/paymentsGetAllResInvoiceContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DueDate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "DueDateString": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "HasErrors": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "ar-payments.lines[*].invoice.id",
              "description": "ar-payments.lines[*].invoice.id maps to Invoice.InvoiceID when value of field PaymentType is ACCRECPAYMENT"
            },
            {
              "alias": "ap-payments.lines[*].bill.id",
              "description": "ap-payments.lines[*].bill.id maps to Invoice.InvoiceID when value of field PaymentType is ACCPAYPAYMENT"
            }
          ],
          "x-samplevalue": "string"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsDiscounted": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/paymentsGetAllResInvoiceLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SentToContact": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/creditNotesPostReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "invoicesPostResPayments": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].lines[*].amount",
              "description": "invoices.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].lines[*].amount",
              "description": "bills.payment[*].lines[*].amount maps to Payments.[*].Amount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "PaymentID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.payment[*].id",
              "description": "invoices.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.payment[*].id",
              "description": "bills.payment[*].id maps to Payments.[*].PaymentID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "0d666415-cf77-43fa-80c7-56775591d426"
        }
      },
      "type": "object"
    },
    "creditNotesPostReqContactPhones": {
      "properties": {
        "PhoneAreaCode": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "PhoneCountryCode": {
          "type": "string",
          "x-samplevalue": "12334"
        },
        "PhoneNumber": {
          "type": "string",
          "x-samplevalue": "1234567890"
        },
        "PhoneType": {
          "type": "string",
          "x-samplevalue": "DDI"
        }
      },
      "title": "Phones",
      "type": "object"
    },
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "transactionsPostResContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "purchaseOrdersPostResLineItemsTracking": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Option": {
          "type": "string",
          "x-samplevalue": "Eastside"
        }
      },
      "type": "object"
    },
    "contactsPostReqContactPersons": {
      "properties": {
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to ContactPersons[*].EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to ContactPersons[*].EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "john.smith@24locks.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to ContactPersons[*].FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to ContactPersons[*].FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "John"
        },
        "IncludeInEmails": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to ContactPersons[*].LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to ContactPersons[*].LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Smith"
        }
      },
      "type": "object"
    },
    "transactionsPutRes": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsPutResBankAccount"
        },
        "BankTransactionID": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsPutResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "CurrencyRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2020-04-23T08:35:05.603Z"
        },
        "ExternalLinkProviderName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsPutResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "transactionsPutRes",
      "type": "object"
    },
    "transactionsPutResContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/transactionsPutResContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "PurchasesTrackingCategories",
      "type": "object"
    },
    "salesQuotesPatchReq": {
      "properties": {
        "Contact": {
          "$ref": "#/definitions/salesQuotesPatchReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": "currency",
          "x-displayName": "Currency Code",
          "x-samplevalue": "USD"
        },
        "Date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1614384000000"
        },
        "ExpiryDate": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Expiry Date",
          "x-mask": "milliseconds",
          "x-samplevalue": "1615766400000"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-alias": "discountAmount",
          "x-displayName": "Line Amount Types",
          "x-samplevalue": "EXCLUSIVE"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchReqLineItems"
          },
          "type": "array"
        },
        "QuoteNumber": {
          "type": "string",
          "x-alias": "bankAccountNumber",
          "x-displayName": "Quote Number",
          "x-samplevalue": "QU-1068"
        },
        "Reference": {
          "type": "string",
          "x-displayName": "Reference",
          "x-samplevalue": "REF-90092"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT"
        },
        "SubTotal": {
          "format": "double",
          "type": "number",
          "x-displayName": "Subtotal",
          "x-samplevalue": 12.5
        },
        "Summary": {
          "type": "string",
          "x-displayName": "Summary",
          "x-samplevalue": "Sale of book"
        },
        "Terms": {
          "type": "string",
          "x-displayName": "Terms",
          "x-samplevalue": "Quote is valid for 30 business days"
        },
        "Title": {
          "type": "string",
          "x-alias": "contact.title",
          "x-displayName": "Title",
          "x-samplevalue": "Quote for product sale"
        },
        "Total": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total",
          "x-samplevalue": 12.5
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-alias": "totalAmountDue",
          "x-displayName": "Total Tax",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "transactionsGetAllResObject": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsGetAllResBankAccount"
        },
        "BankTransactionID": {
          "type": "string",
          "x-samplevalue": "7601e376-8cbe-4342-a52c-bbcb74ecc33f"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsGetAllResContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "USD",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "LIKE"
          ]
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "1587513600000+0000"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2020-04-22T00:00:00",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "ExternalLinkProviderName": {
          "type": "string",
          "x-samplevalue": "Claude Dev",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": false,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "NoTax",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsGetAllResLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "Ref",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "AUTHORISED",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "SubTotal": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "Total": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1,
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!="
          ]
        },
        "TotalTax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "SPEND",
          "x-searchable": true,
          "x-searchable-operators": [
            "=",
            "!=",
            "LIKE"
          ]
        },
        "UpdatedDateUTC": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2020-04-22T07:40:54.373Z"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com/",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "title": "transactionsGetAllRes",
      "type": "object",
      "x-primary-key": [
        "BankTransactionID"
      ]
    },
    "transactionsPutReq": {
      "properties": {
        "BankAccount": {
          "$ref": "#/definitions/transactionsPutReqBankAccount"
        },
        "Contact": {
          "$ref": "#/definitions/transactionsPutReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-samplevalue": "USD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "0.7500"
        },
        "Date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2020-04-22"
        },
        "IsReconciled": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LineAmountTypes": {
          "enum": [
            "Exclusive",
            "Inclusive",
            "NoTax"
          ],
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqLineItems"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-description": "Only supported for SPEND and RECEIVE transactions."
        },
        "Status": {
          "enum": [
            "AUTHORISED",
            "DELETED"
          ],
          "type": "string",
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "enum": [
            "RECEIVE",
            "RECEIVE-OVERPAYMENT",
            "RECEIVE-PREPAYMENT",
            "SPEND",
            "SPEND-OVERPAYMENT",
            "SPEND-PREPAYMENT",
            "RECEIVE-TRANSFER",
            "SPEND-TRANSFER"
          ],
          "type": "string",
          "x-samplevalue": "RECEIVE"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "title": "transactionsPutReq",
      "type": "object"
    },
    "salesQuotesPatchRes": {
      "properties": {
        "DateTimeUTC": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate",
          "x-displayName": "Date Time Utc",
          "x-mask": "milliseconds",
          "x-samplevalue": "1613070396406"
        },
        "Id": {
          "type": "string",
          "x-alias": "id",
          "x-displayName": "Id",
          "x-samplevalue": "b6eb0c61-31be-45a7-b50d-77815171ff80"
        },
        "ProviderName": {
          "type": "string",
          "x-alias": "name",
          "x-displayName": "Provider Name",
          "x-samplevalue": "CEDev2"
        },
        "Quotes": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchResQuotes"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-displayName": "Status",
          "x-samplevalue": "SENT"
        },
        "SummarizeErrors": {
          "type": "boolean",
          "x-displayName": "Summarizeerrors",
          "x-samplevalue": true
        }
      },
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "purchaseOrdersGetAllResContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-alias": "vendor.id",
          "x-samplevalue": "bde095a6-1c01-4e1d-b6f4-9190cfe89a9c"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "NZD"
        },
        "FirstName": {
          "type": "string",
          "x-alias": "vendor.contact.firstName",
          "x-samplevalue": "Trish"
        },
        "LastName": {
          "type": "string",
          "x-alias": "vendor.contact.lastName",
          "x-samplevalue": "Rawlings"
        },
        "Name": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "ABC Furniture"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersGetAllResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1488391422297+0000)/"
        }
      },
      "type": "object"
    },
    "invoicesPostReq": {
      "properties": {
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPostReqContact"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesPostReqLineItems"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "required": [
        "Type",
        "LineItems",
        "Contact"
      ],
      "type": "object"
    },
    "invoicesPostRes": {
      "properties": {
        "AmountCredited": {
          "type": "string",
          "x-samplevalue": "0.00"
        },
        "AmountDue": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountDue",
              "description": "invoices.totalAmountDue maps to AmountDue when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountDue",
              "description": "bills.totalAmountDue maps to AmountDue when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1025.00"
        },
        "AmountPaid": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.totalAmountPaid",
              "description": "invoices.totalAmountPaid maps to AmountPaid when value of field Type is ACCREC"
            },
            {
              "alias": "bills.totalAmountPaid",
              "description": "bills.totalAmountPaid maps to AmountPaid when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1000.00"
        },
        "BrandingThemeID": {
          "type": "string",
          "x-samplevalue": "3b148ee0-adfa-442c-a98b-9059a73e8ef5"
        },
        "Contact": {
          "$ref": "#/definitions/invoicesPostResContact"
        },
        "CreditNotes": {
          "items": {
            "$ref": "#/definitions/invoicesPostResCreditNotes"
          },
          "type": "array"
        },
        "CurrencyCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.currency",
              "description": "invoices.currency maps to CurrencyCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.currency",
              "description": "bills.currency maps to CurrencyCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "CurrencyRate": {
          "type": "string",
          "x-samplevalue": "1.000000"
        },
        "Date": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.invoiceDate",
              "description": "invoices.invoiceDate maps to Date when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billDate",
              "description": "bills.billDate maps to Date when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-05-27T00:00:00"
        },
        "DueDate": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.dueDate",
              "description": "invoices.dueDate maps to DueDate when value of field Type is ACCREC"
            },
            {
              "alias": "bills.dueDate",
              "description": "bills.dueDate maps to DueDate when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "DueDateString": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-06-06T00:00:00"
        },
        "ExpectedPaymentDate": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss",
          "x-samplevalue": "2009-10-20T00:00:00"
        },
        "FullyPaidOnDate": {
          "type": "string",
          "x-samplevalue": "FullyPaidOnDate"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "InvoiceID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.id",
              "description": "invoices.id maps to InvoiceID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.id",
              "description": "bills.id maps to InvoiceID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "243216c5-369e-4056-ac67-05388f86dc81"
        },
        "InvoiceNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.externalId",
              "description": "invoices.externalId maps to InvoiceNumber when value of field Type is ACCREC"
            },
            {
              "alias": "bills.externalId",
              "description": "bills.externalId maps to InvoiceNumber when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "OIT00546"
        },
        "LineAmountTypes": {
          "type": "string",
          "x-samplevalue": "Exclusive"
        },
        "LineItems": {
          "items": {
            "$ref": "#/definitions/invoicesPostResLineItems"
          },
          "type": "array"
        },
        "Overpayments": {
          "items": {
            "$ref": "#/definitions/invoicesPostResOverpayments"
          },
          "type": "array"
        },
        "Payments": {
          "items": {
            "$ref": "#/definitions/invoicesPostResPayments"
          },
          "type": "array"
        },
        "PlannedPaymentDate": {
          "type": "string",
          "x-samplevalue": "PlannedPaymentDate"
        },
        "Prepayments": {
          "items": {
            "$ref": "#/definitions/invoicesPostResPrepayments"
          },
          "type": "array"
        },
        "Reference": {
          "type": "string",
          "x-samplevalue": "RPT-DD"
        },
        "SentToContact": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "Status": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.status",
              "description": "invoices.status maps to Status when value of field Type is ACCREC"
            },
            {
              "alias": "bills.status",
              "description": "bills.status maps to Status when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "AUTHORISED"
        },
        "SubTotal": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.subTotal",
              "description": "invoices.subTotal maps to SubTotal when value of field Type is ACCREC"
            },
            {
              "alias": "bills.subTotal",
              "description": "bills.subTotal maps to SubTotal when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "1800.00"
        },
        "Total": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.amount",
              "description": "invoices.amount maps to Total when value of field Type is ACCREC"
            },
            {
              "alias": "bills.amount",
              "description": "bills.amount maps to Total when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "2025.00"
        },
        "TotalDiscount": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.discountAmount",
              "description": "invoices.discountAmount maps to TotalDiscount when value of field Type is ACCREC"
            },
            {
              "alias": "bills.discountAmount",
              "description": "bills.discountAmount maps to TotalDiscount when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "TotalDiscount"
        },
        "TotalTax": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.taxAmount",
              "description": "invoices.taxAmount maps to TotalTax when value of field Type is ACCREC"
            },
            {
              "alias": "bills.taxAmount",
              "description": "bills.taxAmount maps to TotalTax when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "225.00"
        },
        "Type": {
          "type": "string",
          "x-samplevalue": "ACCREC"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.modifiedDate",
              "description": "invoices.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCREC"
            },
            {
              "alias": "bills.modifiedDate",
              "description": "bills.modifiedDate maps to UpdatedDateUTC when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "/Date(1518685950940+0000)/"
        },
        "Url": {
          "type": "string",
          "x-samplevalue": "http://www.accounting20.com"
        }
      },
      "x-primary-key": [
        "InvoiceID"
      ],
      "type": "object"
    },
    "contactsPostRes": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsPostResAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844"
        },
        "BrandingTheme": {
          "items": {
            "$ref": "#/definitions/contactsPostResBrandingTheme"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.id",
              "description": "customers.id maps to ContactID when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.id",
              "description": "vendors.id maps to ContactID when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "bd2270c3-8706-4c11-9cfb-000b551c3f51"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsPostResContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "Discount": {
          "type": "string",
          "x-samplevalue": "Discount"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "HasAttachments": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.paymentTerms.name",
              "description": "customers.paymentTerms.name maps to PaymentTerms when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.paymentTerms.name",
              "description": "vendors.paymentTerms.name maps to PaymentTerms when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLDATE"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsPostResPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPostResPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPostResSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "TrackingCategoryName"
        },
        "TrackingOptionName": {
          "type": "string",
          "x-samplevalue": "TrackingOptionName"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.modifiedDate",
              "description": "customers.modifiedDate maps to UpdatedDateUTC when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.modifiedDate",
              "description": "vendors.modifiedDate maps to UpdatedDateUTC when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "/Date(1488391422280+0000)/"
        },
        "Website": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.webSite",
              "description": "customers.webSite maps to Website when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.webSite",
              "description": "vendors.webSite maps to Website when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Website"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "x-primary-key": [
        "ContactID"
      ],
      "type": "object"
    },
    "invoicesGetAllResCreditNotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Test Apply Credit Note"
        }
      },
      "type": "object"
    },
    "purchaseOrdersPostResLineItems": {
      "properties": {
        "AccountCode": {
          "type": "string",
          "x-samplevalue": "300"
        },
        "Description": {
          "type": "string",
          "x-alias": "lines[*].description",
          "x-samplevalue": "Coffee table for reception"
        },
        "DiscountRate": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "lines[*].product.id",
          "x-samplevalue": "GB1-White"
        },
        "LineAmount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1000
        },
        "LineItemID": {
          "type": "string",
          "x-samplevalue": "1aa3bf00-a5fe-420f-b4b3-d64349a13108"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].orderedQuantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].taxAmount",
          "x-samplevalue": 150
        },
        "TaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Tracking": {
          "items": {
            "$ref": "#/definitions/purchaseOrdersPostResLineItemsTracking"
          },
          "type": "array"
        },
        "UnitAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "lines[*].product.cost",
          "x-samplevalue": 1000
        }
      },
      "type": "object"
    },
    "contactsPostReq": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.account",
              "description": "customers.account maps to AccountNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.account",
              "description": "vendors.account maps to AccountNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "LOC-200"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "OUTPUT2"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "INPUT2"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/contactsPostReqAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "45465844"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "ID001"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/contactsPostReqContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.active",
              "description": "customers.active maps to ContactStatus when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.active",
              "description": "vendors.active maps to ContactStatus when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ACTIVE"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.currency",
              "description": "customers.currency maps to DefaultCurrency when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.currency",
              "description": "vendors.currency maps to DefaultCurrency when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "NZD"
        },
        "EmailAddress": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.email",
              "description": "customers.contact.email maps to EmailAddress when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.email",
              "description": "vendors.contact.email maps to EmailAddress when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "a.dutchess@abclimited.com"
        },
        "FirstName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.firstName",
              "description": "customers.contact.firstName maps to FirstName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.firstName",
              "description": "vendors.contact.firstName maps to FirstName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Andrea"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": false
        },
        "LastName": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.contact.lastName",
              "description": "customers.contact.lastName maps to LastName when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.contact.lastName",
              "description": "vendors.contact.lastName maps to LastName when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Dutchess"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.name",
              "description": "customers.name maps to Name when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.name",
              "description": "vendors.name maps to Name when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "ABC Limited"
        },
        "PaymentTerms": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.paymentTerms.name",
              "description": "customers.paymentTerms.name maps to PaymentTerms when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.paymentTerms.name",
              "description": "vendors.paymentTerms.name maps to PaymentTerms when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "DAYSAFTERBILLDATE"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/contactsPostReqPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPostReqPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/contactsPostReqSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "skype.dutchess@abclimited.com"
        },
        "TaxNumber": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.taxId",
              "description": "customers.taxId maps to TaxNumber when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.taxId",
              "description": "vendors.taxId maps to TaxNumber when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "415465456454"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "TrackingCategoryName"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "XeroNetworkKey"
        }
      },
      "required": [
        "Name"
      ],
      "type": "object"
    },
    "purchaseOrdersPostReqContactSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "bulkDownloadRequestDocsHubDetails": {
      "properties": {
        "instanceId": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "path": {
          "type": "string",
          "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
        }
      },
      "title": "docsHubDetails",
      "type": "object"
    },
    "invoicesGetAllResContact": {
      "properties": {
        "Addresses": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResContactAddresses"
          },
          "type": "array"
        },
        "ContactID": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.id",
              "description": "invoices.customer.id maps to ContactID when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.id",
              "description": "bills.vendor.id maps to ContactID when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "025867f1-d741-4d6b-b1af-9ac774b59ba7"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "IsCustomer": {
          "type": "string",
          "x-samplevalue": "true"
        },
        "IsSupplier": {
          "type": "string",
          "x-samplevalue": "false"
        },
        "Name": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.customer.name",
              "description": "invoices.customer.name maps to Name when value of field Type is ACCREC"
            },
            {
              "alias": "bills.vendor.name",
              "description": "bills.vendor.name maps to Name when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "City Agency"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/invoicesGetAllResContactPhones"
          },
          "type": "array"
        },
        "UpdatedDateUTC": {
          "type": "string",
          "x-samplevalue": "/Date(1518685950940+0000)/"
        }
      },
      "type": "object"
    },
    "invoicesPatchResCreditNotesContact": {
      "properties": {
        "ContactID": {
          "type": "string",
          "x-samplevalue": "c6c7b870-bb4d-489a-921e-2f0ee4192ff9"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "Test Apply Credit Note"
        }
      },
      "type": "object"
    },
    "invoicesPostReqContactAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.line1",
              "description": "invoices.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.line1",
              "description": "bills.billingAddress.line1 maps to Contact.Addresses[*].AddressLine1 when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "L4, CA House"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "STREET"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.city",
              "description": "invoices.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.city",
              "description": "bills.billingAddress.city maps to Contact.Addresses[*].City when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "invoices.billingAddress.postalCode",
              "description": "invoices.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCREC"
            },
            {
              "alias": "bills.billingAddress.postalCode",
              "description": "bills.billingAddress.postalCode maps to Contact.Addresses[*].PostalCode when value of field Type is ACCPAY"
            }
          ],
          "x-samplevalue": "6012"
        }
      },
      "type": "object"
    },
    "contactsPostResSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "invoicesPatchReqContactPurchasesTrackingCategories": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Region"
        },
        "Options": {
          "items": {
            "$ref": "#/definitions/invoicesPatchReqContactPurchasesTrackingCategoriesOptions"
          },
          "type": "array"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingCategoryID": {
          "type": "string",
          "x-samplevalue": "351953c4-8127-4009-88c3-f9cd8c9cbe9f"
        }
      },
      "type": "object"
    },
    "paymentsGetAllResInvoiceContactPaymentTermsBills": {
      "properties": {
        "Day": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Type": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "transactionsPutReqContact": {
      "properties": {
        "AccountNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsPayableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "AccountsReceivableTaxType": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Addresses": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactAddresses"
          },
          "type": "array"
        },
        "BankAccountDetails": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "ContactPersons": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactContactPersons"
          },
          "type": "array"
        },
        "ContactStatus": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "DefaultCurrency": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "EmailAddress": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "FirstName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "IsCustomer": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "IsSupplier": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "LastName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PaymentTerms": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Phones": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactPhones"
          },
          "type": "array"
        },
        "PurchasesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "PurchasesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactPurchasesTrackingCategories"
          },
          "type": "array"
        },
        "SalesDefaultAccountCode": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "SalesTrackingCategories": {
          "items": {
            "$ref": "#/definitions/transactionsPutReqContactSalesTrackingCategories"
          },
          "type": "array"
        },
        "SkypeUserName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TaxNumber": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryName": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingCategoryOption": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "XeroNetworkKey": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Contact",
      "type": "object"
    },
    "contactsGetByIdResSalesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "Eastside"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "ACTIVE"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "ce205173-7387-4651-9726-2cf4c5405ba2"
        }
      },
      "type": "object"
    },
    "invoicesGetAllResPrepaymentsAllocations": {
      "properties": {
        "Amount": {
          "type": "string",
          "x-samplevalue": "100.00"
        },
        "Date": {
          "type": "string",
          "x-samplevalue": "/Date(1222340661707+0000)/"
        },
        "Invoice": {
          "$ref": "#/definitions/invoicesGetAllResPrepaymentsAllocationsInvoice"
        }
      },
      "type": "object"
    },
    "contactsPostResAddresses": {
      "properties": {
        "AddressLine1": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.line1",
              "description": "customers.corporateAddress.line1 maps to Addresses.[*].AddressLine1 when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.line1",
              "description": "vendors.corporateAddress.line1 maps to Addresses.[*].AddressLine1  when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "P O Box 123"
        },
        "AddressType": {
          "type": "string",
          "x-samplevalue": "POBOX"
        },
        "AttentionTo": {
          "type": "string",
          "x-samplevalue": "Andrea"
        },
        "City": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.city",
              "description": "customers.corporateAddress.city maps to Addresses.[*].City when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.city",
              "description": "vendors.corporateAddress.city maps to Addresses.[*].City when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "Wellington"
        },
        "PostalCode": {
          "type": "string",
          "x-alias": [
            {
              "alias": "customers.corporateAddress.postalCode",
              "description": "customers.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsCustomer is true"
            },
            {
              "alias": "vendors.corporateAddress.postalCode",
              "description": "vendors.corporateAddress.postalCode maps to Addresses.[*].PostalCode when value of field IsSupplier is true"
            }
          ],
          "x-samplevalue": "6011"
        }
      },
      "type": "object"
    },
    "transactionsPutReqContactPurchasesTrackingCategoriesOptions": {
      "properties": {
        "Name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "Status": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "TrackingOptionID": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "Options",
      "type": "object"
    },
    "salesQuotesPatchResQuotesLineItems": {
      "properties": {
        "Description": {
          "type": "string",
          "x-alias": "description",
          "x-displayName": "Description",
          "x-samplevalue": "Jurassic Park Colouring Book"
        },
        "ItemCode": {
          "type": "string",
          "x-alias": "contact.address.postalCode",
          "x-displayName": "Item Code",
          "x-samplevalue": "G@N"
        },
        "LineAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Amount",
          "x-samplevalue": 12.5
        },
        "LineItemID": {
          "type": "string",
          "x-alias": "contact.address.line1",
          "x-displayName": "Line Item Id",
          "x-samplevalue": "0e0747a3-47c6-47e7-bd20-c841bd80e3af"
        },
        "Quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "contact.address.line1",
          "x-displayName": "Quantity",
          "x-samplevalue": 1
        },
        "TaxAmount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId",
          "x-displayName": "Tax Amount",
          "x-samplevalue": 0
        },
        "UnitAmount": {
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-displayName": "Unit Amount",
          "x-samplevalue": 12.5
        }
      },
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "Xero V2",
    "x-element-hub": "finance",
    "x-element-key": "xerov2",
    "title": "xerov2",
    "x-element-id": 21763,
    "version": "api-v2",
    "description": "Add a Xero Instance to connect your existing Xero account to the Finance Hub, allowing you to manage customers, vendors, employees, invoices, expenses, sales, etc. across multiple Finance Elements. You will need your Xero account information to add an instance."
  },
  "tags": [
    {
      "name": "Accounts"
    },
    {
      "name": "Bulk"
    },
    {
      "name": "Contacts"
    },
    {
      "name": "Credit Notes"
    },
    {
      "name": "Employees"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Items"
    },
    {
      "name": "Journals"
    },
    {
      "name": "Object Name"
    },
    {
      "name": "Objects"
    },
    {
      "name": "Organisations"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Ping"
    },
    {
      "name": "Purchase Orders"
    },
    {
      "name": "Sales Quotes"
    },
    {
      "name": "Tax Rates"
    },
    {
      "name": "Transactions"
    },
    {
      "name": "Users"
    }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Accounting software with all the time-saving tools you need to grow your business",
  "externalDocs": {
    "description": "SAP Open Connectors Documentation",
    "url": "https://help.openconnectors.ext.hana.ondemand.com/home/catalog"
  }
}