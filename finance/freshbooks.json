{
  "basePath": "/elements/api-v2",
  "paths": {
    "/bulk/download": {
      "post": {
        "summary": "Create a new bulk download job (asynchronous)",
        "operationId": "createBulkDownload",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/bulkDownloadRequest"
            },
            "in": "body",
            "name": "body",
            "description": "The object body",
            "required": true
          }
        ],
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/jobs": {
      "get": {
        "operationId": "getBulkJobs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkJobList"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Fetch all the bulk jobs for an instance",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/query": {
      "post": {
        "operationId": "createBulkQuery",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
            "in": "query",
            "name": "q",
            "required": false,
            "type": "string"
          },
          {
            "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "lastRunDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "string"
          },
          {
            "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
            "in": "query",
            "name": "to",
            "required": false,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkQuery"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/cancel": {
      "put": {
        "operationId": "replaceBulkCancel",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to cancel.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Cancel an asynchronous bulk query job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/errors": {
      "get": {
        "operationId": "getBulkErrors",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its errors.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The page size for pagination, which defaults to 200 if not supplied",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the errors of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/status": {
      "get": {
        "operationId": "getBulkStatus",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job to retrieve its status.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkStatus"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the status of a bulk job.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/bulk/{id}/{objectName}": {
      "get": {
        "operationId": "getBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the bulk job",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve the results of an asynchronous bulk query.",
        "tags": [
          "Bulk"
        ],
        "produces": [
          "text/csv",
          "application/json",
          "application/jsonl"
        ]
      }
    },
    "/bulk/{objectName}": {
      "post": {
        "operationId": "createBulkByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The Url to send the notification to when the Job is completed",
            "in": "header",
            "name": "Elements-Async-Callback-Url",
            "required": false,
            "type": "string"
          },
          {
            "description": "The name of the object for which data needs to be uploaded.",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" :&lt;path for the sub resource&gt;, \"format\": &lt;json/csv&gt;, \"callback-payload\":&lt;json&gt;}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification ",
            "in": "formData",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
            "in": "formData",
            "name": "file",
            "type": "file"
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/BulkUploadResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Upload a file of objects to be bulk uploaded to the provider.",
        "tags": [
          "Bulk"
        ]
      }
    },
    "/customers": {
      "post": {
        "summary": "Create a customer",
        "operationId": "createCustomer",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersPOST"
            },
            "in": "body",
            "name": "customers",
            "description": "The customer",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Search for customers",
        "operationId": "getCustomers",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customersListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. email, username, updated_from and updated_to are supported. Only 'AND' and '=' are available to construct queries and each field can only be used once. For example invoice_id = '45678' AND date_from = '2007-05-15'",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/customers/{customerId}": {
      "patch": {
        "summary": "Update a customer",
        "operationId": "updateCustomerByCustomerId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customers"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "The customer ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/customersPATCH"
            },
            "in": "body",
            "name": "customers",
            "description": "The customer",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "summary": "Retrieve a customer",
        "operationId": "getCustomerByCustomerId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/customerbyid"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "The customer ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "summary": "Delete a customer",
        "operationId": "deleteCustomerByCustomerId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "customerId",
            "description": "The customer ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/expenses": {
      "post": {
        "operationId": "createExpense",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/expensesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/expensesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The customer",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ],
        "summary": "Create an expense"
      },
      "get": {
        "summary": "Search for expenses",
        "operationId": "getExpenses",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/expensesGetAllRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.vendor,category_id are supported. For example vendor = 'Vandelay'",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Expenses"
        ]
      }
    },
    "/expenses/{id}": {
      "patch": {
        "summary": "Update an expense",
        "operationId": "updateExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/expensesPatchRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expensesId",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/expensesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The expense request body",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ]
      },
      "get": {
        "operationId": "getExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/expensesGetByIDRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expenses id",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ],
        "summary": "Retrieve an expense"
      },
      "delete": {
        "operationId": "deleteExpenseById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The expenses ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Expenses"
        ],
        "summary": "Delete an expense"
      }
    },
    "/hooks": {
      "get": {
        "summary": "Get a list of all hooks ",
        "operationId": "getHooks",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hooksListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Hooks"
        ]
      }
    },
    "/hooks/{id}": {
      "delete": {
        "summary": "Delete a hook",
        "operationId": "deleteHookById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The hook callback ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Hooks"
        ]
      }
    },
    "/invoices": {
      "post": {
        "summary": "Create an invoice",
        "operationId": "createInvoice",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPOST"
            },
            "in": "body",
            "name": "invoices",
            "description": "The invoice",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Search for invoices",
        "operationId": "getInvoices",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/invoicesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. client_id, recurring_id, status, number, date_from, date_to, updated_from and updated_to are supported. Only 'AND' and '=' are available to construct queries and each field can only be used once. For example status = 'draft' AND date_from = '2007-05-15'",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{invoiceId}": {
      "patch": {
        "summary": "Update an invoice",
        "operationId": "updateInvoiceByInvoiceId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoices"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "invoiceId",
            "description": "The invoice ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/invoicesPATCH"
            },
            "in": "body",
            "name": "invoices",
            "description": "The invoice",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "summary": "Retrieve an invoice",
        "operationId": "getInvoiceByInvoiceId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/invoicesById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "invoiceId",
            "description": "The invoice ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      },
      "delete": {
        "summary": "Delete an invoice",
        "operationId": "deleteInvoiceByInvoiceId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "invoiceId",
            "description": "The invoice ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/items": {
      "post": {
        "summary": "Create an item ",
        "operationId": "createItem",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsPostResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPost"
            },
            "in": "body",
            "name": "body",
            "description": "The items object",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Search for items",
        "operationId": "getItems",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/itemsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression,Folder is the searchable field. For example folder= 'active'.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/items/{id}": {
      "patch": {
        "summary": "Update an item ",
        "operationId": "updateItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsPatchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The items ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/itemsPatch"
            },
            "in": "body",
            "name": "body",
            "description": "The items object",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "get": {
        "summary": "Retrieve an item ",
        "operationId": "getItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/itemsById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The items ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      },
      "delete": {
        "summary": "Delete an item ",
        "operationId": "deleteItemById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The items ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Items"
        ]
      }
    },
    "/objects": {
      "get": {
        "operationId": "getObjects",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the available objects.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/docs": {
      "get": {
        "operationId": "getObjectsObjectNameDocs",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Include discovery metadata in definitions",
            "in": "query",
            "name": "discovery",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Optionally resolve swagger references for an inline object definition",
            "in": "query",
            "name": "resolveReferences",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Include only OpenAPI / Swagger properties in definitions",
            "in": "query",
            "name": "basic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
            "in": "query",
            "name": "version",
            "required": false,
            "default": "-1",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/swaggerDocs"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get swagger docs for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/objects/{objectName}/metadata": {
      "get": {
        "operationId": "getObjectsObjectNameMetadata",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
            "in": "header",
            "name": "Elements-Version",
            "required": false,
            "type": "string",
            "enum": [
              "Hydrogen",
              "Helium"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/objectsMetadata"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Get a list of all the field for an object.",
        "tags": [
          "Objects"
        ]
      }
    },
    "/payments": {
      "post": {
        "summary": "Create a payment",
        "operationId": "createPayment",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsPostResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentsPOST"
            },
            "in": "body",
            "name": "payments",
            "description": "The payment",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Search for payments",
        "operationId": "getPayments",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/paymentsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. client_id, invoice_id, date_from, date_to, updated_from and updated_to are supported. Only 'AND' and '=' are available to construct queries and each field can only be used once. For example invoice_id = '45678' AND date_from = '2007-05-15'",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{paymentId}": {
      "patch": {
        "summary": "Update a payment",
        "operationId": "updatePaymentByPaymentId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsPatchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The payment ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/paymentsPATCH"
            },
            "in": "body",
            "name": "payments",
            "description": "The payment",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "get": {
        "summary": "Retrieve a payment",
        "operationId": "getPaymentByPaymentId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/paymentsById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The payment ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      },
      "delete": {
        "summary": "Delete a payment",
        "operationId": "deletePaymentByPaymentId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The payment ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Payments"
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Pong"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
        "tags": [
          "Ping"
        ]
      }
    },
    "/receipts/{id}": {
      "get": {
        "operationId": "getReceiptById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The receipts ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Receipts"
        ],
        "summary": "Retrieve a receipt"
      }
    },
    "/sales-quotes": {
      "post": {
        "summary": "Create a salesQuote",
        "operationId": "createSalesQuote",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPostRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPostReq"
            },
            "in": "body",
            "name": "salesQuote",
            "description": "The salesQuote request body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ]
      },
      "get": {
        "summary": "Search for salesQuotes",
        "operationId": "getSalesQuotes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/salesQuotesGetAllResObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. For example to retrieve results created after a given date use <i>date_from='2021-02-24'</i>.",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Sales Quotes"
        ]
      }
    },
    "/sales-quotes/{id}": {
      "patch": {
        "summary": "Update a salesQuote",
        "operationId": "updateSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuoteId",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/salesQuotesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The salesQuote request body",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ]
      },
      "get": {
        "summary": "Retrieve a salesQuote",
        "operationId": "getSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/salesQuotesGetByIdRes"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuoteId",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ]
      },
      "delete": {
        "summary": "Delete a salesQuote",
        "operationId": "deleteSalesQuoteById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The salesQuoteId",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Sales Quotes"
        ]
      }
    },
    "/taxes": {
      "post": {
        "summary": "Create a tax ",
        "operationId": "createTaxe",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxesPostResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxesPost"
            },
            "in": "body",
            "name": "body",
            "description": "The taxes object body",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "get": {
        "summary": "Search for taxes  ",
        "operationId": "getTaxes",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/taxesListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression. The only supported field to filter is compound, i.e. <i> compound=1 </i>",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The number of resources to return in a given page",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/taxes/{id}": {
      "patch": {
        "summary": "Update a tax ",
        "operationId": "updateTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxesPatchResponse"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The taxes ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/taxesPatch"
            },
            "in": "body",
            "name": "body",
            "description": "The taxes object",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "get": {
        "summary": "Retrieve a tax ",
        "operationId": "getTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/taxesGetById"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The taxes ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "delete": {
        "summary": "Delete a tax ",
        "operationId": "deleteTaxeById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The taxes ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/time-entries": {
      "post": {
        "operationId": "createTimeEntry",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeEntries"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeEntriesPostReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time-entries object body",
            "required": true
          }
        ],
        "tags": [
          "Time Entries"
        ],
        "summary": "Create a time entry"
      },
      "get": {
        "operationId": "getTimeEntries",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/timeEntriesObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "where",
            "description": "The CEQL search expression.The supported field to filter is project_id, i.e. project_id=1",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Time Entries"
        ],
        "summary": "Search for time entries"
      }
    },
    "/time-entries/{id}": {
      "patch": {
        "operationId": "updateTimeEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeEntries"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The time-entries ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/timeEntriesPatchReq"
            },
            "in": "body",
            "name": "body",
            "description": "The time-entries object",
            "required": true
          }
        ],
        "tags": [
          "Time Entries"
        ],
        "summary": "Update a time entry"
      },
      "get": {
        "operationId": "getTimeEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/timeEntries"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The time-entries ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Time Entries"
        ],
        "summary": "Retrieve a time entry"
      },
      "delete": {
        "operationId": "deleteTimeEntryById",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "id",
            "description": "The vendor ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Time Entries"
        ],
        "summary": "Delete a time entry"
      }
    },
    "/vendors": {
      "post": {
        "summary": "Create a vendor",
        "operationId": "createVendor",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendors"
            },
            "in": "body",
            "name": "vendors",
            "description": "The vendor",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Search for vendors",
        "operationId": "getVendors",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vendorsListObject"
              }
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "pageSize",
            "format": "int64",
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000",
            "type": "string",
            "required": false
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/vendors/{vendorId}": {
      "patch": {
        "summary": "Update a vendor",
        "operationId": "updateVendorByVendorId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "vendorId",
            "description": "The vendor ID",
            "type": "string",
            "required": true
          },
          {
            "schema": {
              "$ref": "#/definitions/vendors"
            },
            "in": "body",
            "name": "vendors",
            "description": "The vendor",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "get": {
        "summary": "Retrieve a vendor",
        "operationId": "getVendorByVendorId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/vendors"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "vendorId",
            "description": "The vendor ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      },
      "delete": {
        "summary": "Delete a vendor",
        "operationId": "deleteVendorByVendorId",
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "type": "string",
            "required": true
          },
          {
            "in": "path",
            "name": "vendorId",
            "description": "The vendor ID",
            "type": "string",
            "required": true
          }
        ],
        "tags": [
          "Vendors"
        ]
      }
    },
    "/{objectName}": {
      "get": {
        "operationId": "getByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createByObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}": {
      "delete": {
        "operationId": "deleteObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json",
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the 'Accept' header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}": {
      "get": {
        "operationId": "getObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The CEQL search expression.",
            "in": "query",
            "name": "where",
            "required": false,
            "type": "string"
          },
          {
            "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
            "format": "int64",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "type": "integer"
          },
          {
            "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
            "in": "query",
            "name": "nextPage",
            "required": false,
            "type": "string"
          },
          {
            "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "items": {
                "$ref": "#/definitions/Object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Search for {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "post": {
        "operationId": "createObjectNameByChildObjectName",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Create an {objectName}",
        "tags": [
          "Object Name"
        ]
      }
    },
    "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
      "delete": {
        "operationId": "deleteObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected"
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Delete an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "get": {
        "operationId": "getObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Retrieve an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "patch": {
        "operationId": "updateObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      },
      "put": {
        "operationId": "replaceObjectNameByChildObjectId",
        "parameters": [
          {
            "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the object",
            "in": "path",
            "name": "objectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the childObjectName",
            "in": "path",
            "name": "childObjectName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName} ID",
            "in": "path",
            "name": "objectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {childObjectName} ID",
            "in": "path",
            "name": "childObjectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "The {objectName}",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Everything worked as expected",
            "schema": {
              "$ref": "#/definitions/Object"
            }
          },
          "400": {
            "description": "Bad Request - Often due to a missing request parameter"
          },
          "401": {
            "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
          },
          "403": {
            "description": "Forbidden - Access to the resource by the provider is forbidden"
          },
          "404": {
            "description": "Not found - The requested resource is not found"
          },
          "405": {
            "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
          },
          "406": {
            "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
          },
          "409": {
            "description": "Conflict - If a resource being created already exists"
          },
          "415": {
            "description": "Unsupported media type - The server cannot handle the requested Content-Type"
          },
          "500": {
            "description": "Server error - Something went wrong on the Cloud Elements server"
          },
          "502": {
            "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
          }
        },
        "summary": "Update an {childObjectName}",
        "tags": [
          "Object Name"
        ]
      }
    }
  },
  "host": "hostname",
  "schemes": [
    "https"
  ],
  "definitions": {
    "invoicesListContactsContact": {
      "properties": {
        "contact_id": {
          "description": "Primary Contact has contact_id: 0",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "invoicesListLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/invoicesListLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "salesQuotesGetAllResLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesGetAllResLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesById": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "description": "Total invoice amount, taxes inc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "amount_outstanding": {
          "description": "Outstanding amount on invoice from partial payment, etc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue"
        },
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "description": "Client being invoiced",
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id"
        },
        "contacts": {
          "$ref": "#/definitions/invoicesByIdContacts"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "date": {
          "description": "If not supplied, defaults to today's date (Optional)",
          "format": "date-time",
          "type": "string",
          "x-alias": "date"
        },
        "discount": {
          "description": "Percent discount (Optional)",
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount"
        },
        "first_name": {
          "type": "string",
          "x-alias": "customer.contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string"
        },
        "gateways": {
          "$ref": "#/definitions/invoicesByIdGateways"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "id"
        },
        "language": {
          "description": "Language code, defaults to the client's language; see language.list for codes (Optional)",
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "customer.contact.lastName"
        },
        "lines": {
          "$ref": "#/definitions/invoicesByIdLines"
        },
        "links": {
          "$ref": "#/definitions/invoicesByIdLinks"
        },
        "notes": {
          "description": "Notes (Optional)",
          "type": "string",
          "x-alias": "description"
        },
        "number": {
          "description": "Number, as it appears on the invoice (Optional)",
          "type": "string",
          "x-alias": "externalId"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "paid": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountPaid"
        },
        "po_number": {
          "description": "Purchase order number (Optional)",
          "format": "int32",
          "type": "integer",
          "x-alias": "parentDocumentNumber"
        },
        "recurring_id": {
          "format": "int32",
          "type": "integer"
        },
        "return_uri": {
          "description": "Return URI (Optional)",
          "type": "string"
        },
        "staff_id": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "One of sent, viewed or draft [default]",
          "enum": [
            "sent",
            "viewed",
            "draft",
            "disputed",
            "paid",
            "auto-paid",
            "retry",
            "failed"
          ],
          "type": "string",
          "x-alias": "status"
        },
        "terms": {
          "description": "Terms (Optional)",
          "type": "string",
          "x-alias": "paymentTerms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        },
        "url": {
          "type": "string"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "description": "'VAT Number' (Optional)",
          "format": "int32",
          "type": "integer"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "invoice_id"
      ],
      "x-vendor-objectname": "INVOICE",
      "type": "object"
    },
    "expensesPostReq": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 100
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3051239
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-09 00:00:00"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-samplevalue": "Software package."
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "tax1_amount": {
          "type": "string",
          "x-alias": "taxAmount",
          "x-samplevalue": "10"
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "tax1_percent": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "tax2_amount": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "tax2_percent": {
          "type": "string",
          "x-samplevalue": "10"
        },
        "vendor": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Acme"
        }
      },
      "required": [
        "amount",
        "category_id",
        "staff_id"
      ],
      "type": "object"
    },
    "salesQuotesPostResContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesPostResContactsContact"
        }
      },
      "type": "object"
    },
    "expensesPostRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 100
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3051239
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-09 00:00:00"
        },
        "expense_id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "00001353330"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "has_receipt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-16 17:40:55"
        }
      },
      "type": "object"
    },
    "swaggerdefinitions": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definitions",
      "properties": {
        "definition-name": {
          "$ref": "#/definitions/swaggerdefinition-name"
        }
      }
    },
    "invoicesListGateways": {
      "properties": {
        "gateway": {
          "items": {
            "$ref": "#/definitions/invoicesListGatewaysGateway"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesByIdLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/invoicesByIdLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-name": {
      "x-has-customfields": false,
      "type": "object",
      "title": "definition-name",
      "properties": {
        "properties": {
          "$ref": "#/definitions/swaggerproperties"
        }
      }
    },
    "invoicesListContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/invoicesListContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResLinks": {
      "properties": {
        "client_view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        }
      },
      "type": "object"
    },
    "invoicesPOSTContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/invoicesPOSTContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "itemsListObject": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "active",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "item_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "tax1_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId"
        },
        "tax2_id": {
          "format": "int32",
          "type": "integer"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "item_id"
      ],
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "invoicesPATCH": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "client_id": {
          "description": "Client being invoiced",
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "contacts": {
          "$ref": "#/definitions/invoicesPATCHContacts"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "date": {
          "description": "If not supplied, defaults to today's date (Optional)",
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "discount": {
          "description": "Percent discount (Optional)",
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "customer.contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "gateways": {
          "$ref": "#/definitions/invoicesPATCHGateways"
        },
        "language": {
          "description": "Language code, defaults to the client's language; see language.list for codes (Optional)",
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "customer.contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "lines": {
          "$ref": "#/definitions/invoicesPATCHLines"
        },
        "notes": {
          "description": "Notes (Optional)",
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "number": {
          "description": "Number, as it appears on the invoice (Optional)",
          "type": "string",
          "x-alias": "externalId",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "paid": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountPaid",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "po_number": {
          "description": "Purchase order number (Optional)",
          "format": "int32",
          "type": "integer",
          "x-alias": "parentDocumentNumber",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "return_uri": {
          "description": "Return URI (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "status": {
          "description": "One of sent, viewed or draft [default]",
          "enum": [
            "sent",
            "viewed",
            "draft",
            "disputed",
            "paid",
            "auto-paid",
            "retry",
            "failed"
          ],
          "type": "string",
          "x-alias": "status",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "terms": {
          "description": "Terms (Optional)",
          "type": "string",
          "x-alias": "paymentTerms",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "url": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_number": {
          "description": "'VAT Number' (Optional)",
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "INVOICE",
      "type": "object"
    },
    "invoices": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "description": "Total invoice amount, taxes inc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "amount_outstanding": {
          "description": "Outstanding amount on invoice from partial payment, etc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue"
        },
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "description": "Client being invoiced",
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id"
        },
        "contacts": {
          "$ref": "#/definitions/invoicesContacts"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "date": {
          "description": "If not supplied, defaults to today's date (Optional)",
          "format": "date-time",
          "type": "string",
          "x-alias": "date"
        },
        "discount": {
          "description": "Percent discount (Optional)",
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount"
        },
        "first_name": {
          "type": "string",
          "x-alias": "customer.contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string"
        },
        "gateways": {
          "$ref": "#/definitions/invoicesGateways"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "id"
        },
        "language": {
          "description": "Language code, defaults to the client's language; see language.list for codes (Optional)",
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "customer.contact.lastName"
        },
        "lines": {
          "$ref": "#/definitions/invoicesLines"
        },
        "links": {
          "$ref": "#/definitions/invoicesLinks"
        },
        "notes": {
          "description": "Notes (Optional)",
          "type": "string",
          "x-alias": "description"
        },
        "number": {
          "description": "Number, as it appears on the invoice (Optional)",
          "type": "string",
          "x-alias": "externalId"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "paid": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountPaid"
        },
        "po_number": {
          "description": "Purchase order number (Optional)",
          "format": "int32",
          "type": "integer",
          "x-alias": "parentDocumentNumber"
        },
        "recurring_id": {
          "format": "int32",
          "type": "integer"
        },
        "return_uri": {
          "description": "Return URI (Optional)",
          "type": "string"
        },
        "staff_id": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "One of sent, viewed or draft [default]",
          "enum": [
            "sent",
            "viewed",
            "draft",
            "disputed",
            "paid",
            "auto-paid",
            "retry",
            "failed"
          ],
          "type": "string",
          "x-alias": "status"
        },
        "terms": {
          "description": "Terms (Optional)",
          "type": "string",
          "x-alias": "paymentTerms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        },
        "url": {
          "type": "string"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "description": "'VAT Number' (Optional)",
          "format": "int32",
          "type": "integer"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "invoice_id"
      ],
      "x-vendor-objectname": "INVOICE",
      "type": "object"
    },
    "timeEntries": {
      "properties": {
        "billed": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2007-01-01"
        },
        "hours": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 4.5
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Phone consultation"
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 172667
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "task_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 369433
        },
        "time_entry_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3076613
        }
      },
      "title": "timeEntries",
      "type": "object"
    },
    "customersListContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int64",
          "type": "integer"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "phone1": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.phone"
        },
        "phone2": {
          "format": "int32",
          "type": "string"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "paymentsByIdGateway_transaction": {
      "properties": {
        "gateway_name": {
          "type": "string",
          "x-samplevalue": "Authorize.Net"
        },
        "reference_id": {
          "type": "string",
          "x-alias": "reference",
          "x-samplevalue": "2156858189"
        }
      },
      "type": "object"
    },
    "swagger-contacts-path": {
      "x-has-customfields": false,
      "type": "object",
      "title": "/contacts",
      "properties": {
        "post": {
          "$ref": "#/definitions/swaggerpost"
        }
      }
    },
    "customersListCredits": {
      "properties": {
        "credit": {
          "format": "float",
          "type": "number",
          "x-alias": "totalOutstandingAmount"
        }
      },
      "type": "object"
    },
    "taxesGetById": {
      "properties": {
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesPOSTGateways": {
      "properties": {
        "gateway": {
          "items": {
            "$ref": "#/definitions/invoicesPOSTGatewaysGateway"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customerbyid": {
      "description": "In FreshBooks, the people you send Invoices or Estimates to are Clients",
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "contacts": {
          "$ref": "#/definitions/customerbyidContacts"
        },
        "credit": {
          "format": "float",
          "type": "number"
        },
        "credits": {
          "$ref": "#/definitions/customerbyidCredits"
        },
        "currency_code": {
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "format": "int32",
          "type": "string",
          "x-alias": "fax"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "status"
        },
        "home_phone": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.homePhone"
        },
        "language": {
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "links": {
          "$ref": "#/definitions/customerbyidLinks"
        },
        "mobile": {
          "format": "int32",
          "type": "string"
        },
        "notes": {
          "description": "Return only clients with this text in their 'notes' (Optional)",
          "type": "string",
          "x-alias": "description"
        },
        "notifications": {
          "$ref": "#/definitions/customerbyidNotifications"
        },
        "organization": {
          "type": "string",
          "x-alias": "name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        },
        "url": {
          "type": "string",
          "x-alias": "webSite"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string"
        },
        "work_phone": {
          "format": "int32",
          "type": "string"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "client_id"
      ],
      "x-vendor-objectname": "CLIENT",
      "type": "object"
    },
    "invoicesGateways": {
      "properties": {
        "gateway": {
          "items": {
            "$ref": "#/definitions/invoicesGatewaysGateway"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "vendorsListObject": {
      "properties": {
        "contractor_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "projects": {
          "$ref": "#/definitions/vendorsListProjects"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "type": "string",
          "x-alias": "active"
        },
        "task_id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-primary-key": [
        "contractor_id"
      ],
      "type": "object"
    },
    "taxesPatchResponse": {
      "properties": {
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "tax_id"
      ],
      "type": "object"
    },
    "swagger400": {
      "x-has-customfields": false,
      "type": "object",
      "title": "400",
      "properties": {
        "description": {
          "x-samplevalue": "Bad Request - Often due to a missing request parameter",
          "type": "string"
        }
      }
    },
    "swagger401": {
      "x-has-customfields": false,
      "type": "object",
      "title": "401",
      "properties": {
        "description": {
          "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided",
          "type": "string"
        }
      }
    },
    "invoicesPATCHGatewaysGateway": {
      "properties": {
        "name": {
          "enum": [
            "Accept Credit Cards",
            "Accept Bank Transfers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "swagger403": {
      "x-has-customfields": false,
      "type": "object",
      "title": "403",
      "properties": {
        "description": {
          "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden",
          "type": "string"
        }
      }
    },
    "invoicesByIdGateways": {
      "properties": {
        "gateway": {
          "items": {
            "$ref": "#/definitions/invoicesByIdGatewaysGateway"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "swagger404": {
      "x-has-customfields": false,
      "type": "object",
      "title": "404",
      "properties": {
        "description": {
          "x-samplevalue": "Not found - The requested resource is not found",
          "type": "string"
        }
      }
    },
    "paymentsPOST": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "from_credit": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "invoice.id",
          "x-conditionally-required-description": "This is required if client_id is not given"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "swagger405": {
      "x-has-customfields": false,
      "type": "object",
      "title": "405",
      "properties": {
        "description": {
          "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected",
          "type": "string"
        }
      }
    },
    "swaggerDocs": {
      "x-has-customfields": false,
      "title": "swaggerDocs",
      "properties": {
        "basePath": {
          "x-samplevalue": "/elements/api-v2/hubs/crm",
          "type": "string"
        },
        "paths": {
          "$ref": "#/definitions/swaggerpaths"
        },
        "host": {
          "x-samplevalue": "localhost:5050",
          "type": "string"
        },
        "schemes": {
          "x-samplevalue": [
            "http"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "definitions": {
          "$ref": "#/definitions/swaggerdefinitions"
        },
        "swagger": {
          "x-samplevalue": "2.0",
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/swaggerinfo"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggertags"
          }
        }
      },
      "type": "object"
    },
    "swaggercontact": {
      "x-has-customfields": false,
      "type": "object",
      "title": "contact",
      "properties": {
        "email": {
          "x-samplevalue": "support@cloud-elements.com",
          "type": "string"
        }
      }
    },
    "expensesGetAllRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 100
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3051239,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-09 00:00:00"
        },
        "expense_id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "00001353330"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "has_receipt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-16 17:40:55"
        },
        "vendor": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Acme",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "type": "object"
    },
    "paymentsPatchResponse": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate"
        },
        "from_credit": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "gateway_transaction": {
          "$ref": "#/definitions/paymentsPatchResponseGateway_transaction"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "invoice.id"
        },
        "notes": {
          "type": "string",
          "x-alias": "description"
        },
        "payment_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "payment_id"
      ],
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "customersPOST": {
      "description": "In FreshBooks, the people you send Invoices or Estimates to are Clients",
      "properties": {
        "contacts": {
          "$ref": "#/definitions/customersPOSTContacts"
        },
        "currency_code": {
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "email": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "fax": {
          "format": "int32",
          "type": "string",
          "x-alias": "fax",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "home_phone": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "language": {
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "mobile": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "notes": {
          "description": "Return only clients with this text in their 'notes' (Optional)",
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "password": {
          "description": "Defaults to random password (Optional)",
          "format": "password",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "shippingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_state": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_street1": {
          "description": "Secondary address (All optional)",
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_name": {
          "description": "'VAT Number' (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_number": {
          "description": "If set, shown with vat_name under client address (Optional)",
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "work_phone": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "required": [
        "email"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "CLIENT",
      "type": "object"
    },
    "salesQuotesPostReqLinesLine": {
      "properties": {
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "swagger406": {
      "x-has-customfields": false,
      "type": "object",
      "title": "406",
      "properties": {
        "description": {
          "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value",
          "type": "string"
        }
      }
    },
    "salesQuotesPatchReqLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchReqLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "swaggerdefinition-property": {
      "x-has-customfields": false,
      "type": "object",
      "title": "#/definitions/definition-property",
      "properties": {
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        }
      }
    },
    "Object": {
      "description": "Fields for the object. There will be fields associated with an Object, which are not all described here.",
      "properties": {
        "objectField": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesGetByIdRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "auth_url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesGetByIdResContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "estimate_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesGetByIdResLines"
        },
        "links": {
          "$ref": "#/definitions/salesQuotesGetByIdResLinks"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "estimate_id"
      ],
      "type": "object"
    },
    "swagger409": {
      "x-has-customfields": false,
      "type": "object",
      "title": "409",
      "properties": {
        "description": {
          "x-samplevalue": "Conflict - If a resource being created already exists",
          "type": "string"
        }
      }
    },
    "invoicesListGatewaysGateway": {
      "properties": {
        "name": {
          "enum": [
            "Accept Credit Cards",
            "Accept Bank Transfers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "itemsPostResponse": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "active"
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "item_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-primary-key": [
        "item_id"
      ],
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "Pong": {
      "properties": {
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "expensesGetByIDRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-alias": "amount",
          "x-samplevalue": 100
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3051239
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-09 00:00:00"
        },
        "expense_id": {
          "type": "string",
          "x-alias": "id",
          "x-samplevalue": "00001353330"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "has_receipt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-alias": "status",
          "x-samplevalue": 0
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-mask": "yyyy-MM-dd HH:mm:ss",
          "x-samplevalue": "2016-02-16 17:40:55"
        },
        "vendor": {
          "type": "string",
          "x-alias": "vendor.name",
          "x-samplevalue": "Acme"
        }
      },
      "type": "object"
    },
    "invoicesPATCHLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/invoicesPATCHLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customersListContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/customersListContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "taxesPatch": {
      "properties": {
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "x-primary-key": [
        "tax_id"
      ],
      "type": "object"
    },
    "BulkQuery": {
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "instance_id": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "salesQuotesGetAllResLinks": {
      "properties": {
        "client_view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        }
      },
      "type": "object"
    },
    "timeEntriesObject": {
      "properties": {
        "billed": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2007-01-01"
        },
        "hours": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 4.5
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Phone consultation"
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 172667,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "task_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 369433,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "time_entry_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 3076611
        }
      },
      "title": "timeEntries",
      "type": "object",
      "x-primary-key": [
        "time_entry_id"
      ],
      "x-where": [
        "date_from",
        "date_to"
      ]
    },
    "salesQuotesGetAllResObject": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "auth_url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5,
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesGetAllResContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "estimate_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesGetAllResLines"
        },
        "links": {
          "$ref": "#/definitions/salesQuotesGetAllResLinks"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "estimate_id"
      ],
      "type": "object"
    },
    "salesQuotesGetByIdResLinesLine": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "timeEntriesPostReq": {
      "properties": {
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2007-01-01"
        },
        "hours": {
          "type": "string",
          "x-samplevalue": "4.5"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Phone consultation"
        },
        "project_id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "staff_id": {
          "type": "string",
          "x-samplevalue": "1"
        },
        "task_id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "required": [
        "project_id",
        "task_id"
      ],
      "title": "timeEntriesPostReq",
      "type": "object"
    },
    "invoicesLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/invoicesLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesPATCHContactsContact": {
      "properties": {
        "contact_id": {
          "description": "Primary Contact has contact_id: 0",
          "format": "int64",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        }
      },
      "type": "object"
    },
    "invoicesPOST": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "client_id": {
          "description": "Client being invoiced",
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "contacts": {
          "$ref": "#/definitions/invoicesPOSTContacts"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "date": {
          "description": "If not supplied, defaults to today's date (Optional)",
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "discount": {
          "description": "Percent discount (Optional)",
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "customer.contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "gateways": {
          "$ref": "#/definitions/invoicesPOSTGateways"
        },
        "language": {
          "description": "Language code, defaults to the client's language; see language.list for codes (Optional)",
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "customer.contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "lines": {
          "$ref": "#/definitions/invoicesPOSTLines"
        },
        "notes": {
          "description": "Notes (Optional)",
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "number": {
          "description": "Number, as it appears on the invoice (Optional)",
          "type": "string",
          "x-alias": "externalId",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "po_number": {
          "description": "Purchase order number (Optional)",
          "format": "int32",
          "type": "integer",
          "x-alias": "parentDocumentNumber",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "return_uri": {
          "description": "Return URI (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "status": {
          "description": "One of sent, viewed or draft [default]",
          "enum": [
            "sent",
            "viewed",
            "draft",
            "disputed",
            "paid",
            "auto-paid",
            "retry",
            "failed"
          ],
          "type": "string",
          "x-alias": "status",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "terms": {
          "description": "Terms (Optional)",
          "type": "string",
          "x-alias": "paymentTerms",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_number": {
          "description": "'VAT Number' (Optional)",
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "required": [
        "client_id"
      ],
      "x-has-customfields": false,
      "x-vendor-objectname": "INVOICE",
      "type": "object"
    },
    "invoicesContactsContact": {
      "properties": {
        "contact_id": {
          "description": "Primary Contact has contact_id: 0",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "customers": {
      "description": "In FreshBooks, the people you send Invoices or Estimates to are Clients",
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "contacts": {
          "$ref": "#/definitions/customersContacts"
        },
        "credit": {
          "format": "float",
          "type": "number"
        },
        "credits": {
          "$ref": "#/definitions/customersCredits"
        },
        "currency_code": {
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "email": {
          "type": "string"
        },
        "fax": {
          "format": "int32",
          "type": "string",
          "x-alias": "fax"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "status"
        },
        "home_phone": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.homePhone"
        },
        "language": {
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "links": {
          "$ref": "#/definitions/customersLinks"
        },
        "mobile": {
          "format": "int32",
          "type": "string"
        },
        "notes": {
          "description": "Return only clients with this text in their 'notes' (Optional)",
          "type": "string",
          "x-alias": "description"
        },
        "notifications": {
          "$ref": "#/definitions/customersNotifications"
        },
        "organization": {
          "type": "string",
          "x-alias": "name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city"
        },
        "s_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "shippingAddress.postalCode"
        },
        "s_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "shippingAddress.country"
        },
        "s_state": {
          "type": "string",
          "x-alias": "shippingAddress.province"
        },
        "s_street1": {
          "description": "Secondary address (All optional)",
          "type": "string",
          "x-alias": "shippingAddress.line1"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        },
        "url": {
          "type": "string",
          "x-alias": "webSite"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string"
        },
        "vat_name": {
          "description": "'VAT Number' (Optional)",
          "type": "string"
        },
        "vat_number": {
          "description": "If set, shown with vat_name under client address (Optional)",
          "format": "int32",
          "type": "integer"
        },
        "work_phone": {
          "format": "int32",
          "type": "string"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "client_id"
      ],
      "x-vendor-objectname": "CLIENT",
      "type": "object"
    },
    "customersContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/customersContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "vendorsProjectsProject": {
      "properties": {
        "project_id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "salesQuotesPostReqContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "customersListObject": {
      "description": "In FreshBooks, the people you send Invoices or Estimates to are Clients",
      "properties": {
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "contacts": {
          "$ref": "#/definitions/customersListContacts"
        },
        "credit": {
          "format": "float",
          "type": "number"
        },
        "credits": {
          "$ref": "#/definitions/customersListCredits"
        },
        "currency_code": {
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "email": {
          "type": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "fax": {
          "format": "int32",
          "type": "string",
          "x-alias": "fax"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "status",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "home_phone": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.homePhone"
        },
        "language": {
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "links": {
          "$ref": "#/definitions/customersListLinks"
        },
        "mobile": {
          "format": "int32",
          "type": "string"
        },
        "notes": {
          "description": "Return only clients with this text in their 'notes' (Optional)",
          "type": "string",
          "x-alias": "description",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "notifications": {
          "$ref": "#/definitions/customersListNotifications"
        },
        "organization": {
          "type": "string",
          "x-alias": "name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city"
        },
        "s_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "shippingAddress.postalCode"
        },
        "s_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "shippingAddress.country"
        },
        "s_state": {
          "type": "string",
          "x-alias": "shippingAddress.province"
        },
        "s_street1": {
          "description": "Secondary address (All optional)",
          "type": "string",
          "x-alias": "shippingAddress.line1"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-searchable": true,
          "x-searchable-names": [
            "updated_to",
            "updated_from"
          ],
          "x-searchable-operators": [
            "="
          ]
        },
        "url": {
          "type": "string",
          "x-alias": "webSite"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "vat_name": {
          "description": "'VAT Number' (Optional)",
          "type": "string"
        },
        "vat_number": {
          "description": "If set, shown with vat_name under client address (Optional)",
          "format": "int32",
          "type": "integer"
        },
        "work_phone": {
          "format": "int32",
          "type": "string"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "client_id"
      ],
      "x-searchable": true,
      "x-searchable-joins": [
        "AND"
      ],
      "x-vendor-objectname": "CLIENT",
      "type": "object"
    },
    "swagger500": {
      "x-has-customfields": false,
      "type": "object",
      "title": "500",
      "properties": {
        "description": {
          "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server",
          "type": "string"
        }
      }
    },
    "swaggerpaths": {
      "x-has-customfields": false,
      "type": "object",
      "title": "paths",
      "properties": {
        "/contacts": {
          "$ref": "#/definitions/swagger-contacts-path"
        }
      }
    },
    "invoicesListObject": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "description": "Total invoice amount, taxes inc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "amount_outstanding": {
          "description": "Outstanding amount on invoice from partial payment, etc. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountDue"
        },
        "auth_url": {
          "type": "string"
        },
        "client_id": {
          "description": "Client being invoiced",
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "contacts": {
          "$ref": "#/definitions/invoicesListContacts"
        },
        "created_at": {
          "format": "date-time",
          "type": "string",
          "x-alias": "createdDate"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency"
        },
        "date": {
          "description": "If not supplied, defaults to today's date (Optional)",
          "format": "date-time",
          "type": "string",
          "x-alias": "date",
          "x-searchable": true,
          "x-searchable-names": [
            "date_from",
            "date_to"
          ],
          "x-searchable-operators": [
            "="
          ]
        },
        "discount": {
          "description": "Percent discount (Optional)",
          "format": "double",
          "type": "number",
          "x-alias": "discountAmount"
        },
        "first_name": {
          "type": "string",
          "x-alias": "customer.contact.firstName"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "gateways": {
          "$ref": "#/definitions/invoicesListGateways"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "id"
        },
        "language": {
          "description": "Language code, defaults to the client's language; see language.list for codes (Optional)",
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language"
        },
        "last_name": {
          "type": "string",
          "x-alias": "customer.contact.lastName"
        },
        "lines": {
          "$ref": "#/definitions/invoicesListLines"
        },
        "links": {
          "$ref": "#/definitions/invoicesListLinks"
        },
        "notes": {
          "description": "Notes (Optional)",
          "type": "string",
          "x-alias": "description"
        },
        "number": {
          "description": "Number, as it appears on the invoice (Optional)",
          "type": "string",
          "x-alias": "externalId",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "organization": {
          "type": "string",
          "x-alias": "customer.name"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode"
        },
        "p_country": {
          "type": "string",
          "x-alias": "billingAddress.country"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2"
        },
        "paid": {
          "format": "double",
          "type": "number",
          "x-alias": "totalAmountPaid"
        },
        "po_number": {
          "description": "Purchase order number (Optional)",
          "format": "int32",
          "type": "integer",
          "x-alias": "parentDocumentNumber"
        },
        "recurring_id": {
          "format": "int32",
          "type": "integer",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "return_uri": {
          "description": "Return URI (Optional)",
          "type": "string"
        },
        "staff_id": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "One of sent, viewed or draft [default]",
          "enum": [
            "sent",
            "viewed",
            "draft",
            "disputed",
            "paid",
            "auto-paid",
            "retry",
            "failed"
          ],
          "type": "string",
          "x-alias": "status",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "terms": {
          "description": "Terms (Optional)",
          "type": "string",
          "x-alias": "paymentTerms"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-searchable": true,
          "x-searchable-names": [
            "updated_to",
            "updated_from"
          ],
          "x-searchable-operators": [
            "="
          ]
        },
        "url": {
          "type": "string"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "description": "'VAT Number' (Optional)",
          "format": "int32",
          "type": "integer"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "invoice_id"
      ],
      "x-searchable": true,
      "x-searchable-joins": [
        "AND"
      ],
      "x-vendor-objectname": "INVOICE",
      "type": "object"
    },
    "customersListNotifications": {
      "properties": {
        "late_payment_reminders": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "swagger502": {
      "x-has-customfields": false,
      "type": "object",
      "title": "502",
      "properties": {
        "description": {
          "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server",
          "type": "string"
        }
      }
    },
    "BulkStatus": {
      "description": "Status of the bulk upload.",
      "type": "object",
      "properties": {
        "batchId": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "message": {
          "type": "string"
        },
        "numOfLeadsProcessed": {
          "description": "Contact/Leads loaded",
          "type": "number"
        },
        "numOfRowsFailed": {
          "description": "Failed count",
          "type": "number"
        },
        "numOfRowsWithWarning": {
          "description": "Contact/Leads that had warnings",
          "type": "number"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      }
    },
    "salesQuotesPatchReqContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesPatchReqContactsContact"
        }
      },
      "type": "object"
    },
    "expensesPatchReq": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2021-02-25T18:56:18.988Z"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "tax1_amount": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "tax1_percent": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "tax2_amount": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "tax2_percent": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "vendor": {
          "type": "string",
          "x-samplevalue": "string"
        }
      },
      "title": "expensesPatchReq",
      "type": "object"
    },
    "invoicesContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/invoicesContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesPOSTLinesLine": {
      "properties": {
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "line.quantity",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax1_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax2_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "type": {
          "description": "One of 'Item' or 'Time'. If omitted, the line's type defaults to 'Item'",
          "enum": [
            "Time",
            "Item"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "line.product.price",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        }
      },
      "type": "object"
    },
    "expensesPatchRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "category_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2021-02-25T19:00:49.647Z"
        },
        "expense_id": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "string"
        },
        "has_receipt": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "status": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "x-samplevalue": "2021-02-25T19:00:49.647Z"
        }
      },
      "title": "expensesPatchRes",
      "x-primary-key": [
        "expense_id"
      ],
      "type": "object"
    },
    "BulkJobList": {
      "title": "BulkJobList",
      "properties": {
        "record_count": {
          "x-samplevalue": 41,
          "format": "int32",
          "type": "integer"
        },
        "job_query": {
          "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'",
          "type": "string"
        },
        "job_reset_attempt": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "completion_time": {
          "x-samplevalue": 1542829827804,
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "x-samplevalue": "COMPLETED",
          "type": "string"
        },
        "notification_url": {
          "type": "string"
        },
        "job_direction": {
          "x-samplevalue": "DOWNLOAD",
          "type": "string"
        },
        "error_count": {
          "x-samplevalue": 0,
          "format": "int32",
          "type": "integer"
        },
        "job_state": {
          "type": "string"
        },
        "createdDate": {
          "x-samplevalue": 1542829826619,
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "x-samplevalue": 1722,
          "format": "int32",
          "type": "integer"
        },
        "instanceId": {
          "x-samplevalue": 123453,
          "format": "int32",
          "type": "integer"
        },
        "object_name": {
          "x-samplevalue": "systemuser",
          "type": "string"
        },
        "fileFormat": {
          "x-samplevalue": "csv",
          "type": "string"
        }
      },
      "type": "object"
    },
    "objectsMetadataFields": {
      "properties": {
        "mask": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vendorDisplayName": {
          "type": "string"
        },
        "vendorPath": {
          "type": "string"
        },
        "vendorReadOnly": {
          "type": "boolean"
        },
        "vendorRequired": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "invoicesByIdContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/invoicesByIdContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customersLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "statement": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "customerbyidContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/customerbyidContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesByIdGatewaysGateway": {
      "properties": {
        "name": {
          "enum": [
            "Accept Credit Cards",
            "Accept Bank Transfers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesGetAllResContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "salesQuotesPostRes": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "auth_url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesPostResContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "estimate_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesPostResLines"
        },
        "links": {
          "$ref": "#/definitions/salesQuotesPostResLinks"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "estimate_id"
      ],
      "type": "object"
    },
    "salesQuotesPatchResponseContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "salesQuotesPostReq": {
      "properties": {
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesPostReqContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesPostReqLines"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "swaggertags": {
      "x-has-customfields": false,
      "title": "tags",
      "properties": {
        "name": {
          "x-samplevalue": "contacts",
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesGetByIdResLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesGetByIdResLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchResponseLinks": {
      "properties": {
        "client_view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        }
      },
      "type": "object"
    },
    "bulkDownloadRequest": {
      "properties": {
        "apiLimit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 100
        },
        "continueFromJobId": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "docsHubDetails": {
          "$ref": "#/definitions/bulkDownloadRequestDocsHubDetails"
        },
        "filterDateField": {
          "type": "string",
          "x-samplevalue": "lastModifiedDate"
        },
        "filterNulls": {
          "type": "boolean",
          "x-samplevalue": true
        },
        "format": {
          "enum": [
            "application/json",
            "txt/csv",
            "application/jsonl"
          ],
          "type": "string",
          "x-samplevalue": "application/json"
        },
        "from": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-06T13:22:17-08:00"
        },
        "limit": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 107
        },
        "notificationUrl": {
          "type": "string",
          "x-samplevalue": "https://myreceiver.com/whatever"
        },
        "objectName": {
          "type": "string",
          "x-samplevalue": "accounts"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 200
        },
        "query": {
          "$ref": "#/definitions/bulkDownloadRequestQuery"
        },
        "selectFields": {
          "type": "string",
          "x-samplevalue": "a,b,c"
        },
        "to": {
          "format": "date-time",
          "type": "string",
          "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
          "x-samplevalue": "2014-10-10T13:22:17-08:00"
        },
        "where": {
          "type": "string",
          "x-samplevalue": "name='Alex' and gender='male'"
        }
      },
      "required": [
        "objectName",
        "format"
      ],
      "title": "bulkDownloadRequest",
      "type": "object"
    },
    "invoicesPATCHGateways": {
      "properties": {
        "gateway": {
          "items": {
            "$ref": "#/definitions/invoicesPATCHGatewaysGateway"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "vendorsProjects": {
      "properties": {
        "project": {
          "items": {
            "$ref": "#/definitions/vendorsProjectsProject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "salesQuotesPostReqContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesPostReqContactsContact"
        }
      },
      "type": "object"
    },
    "BulkUploadResponse": {
      "description": "BulkLoad response of bulk download.",
      "properties": {
        "id": {
          "description": "Id of the bulk job",
          "type": "string"
        },
        "instanceId": {
          "description": "Instance Id of the bulk job",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "description": "Status of the bulk job",
          "type": "string"
        }
      },
      "type": "object"
    },
    "customerbyidNotifications": {
      "properties": {
        "late_payment_reminders": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "taxesListObject": {
      "properties": {
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "taxesPostResponse": {
      "properties": {
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "tax_id"
      ],
      "type": "object"
    },
    "salesQuotesPostReqLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostReqLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesPOSTContactsContact": {
      "properties": {
        "contact_id": {
          "description": "Primary Contact has contact_id: 0",
          "format": "int64",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        }
      },
      "type": "object"
    },
    "swaggerparameters": {
      "x-has-customfields": false,
      "title": "parameters",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerparametersschema"
        },
        "in": {
          "x-samplevalue": "header",
          "type": "string"
        },
        "name": {
          "x-samplevalue": "Authorization",
          "type": "string"
        },
        "description": {
          "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
          "type": "string"
        },
        "type": {
          "x-samplevalue": "string",
          "type": "string"
        },
        "required": {
          "x-samplevalue": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "invoicesGatewaysGateway": {
      "properties": {
        "name": {
          "enum": [
            "Accept Credit Cards",
            "Accept Bank Transfers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchResponseContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesPatchResponseContactsContact"
        }
      },
      "type": "object"
    },
    "invoicesPOSTLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/invoicesPOSTLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResLinesLine": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "hooksListObject": {
      "properties": {
        "callback_id": {
          "format": "int32",
          "type": "integer"
        },
        "verified": {
          "format": "int32",
          "type": "integer"
        },
        "event": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesGetByIdResContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "customersPOSTContactsContact": {
      "properties": {
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "phone1": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.phone",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "phone2": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "paymentsPatchResponseGateway_transaction": {
      "properties": {
        "gateway_name": {
          "type": "string",
          "x-samplevalue": "Authorize.Net"
        },
        "reference_id": {
          "type": "string",
          "x-alias": "reference",
          "x-samplevalue": "2156858189"
        }
      },
      "type": "object"
    },
    "invoicesPATCHContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/invoicesPATCHContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customersContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int64",
          "type": "integer"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "phone1": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.phone"
        },
        "phone2": {
          "format": "int32",
          "type": "string"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "edit": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "vendors": {
      "properties": {
        "contractor_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "projects": {
          "$ref": "#/definitions/vendorsProjects"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "type": "string",
          "x-alias": "active"
        },
        "task_id": {
          "format": "int32",
          "type": "integer"
        }
      },
      "x-primary-key": [
        "contractor_id"
      ],
      "type": "object"
    },
    "salesQuotesPatchReqLinesLine": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "salesQuotesGetAllResContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesGetAllResContactsContact"
        }
      },
      "type": "object"
    },
    "swagger200": {
      "x-has-customfields": false,
      "type": "object",
      "title": "200",
      "properties": {
        "schema": {
          "$ref": "#/definitions/swaggerschema"
        },
        "description": {
          "x-samplevalue": "OK - Everything worked as expected",
          "type": "string"
        }
      }
    },
    "salesQuotesPostResContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "customersPATCHContactsContact": {
      "properties": {
        "email": {
          "type": "string",
          "x-alias": "contact.email",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "phone1": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.phone",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "phone2": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "type": "object"
    },
    "customersListLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "statement": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesPostResLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesPostResLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "bulkDownloadRequestQuery": {
      "properties": {
        "anyKey": {
          "type": "string",
          "x-samplevalue": "anyValue"
        }
      },
      "title": "query",
      "type": "object"
    },
    "vendorsListProjects": {
      "properties": {
        "project": {
          "items": {
            "$ref": "#/definitions/vendorsListProjectsProject"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "itemsPatch": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        }
      },
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "objectsMetadata": {
      "properties": {
        "fields": {
          "items": {
            "$ref": "#/definitions/objectsMetadataFields"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "vendorsListProjectsProject": {
      "properties": {
        "project_id": {
          "type": "string",
          "x-samplevalue": "1"
        }
      },
      "type": "object"
    },
    "customersCredits": {
      "properties": {
        "credit": {
          "format": "float",
          "type": "number",
          "x-alias": "totalOutstandingAmount"
        }
      },
      "type": "object"
    },
    "swaggerschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact-POST-Response",
          "type": "string"
        }
      }
    },
    "customerbyidCredits": {
      "properties": {
        "credit": {
          "format": "float",
          "type": "number",
          "x-alias": "totalOutstandingAmount"
        }
      },
      "type": "object"
    },
    "customersPATCH": {
      "description": "In FreshBooks, the people you send Invoices or Estimates to are Clients",
      "properties": {
        "contacts": {
          "$ref": "#/definitions/customersPATCHContacts"
        },
        "currency_code": {
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-alias": "currency",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "email": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "fax": {
          "format": "int32",
          "type": "string",
          "x-alias": "fax",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "home_phone": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.homePhone",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "language": {
          "enum": [
            "en",
            "fr",
            "da",
            "nl",
            "et",
            "de",
            "it",
            "no",
            "pt",
            "es",
            "es-419",
            "sv"
          ],
          "type": "string",
          "x-alias": "language",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "mobile": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "notes": {
          "description": "Return only clients with this text in their 'notes' (Optional)",
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "organization": {
          "type": "string",
          "x-alias": "name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_city": {
          "type": "string",
          "x-alias": "billingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "billingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "billingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_state": {
          "type": "string",
          "x-alias": "billingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street1": {
          "description": "Primary address (All optional)",
          "type": "string",
          "x-alias": "billingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "p_street2": {
          "type": "string",
          "x-alias": "billingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "password": {
          "description": "Defaults to random password (Optional)",
          "format": "password",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_city": {
          "type": "string",
          "x-alias": "shippingAddress.city",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_code": {
          "format": "int32",
          "type": "integer",
          "x-alias": "shippingAddress.postalCode",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_country": {
          "enum": [
            "Afghanistan",
            "Albania",
            "Algeria",
            "American Samoa",
            "Andorra",
            "Anguilla",
            "Angola",
            "Antarctica",
            "Antigua and Barbuda",
            "Argentina",
            "Armenia",
            "Aruba",
            "Australia",
            "Austria",
            "Azerbaijan",
            "Bahamas",
            "Bahrain",
            "Bangladesh",
            "Barbados",
            "Belarus",
            "Belgium",
            "Belize",
            "Benin",
            "Bermuda",
            "Bhutan",
            "Bolivia",
            "Bosnia and Herzegovina",
            "Botswana",
            "Bouvet Island",
            "Brazil",
            "British Indian Ocean Territory",
            "Brunei Darussalam",
            "Bulgaria",
            "Burkina Faso",
            "Burundi",
            "Cambodia",
            "Cameroon",
            "Canada",
            "Cape Verde",
            "Cayman Islands",
            "Chad",
            "Chile",
            "China",
            "Christmas Island",
            "Cocos (Keeling Islands)",
            "Colombia",
            "Comoros",
            "Congo",
            "Cook Islands",
            "Costa Rica",
            "Cote D'Ivoire (Ivory Coast)",
            "Croatia (Hrvatska)",
            "Cuba",
            "Curacao",
            "Cyprus",
            "Czech Republic",
            "Denmark",
            "Djibouti",
            "Dominica",
            "Dominican Republic",
            "East Timor",
            "Egypt",
            "El Salvador",
            "Ecuador",
            "Equatorial Guinea",
            "Estonia",
            "Ethiopia",
            "Falkland Islands (Malvinas)",
            "Faroe Islands",
            "Federated States of Micronesia",
            "Fiji",
            "Finland",
            "France",
            "France, Metropolitan",
            "French Guiana",
            "French Polynesia",
            "French Southern Territories",
            "French West Indies",
            "Gabon",
            "Gambia",
            "Georgia",
            "Germany",
            "Ghana",
            "Gibraltar",
            "Greece",
            "Greenland",
            "Grenada",
            "Guadeloupe",
            "Guam",
            "Guatemala",
            "Guernsey",
            "Guinea",
            "Guinea-Bissau",
            "Guyana",
            "Haiti",
            "Heard and McDonald Islands",
            "Honduras",
            "Hong Kong",
            "Hungary",
            "Iceland",
            "India",
            "Indonesia",
            "Iraq",
            "Ireland",
            "Isle of Man",
            "Israel",
            "Italy",
            "Jamaica",
            "Japan",
            "Jersey",
            "Jordan",
            "Kazakhstan",
            "Kenya",
            "Kiribati",
            "Republic of Korea",
            "Kuwait",
            "Kyrgyzstan",
            "Laos",
            "Latvia",
            "Lesotho",
            "Liberia",
            "Liechtenstein",
            "Lithuania",
            "Luxembourg",
            "Macau",
            "Macedonia",
            "Madagascar",
            "Malawi",
            "Malaysia",
            "Maldives",
            "Mali",
            "Malta",
            "Marshall Islands",
            "Martinique",
            "Mauritania",
            "Mauritius",
            "Mayotte",
            "Mexico",
            "Moldova",
            "Monaco",
            "Mongolia",
            "Montenegro",
            "Montserrat",
            "Morocco",
            "Mozambique",
            "Namibia",
            "Nauru",
            "Nepal",
            "Netherlands",
            "New Caledonia",
            "New Zealand",
            "Nicaragua",
            "Niger",
            "Nigeria",
            "Niue",
            "Norfolk Island",
            "Northern Mariana Islands",
            "Norway",
            "Oman",
            "Pakistan",
            "Palau",
            "Palestine, State of",
            "Panama",
            "Papua New Guinea",
            "Paraguay",
            "Peru",
            "Philippines",
            "Pitcairn",
            "Poland",
            "Portugal",
            "Puerto Rico",
            "Qatar",
            "Rwanda",
            "Reunion",
            "Romania",
            "Russian Federation",
            "St. Helena",
            "Saint Kitts and Nevis",
            "Saint Lucia",
            "Saint-Martin",
            "St. Pierre and Miquelon",
            "St Vincent and the Grenadines",
            "Samoa",
            "San Marino",
            "Sao Tome and Principe",
            "Saudi Arabia",
            "Senegal",
            "Serbia",
            "Seychelles",
            "Sierra Leone",
            "Singapore",
            "Sint Maarten",
            "Slovak Republic",
            "Slovenia",
            "Solomon Islands",
            "South Africa",
            "Spain",
            "Sri Lanka",
            "Sudan",
            "Suriname",
            "Svalbard",
            "Swaziland",
            "Sweden",
            "Switzerland",
            "Taiwan",
            "Tajikistan",
            "Tanzania",
            "Thailand",
            "Togo",
            "Tokelau",
            "Tonga",
            "Trinidad and Tobago",
            "Tunisia",
            "Turkey",
            "Turkmenistan",
            "Turks and Caicos Islands",
            "Tuvalu",
            "Uganda",
            "Ukraine",
            "United Arab Emirates",
            "United Kingdom",
            "United States",
            "US Minor Outlying Islands",
            "Uruguay",
            "Uzbekistan",
            "Vanuatu",
            "Vatican City State",
            "Venezuela",
            "Vietnam",
            "Virgin Islands (British)",
            "Virgin Islands (US)",
            "Wallis and Futuna Islands",
            "Western Sahara",
            "Zambia"
          ],
          "type": "string",
          "x-alias": "shippingAddress.country",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_state": {
          "type": "string",
          "x-alias": "shippingAddress.province",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_street1": {
          "description": "Secondary address (All optional)",
          "type": "string",
          "x-alias": "shippingAddress.line1",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "s_street2": {
          "type": "string",
          "x-alias": "shippingAddress.line2",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_name": {
          "description": "'VAT Number' (Optional)",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "vat_number": {
          "description": "If set, shown with vat_name under client address (Optional)",
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "work_phone": {
          "format": "int32",
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "CLIENT",
      "type": "object"
    },
    "salesQuotesPatchResponseLinesLine": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "invoicesListLinesLine": {
      "properties": {
        "amount": {
          "description": "Line amount, taxes/discount excluding. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "line.totalAmount"
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "line_id": {
          "description": "(Read Only) line id",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "line.quantity"
        },
        "tax1_name": {
          "type": "string"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer"
        },
        "tax2_name": {
          "type": "string"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of 'Item' or 'Time'. If omitted, the line's type defaults to 'Item'",
          "enum": [
            "Time",
            "Item"
          ],
          "type": "string"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "line.product.price"
        }
      },
      "type": "object"
    },
    "salesQuotesGetByIdResLinks": {
      "properties": {
        "client_view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        }
      },
      "type": "object"
    },
    "swagger415": {
      "x-has-customfields": false,
      "type": "object",
      "title": "415",
      "properties": {
        "description": {
          "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type",
          "type": "string"
        }
      }
    },
    "salesQuotesPatchResponseLines": {
      "properties": {
        "line": {
          "items": {
            "$ref": "#/definitions/salesQuotesPatchResponseLinesLine"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "paymentsPATCH": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "notes": {
          "type": "string",
          "x-alias": "description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful PATCH call"
        }
      },
      "x-has-customfields": false,
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "salesQuotesPatchReq": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "auth_url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesPatchReqContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "estimate_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesPatchReqLines"
        },
        "links": {
          "$ref": "#/definitions/salesQuotesPatchReqLinks"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesPATCHLinesLine": {
      "properties": {
        "compound_tax": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "line.quantity",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax1_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax2_name": {
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "type": {
          "description": "One of 'Item' or 'Time'. If omitted, the line's type defaults to 'Item'",
          "enum": [
            "Time",
            "Item"
          ],
          "type": "string",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "line.product.price",
          "x-conditionally-required-description": "Any one of the fields from x-conditional required fields is needed to make a successful POST/PATCH call"
        }
      },
      "type": "object"
    },
    "taxesPost": {
      "properties": {
        "compound": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number_": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "format": "int32",
          "type": "integer"
        },
        "tax_id": {
          "format": "int32",
          "type": "integer"
        },
        "updated": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "x-primary-key": [
        "tax_id"
      ],
      "type": "object"
    },
    "invoicesListLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "edit": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "invoicesByIdLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "edit": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "swaggerparametersschema": {
      "x-has-customfields": false,
      "type": "object",
      "title": "schema",
      "properties": {
        "$ref": {
          "x-samplevalue": "#/definitions/Contact",
          "type": "string"
        }
      }
    },
    "paymentsListGateway_transaction": {
      "properties": {
        "gateway_name": {
          "type": "string",
          "x-samplevalue": "Authorize.Net"
        },
        "reference_id": {
          "type": "string",
          "x-alias": "reference",
          "x-samplevalue": "2156858189"
        }
      },
      "type": "object"
    },
    "itemsById": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "active"
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "item_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "tax1_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId"
        },
        "tax2_id": {
          "format": "int32",
          "type": "integer"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "item_id"
      ],
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "swaggerresponses": {
      "x-has-customfields": false,
      "type": "object",
      "title": "responses",
      "properties": {
        "200": {
          "$ref": "#/definitions/swagger200"
        },
        "400": {
          "$ref": "#/definitions/swagger400"
        },
        "401": {
          "$ref": "#/definitions/swagger401"
        },
        "403": {
          "$ref": "#/definitions/swagger403"
        },
        "404": {
          "$ref": "#/definitions/swagger404"
        },
        "405": {
          "$ref": "#/definitions/swagger405"
        },
        "406": {
          "$ref": "#/definitions/swagger406"
        },
        "409": {
          "$ref": "#/definitions/swagger409"
        },
        "415": {
          "$ref": "#/definitions/swagger415"
        },
        "500": {
          "$ref": "#/definitions/swagger500"
        },
        "502": {
          "$ref": "#/definitions/swagger502"
        }
      }
    },
    "swaggerproperties": {
      "x-has-customfields": false,
      "type": "object",
      "title": "properties",
      "properties": {
        "definition-property": {
          "$ref": "#/definitions/swaggerdefinition-property"
        }
      }
    },
    "customerbyidContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int64",
          "type": "integer"
        },
        "email": {
          "type": "string",
          "x-alias": "contact.email"
        },
        "first_name": {
          "type": "string",
          "x-alias": "contact.firstName"
        },
        "last_name": {
          "type": "string",
          "x-alias": "contact.lastName"
        },
        "phone1": {
          "format": "int32",
          "type": "string",
          "x-alias": "contact.phone"
        },
        "phone2": {
          "format": "int32",
          "type": "string"
        },
        "username": {
          "description": "Defaults to first name + last name (Optional)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "timeEntriesPatchReq": {
      "properties": {
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2007-01-01"
        },
        "hours": {
          "format": "double",
          "type": "number",
          "x-samplevalue": 4.5
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Phone consultation"
        },
        "project_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 172667
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "task_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 369433
        }
      },
      "required": [
        "task_id",
        "project_id"
      ],
      "title": "timeEntriesPatchReq",
      "type": "object"
    },
    "invoicesByIdContactsContact": {
      "properties": {
        "contact_id": {
          "description": "Primary Contact has contact_id: 0",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "itemsPatchResponse": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "folder": {
          "description": "One of active, archived, deleted",
          "enum": [
            "active",
            "archived",
            "deleted"
          ],
          "type": "string",
          "x-alias": "active"
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "item_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "id"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "tax1_id": {
          "format": "int32",
          "type": "integer",
          "x-alias": "taxId"
        },
        "tax2_id": {
          "format": "int32",
          "type": "integer"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-primary-key": [
        "item_id"
      ],
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "paymentsPostResponse": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate"
        },
        "from_credit": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "invoice.id"
        },
        "notes": {
          "type": "string",
          "x-alias": "description"
        },
        "payment_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "payment_id"
      ],
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "paymentsListObject": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate",
          "x-searchable": true,
          "x-searchable-names": [
            "date_to",
            "date_from"
          ],
          "x-searchable-operators": [
            "="
          ]
        },
        "from_credit": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "gateway_transaction": {
          "$ref": "#/definitions/paymentsListGateway_transaction"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "invoice.id",
          "x-searchable": true,
          "x-searchable-operators": [
            "="
          ]
        },
        "notes": {
          "type": "string",
          "x-alias": "description"
        },
        "payment_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate",
          "x-searchable": true,
          "x-searchable-names": [
            "updated_to",
            "updated_from"
          ],
          "x-searchable-operators": [
            "="
          ]
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "payment_id"
      ],
      "x-searchable": true,
      "x-searchable-joins": [
        "AND"
      ],
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "salesQuotesGetAllResLinesLine": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "description": {
          "type": "string",
          "x-samplevalue": "Mowed the Lawn"
        },
        "name": {
          "type": "string",
          "x-samplevalue": "Yard Work"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 4
        },
        "tax1_name": {
          "type": "string",
          "x-samplevalue": "GST"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "tax2_name": {
          "type": "string",
          "x-samplevalue": "PST"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 8
        },
        "type": {
          "type": "string",
          "x-samplevalue": "Item"
        },
        "unit_cost": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        }
      },
      "type": "object"
    },
    "invoicesPOSTGatewaysGateway": {
      "properties": {
        "name": {
          "enum": [
            "Accept Credit Cards",
            "Accept Bank Transfers"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "salesQuotesPatchResponse": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 40
        },
        "auth_url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        },
        "client_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 5
        },
        "contacts": {
          "$ref": "#/definitions/salesQuotesPatchResponseContacts"
        },
        "currency_code": {
          "type": "string",
          "x-samplevalue": "CAD"
        },
        "date": {
          "format": "date",
          "type": "string",
          "x-mask": "yyyy-MM-dd",
          "x-samplevalue": "2009-07-21"
        },
        "discount": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 10
        },
        "estimate_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "first_name": {
          "type": "string",
          "x-samplevalue": "John"
        },
        "folder": {
          "type": "string",
          "x-samplevalue": "active"
        },
        "language": {
          "type": "string",
          "x-samplevalue": "en"
        },
        "last_name": {
          "type": "string",
          "x-samplevalue": "Smith"
        },
        "lines": {
          "$ref": "#/definitions/salesQuotesPatchResponseLines"
        },
        "links": {
          "$ref": "#/definitions/salesQuotesPatchResponseLinks"
        },
        "notes": {
          "type": "string",
          "x-samplevalue": "Some notes for the customer to see."
        },
        "number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "organization": {
          "type": "string",
          "x-samplevalue": "Sample Organization"
        },
        "p_city": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_code": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 553132
        },
        "p_country": {
          "type": "string",
          "x-samplevalue": "United States"
        },
        "p_state": {
          "type": "string",
          "x-samplevalue": "New York"
        },
        "p_street1": {
          "type": "string",
          "x-samplevalue": "123 Fake St."
        },
        "p_street2": {
          "type": "string",
          "x-samplevalue": "Apt 123"
        },
        "po_number": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 84
        },
        "staff_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 1
        },
        "status": {
          "type": "string",
          "x-samplevalue": "draft"
        },
        "terms": {
          "type": "string",
          "x-samplevalue": "Once accepted, payment must be made in 30 days."
        },
        "url": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "vat_name": {
          "type": "string"
        },
        "vat_number": {
          "type": "string"
        }
      },
      "x-primary-key": [
        "estimate_id"
      ],
      "type": "object"
    },
    "swaggerinfo": {
      "x-has-customfields": false,
      "type": "object",
      "title": "info",
      "properties": {
        "contact": {
          "$ref": "#/definitions/swaggercontact"
        },
        "title": {
          "x-samplevalue": "hubspotcrm",
          "type": "string"
        },
        "version": {
          "x-samplevalue": "api-v2",
          "type": "string"
        }
      }
    },
    "salesQuotesGetByIdResContacts": {
      "properties": {
        "contact": {
          "$ref": "#/definitions/salesQuotesGetByIdResContactsContact"
        }
      },
      "type": "object"
    },
    "customersNotifications": {
      "properties": {
        "late_payment_reminders": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "customerbyidLinks": {
      "properties": {
        "client_view": {
          "type": "string"
        },
        "statement": {
          "type": "string"
        },
        "view": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "itemsPost": {
      "properties": {
        "description": {
          "type": "string",
          "x-alias": "salesDescription"
        },
        "inventory": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnHand"
        },
        "name": {
          "type": "string",
          "x-alias": "name"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "quantityOnOrder"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "price"
        }
      },
      "required": [
        "name"
      ],
      "x-vendor-objectname": "ITEM",
      "type": "object"
    },
    "bulkDownloadRequestDocsHubDetails": {
      "properties": {
        "instanceId": {
          "type": "string",
          "x-samplevalue": "1234"
        },
        "path": {
          "type": "string",
          "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
        }
      },
      "title": "docsHubDetails",
      "type": "object"
    },
    "customersPOSTContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/customersPOSTContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "customersPATCHContacts": {
      "properties": {
        "contact": {
          "items": {
            "$ref": "#/definitions/customersPATCHContactsContact"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "invoicesByIdLinesLine": {
      "properties": {
        "amount": {
          "description": "Line amount, taxes/discount excluding. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "line.totalAmount"
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "line_id": {
          "description": "(Read Only) line id",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "line.quantity"
        },
        "tax1_name": {
          "type": "string"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer"
        },
        "tax2_name": {
          "type": "string"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of 'Item' or 'Time'. If omitted, the line's type defaults to 'Item'",
          "enum": [
            "Time",
            "Item"
          ],
          "type": "string"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "line.product.price"
        }
      },
      "type": "object"
    },
    "invoicesLinesLine": {
      "properties": {
        "amount": {
          "description": "Line amount, taxes/discount excluding. (Read Only)",
          "format": "double",
          "type": "number",
          "x-alias": "line.totalAmount"
        },
        "compound_tax": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "type": "string",
          "x-alias": "line.description"
        },
        "line_id": {
          "description": "(Read Only) line id",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string",
          "x-alias": "line.product.name"
        },
        "order": {
          "format": "int32",
          "type": "integer"
        },
        "quantity": {
          "format": "int32",
          "type": "integer",
          "x-alias": "line.quantity"
        },
        "tax1_name": {
          "type": "string"
        },
        "tax1_percent": {
          "format": "int32",
          "type": "integer"
        },
        "tax2_name": {
          "type": "string"
        },
        "tax2_percent": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "One of 'Item' or 'Time'. If omitted, the line's type defaults to 'Item'",
          "enum": [
            "Time",
            "Item"
          ],
          "type": "string"
        },
        "unit_cost": {
          "format": "double",
          "type": "number",
          "x-alias": "line.product.price"
        }
      },
      "type": "object"
    },
    "swaggerpost": {
      "x-has-customfields": false,
      "type": "object",
      "title": "post",
      "properties": {
        "summary": {
          "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact.",
          "type": "string"
        },
        "operationId": {
          "x-samplevalue": "createContact",
          "type": "string"
        },
        "responses": {
          "$ref": "#/definitions/swaggerresponses"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/swaggerparameters"
          }
        },
        "tags": {
          "x-samplevalue": [
            "contacts"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "salesQuotesPatchReqContactsContact": {
      "properties": {
        "contact_id": {
          "format": "int32",
          "type": "integer",
          "x-samplevalue": 0
        }
      },
      "type": "object"
    },
    "paymentsById": {
      "description": "Invoices allow you to bill a Client for your products and/or services, and help you keep track of your income in FreshBooks",
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "x-alias": "amount"
        },
        "client_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "customer.id"
        },
        "currency_code": {
          "description": "Currency Code, defaults to your base currency (Optional)",
          "enum": [
            "USD",
            "CAD",
            "EUR",
            "GBP",
            "AUD",
            "AED",
            "AFN",
            "ALL",
            "AMD",
            "ANG",
            "AOA",
            "ARS",
            "AWG",
            "AZN",
            "BAM",
            "BBD",
            "BDT",
            "BGN",
            "BHD",
            "BIF",
            "BMD",
            "BND",
            "BOB",
            "BRL",
            "BSD",
            "BTN",
            "BWP",
            "BZD",
            "CDF",
            "CHF",
            "CLP",
            "CNY",
            "COP",
            "CRC",
            "CUP",
            "CVE",
            "CZK",
            "DJF",
            "DKK",
            "DOP",
            "DZD",
            "EEK",
            "EGP",
            "ERN",
            "ETB",
            "FJD",
            "FKP",
            "GEL",
            "GHS",
            "GIP",
            "GMD",
            "GNF",
            "GTQ",
            "GYD",
            "HKD",
            "HNL",
            "HRK",
            "HTG",
            "HUF",
            "IDR",
            "ILS",
            "INR",
            "IQD",
            "IRR",
            "ISK",
            "JMD",
            "JOD",
            "JPY",
            "KES",
            "KGS",
            "KHR",
            "KMF",
            "KRW",
            "KWD",
            "KYD",
            "KZT",
            "LAK",
            "LBP",
            "LKR",
            "LRD",
            "LSL",
            "LTL",
            "LVL",
            "LYD",
            "MAD",
            "MDL",
            "MGA",
            "MKD",
            "MNT",
            "MOP",
            "MRO",
            "MUR",
            "MVR",
            "MWK",
            "MXN",
            "MYR",
            "MZN",
            "NAD",
            "NGN",
            "NIO"
          ],
          "type": "string"
        },
        "date": {
          "format": "date-time",
          "type": "string",
          "x-alias": "paymentDate"
        },
        "from_credit": {
          "enum": [
            0,
            1
          ],
          "format": "int32",
          "type": "integer"
        },
        "gateway_transaction": {
          "$ref": "#/definitions/paymentsByIdGateway_transaction"
        },
        "invoice_id": {
          "type": "string",
          "x-alias": "invoice.id"
        },
        "notes": {
          "type": "string",
          "x-alias": "description"
        },
        "payment_id": {
          "format": "int64",
          "type": "integer",
          "x-alias": "id"
        },
        "type": {
          "enum": [
            "Cash",
            "Check",
            "Credit",
            "Credit Card",
            "Bank Transfer",
            "Debit",
            "PayPal",
            "2Checkout",
            "VISA",
            "MASTERCARD",
            "DISCOVER",
            "NOVA",
            "AMEX",
            "DINERS",
            "EUROCARD",
            "JCB",
            "ACH"
          ],
          "type": "string",
          "x-alias": "paymentMethod"
        },
        "updated": {
          "format": "date-time",
          "type": "string",
          "x-alias": "modifiedDate"
        }
      },
      "x-has-customfields": false,
      "x-primary-key": [
        "payment_id"
      ],
      "x-vendor-objectname": "PAYMENT",
      "type": "object"
    },
    "salesQuotesPatchReqLinks": {
      "properties": {
        "client_view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/view/3R8gdDNVJ8uDpC6X"
        },
        "view": {
          "type": "string",
          "x-samplevalue": "https://sample.freshbooks.com/estimates/00000000001"
        }
      },
      "type": "object"
    }
  },
  "swagger": "2.0",
  "info": {
    "x-element-name": "Freshbooks Classic",
    "x-element-hub": "finance",
    "x-element-key": "freshbooks",
    "title": "freshbooks",
    "x-element-id": 244,
    "version": "api-v2",
    "description": "Add a Freshbooks Instance to connect your existing Freshbooks account to the Finance Hub"
  },
  "tags": [
    {
      "name": "Bulk"
    },
    {
      "name": "Customers"
    },
    {
      "name": "Expenses"
    },
    {
      "name": "Hooks"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Items"
    },
    {
      "name": "Object Name"
    },
    {
      "name": "Objects"
    },
    {
      "name": "Payments"
    },
    {
      "name": "Ping"
    },
    {
      "name": "Receipts"
    },
    {
      "name": "Sales Quotes"
    },
    {
      "name": "Taxes"
    },
    {
      "name": "Time Entries"
    },
    {
      "name": "Vendors"
    }
  ],
  "x-sap-api-type": "REST",
  "x-sap-shortText": "Financial and accounting software for small and medium-sized businesses",
  "externalDocs": {
    "description": "SAP Open Connectors Documentation",
    "url": "https://help.openconnectors.ext.hana.ondemand.com/home/freshbooks"
  }
}